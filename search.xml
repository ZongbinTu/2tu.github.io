<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DataBinding setDrawable 无法显示的问题</title>
    <url>/2015/10/14/DataBinding-setDrawable/</url>
    <content><![CDATA[<ul>
<li><p>问题：dataBinding中drawableLeft无效</p>
</li>
<li><p>解决办法：采用传统代码设置</p>
</li>
<li><p>思路：</p>
</li>
</ul>
<p>1、使用代码设置Drawable有两种方式。<br>drawable.setBounds(int,int,int,int);//未设置则不显示<br>view.setCompoundDrawables(drawable,null,null,null);</p>
<p>view.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);<br><a id="more"></a><br>2、查看生成的binding代码发现采用setCompoundDrawables方式，且未设置Bounds</p>
<ul>
<li>使用到的代码<br><br>android:drawableRight=”@{1==employee.state ?@drawable/ic_job : @drawable/ic_job_quit}”</li>
</ul>
<p>TextViewBindingAdapter</p>
<pre><code>@BindingAdapter({&quot;android:drawableRight&quot;})
public static void setDrawableRight(TextView view, Drawable drawable) {
    Drawable[] drawables = view.getCompoundDrawables();
    view.setCompoundDrawables(drawables[0], drawables[1], drawable, drawables[3]);
}
</code></pre><ul>
<li>资料<br><br><a href="https://code.google.com/p/android-developer-preview/issues/detail?id=3175&amp;can=1&amp;q=status%3Afixed%20and%20opened-after%3A2015%2F4%2F1&amp;sort=-opened&amp;colspec=ID%20Type%20Status%20Owner%20Summary%20Opened" target="_blank" rel="noopener">https://code.google.com/p/android-developer-preview/issues/detail?id=3175&amp;can=1&amp;q=status%3Afixed%20and%20opened-after%3A2015%2F4%2F1&amp;sort=-opened&amp;colspec=ID%20Type%20Status%20Owner%20Summary%20Opened</a>*</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>DataBinding</tag>
      </tags>
  </entry>
  <entry>
    <title>DownloadManager not work</title>
    <url>/2015/11/25/DownloadManager-notification/</url>
    <content><![CDATA[<p>问题：有用户反映点击版本升级后无响应(采用的DownloadManager)<br>思路：“应用程序管理”-&gt;“下载管理器”-&gt;“启用”，再点击“升级”，一切OK。但是不完美，所以我们需要检查是否启用，未启用则引导设置。<br><img src="/2015/11/25/DownloadManager-notification/DownloadMangerEnable.webp" alt><br>解决办法：<br><a id="more"></a><br>直接引用封装好的<a href="https://github.com/2tu/upgrade" target="_blank" rel="noopener">UpgradeLibrary,点我</a></p>
<p>代码片断<br>判断是否启用，未启用则弹出框让用户选择开启</p>
<pre><code>public final class DownloadManagerResolver {

private static final String DOWNLOAD_MANAGER_PACKAGE_NAME = &quot;com.android.providers.downloads&quot;;

/**
 * Resolve whether the DownloadManager is enable in current devices.
 *
 * @return true if DownloadManager is enable,false otherwise.
 */
public static boolean resolve(Context context) {
    boolean enable = resolveEnable(context);
    if (!enable) {
        AlertDialog alertDialog = createDialog(context);
        alertDialog.show();
    }
    return enable;
}

/**
 * Resolve whether the DownloadManager is enable in current devices.
 *
 * @param context
 * @return true if DownloadManager is enable,false otherwise.
 */
private static boolean resolveEnable(Context context) {
    int state = context.getPackageManager()
            .getApplicationEnabledSetting(DOWNLOAD_MANAGER_PACKAGE_NAME);

    if (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN_MR2) {
        return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED ||
                state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER
                || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);
    } else {
        return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED ||
                state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);
    }
}

private static AlertDialog createDialog(final Context context) {
    TextView messageTextView = new TextView(context);
    messageTextView.setTextSize(16f);
    messageTextView.setText(R.string.downloadmanger_enable);
    return new AlertDialog.Builder(context)
            .setView(messageTextView)
            .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    enableDownloadManager(context);
                }
            })
            .setCancelable(false)
            .create();
}

/**
 * Start activity to Settings to enable DownloadManager.
 */
private static void enableDownloadManager(Context context) {
    try {
        //Open the specific App Info page:
        Intent intent = new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse(&quot;package:&quot; + DOWNLOAD_MANAGER_PACKAGE_NAME));
        context.startActivity(intent);
    } catch (ActivityNotFoundException e) {
        e.printStackTrace();

        //Open the generic Apps page:
        Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);
        context.startActivity(intent);
    }
}
}    
</code></pre><p>问题解决。<br>类文件：<a href="https://github.com/2tu/ZYLibrary/blob/master/ZYLibrary/src/com/zongyou/library/app/upgrade/DownloadManagerResolver.java" target="_blank" rel="noopener">DownloadManagerResolver.java</a></p>
<p>参考：<a href="http://www.samsung.com/hk_en/support/skp/htg/17649#none" target="_blank" rel="noopener">http://www.samsung.com/hk_en/support/skp/htg/17649#none</a><br><a href="http://stackoverflow.com/questions/21551538/how-to-enable-android-download-manager" target="_blank" rel="noopener">http://stackoverflow.com/questions/21551538/how-to-enable-android-download-manager</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>DownloadManager</tag>
      </tags>
  </entry>
  <entry>
    <title>如何找到导致fullgc的问题代码</title>
    <url>/2023/05/28/How-to-find-the-code-that-fullgc/</url>
    <content><![CDATA[<p>服务频繁fullgc无法对外提供服务。需要查看分析出是大对象？内存分配不合理还是造成了内存泄漏的问题。<br>查找步骤</p>
<ul>
<li>查看，确认gc情况</li>
<li><p>查看jvm运行参数</p>
</li>
<li><p>dump分析</p>
</li>
<li><p>找出问题代码</p>
</li>
<li><p>查看存活对象情况</p>
</li>
<li>查看该进程下占用CPU最高的线程</li>
</ul>
<h4 id="查看，确认gc情况"><a href="#查看，确认gc情况" class="headerlink" title="查看，确认gc情况"></a>查看，确认gc情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstat -gc [pid] 2000</span><br></pre></td></tr></table></figure>
<p>每2秒打印一次pid的gc情况<br><img src="/2023/05/28/How-to-find-the-code-that-fullgc/jstat_gc.jpg" alt="jstat gc"></p>
<a id="more"></a>
<h4 id="查看jvm运行参数"><a href="#查看jvm运行参数" class="headerlink" title="查看jvm运行参数"></a>查看jvm运行参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jinfo -flags [pid]</span><br></pre></td></tr></table></figure>
<h4 id="dump分析"><a href="#dump分析" class="headerlink" title="dump分析"></a>dump分析</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=[filename].hporf [pid]</span><br></pre></td></tr></table></figure>
<h4 id="使用MAT分析"><a href="#使用MAT分析" class="headerlink" title="使用MAT分析"></a>使用MAT分析</h4><h5 id="内存情况"><a href="#内存情况" class="headerlink" title="内存情况"></a>内存情况</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_overview.png" alt="Overview"></p>
<h5 id="查看对象Histogram"><a href="#查看对象Histogram" class="headerlink" title="查看对象Histogram"></a>查看对象Histogram</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_histogram.png" alt="Histogram"></p>
<h5 id="大对象Dominator-Tree"><a href="#大对象Dominator-Tree" class="headerlink" title="大对象Dominator Tree"></a>大对象Dominator Tree</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_dominator_tree.png" alt="Dominator Tree"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>fullgc</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins构建Android、IOS并上传到蒲公英</title>
    <url>/2015/12/23/JenkinsContinuousImprovement/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>作为产品级的外包，常常会出现fix一个bug要更新十几甚至几十个产品（打包上传）。作为程序猿看到这种需求时，第一想法就是“是时候找办法偷懒了”。<br>虽然Android以前采用Ant打包构建，现在与时俱进采用Gradle打包所有产品，然后再上传。<br>IOS也可以采用命令行的方式做到。<br>但是为了实现傻瓜式，可视化，同时兼容Android、IOS的方式，采用Jenkins实现很有必要。  </p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>1、下载安装Jenkins<br>2、配置Jenkins安装插件<br>3、创建Job实现构建<br>4、上传至蒲公英<br><a id="more"></a>  </p>
<h5 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h5><p>Mac<br>JDK 1.7<br>Gradle 2.8<br>IOS 8.0<br>Jenkins 1.641   </p>
<h5 id="一、下载安装Jenkins"><a href="#一、下载安装Jenkins" class="headerlink" title="一、下载安装Jenkins"></a>一、下载安装Jenkins</h5><p>在<a href="http://jenkins-ci.org/" target="_blank" rel="noopener">Jenkins</a>下载war包<br>运行java -jar jenkins.war –httpPort=8888，提示”信息: Jenkins is fully up and running”，表示启动成功<br>打开“<a href="http://localhost:8888/”" target="_blank" rel="noopener">http://localhost:8888/”</a></p>
<h5 id="二、配置Jenkins安装插件"><a href="#二、配置Jenkins安装插件" class="headerlink" title="二、配置Jenkins安装插件"></a>二、配置Jenkins安装插件</h5><h6 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h6><p>系统管理-》插件管理-》可选插件-》过滤-》输入名称安装<br>Git plugin<br>Multiple SCMs plugin（针对多分支或多Git地址的情况，Git Plugin不能实现）<br>Ftp plugin(FTP上传)<br>Publish Over SSH(SFTP上传)<br>Gradle plugin<br>Xcode plugin  </p>
<h6 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h6><p>1）Gradle相关配置，添加GRADLE____HOME环境变量或<br>系统管理-》系统设置-》Gradle安装，选择Gradle目录<br>2）SFTP相关配置<br>3）ANDROID____HOME环境变量添加，否则要报“SDK location not found”。或者为Android项目添加“local.properties”文件，我们当然选择配置环境变量</p>
<h6 id="3、创建JOB"><a href="#3、创建JOB" class="headerlink" title="3、创建JOB"></a>3、创建JOB</h6><p>创建JOB的几个问题<br>1）Multiple SCMs时注意选择subdirectory<br>2）Android 包Gradle<br>3)IOS 配置选择Target及Xcode Project File<br>选择Pack application and build .ipa的时候，证书要选择正确。我在打包时出现首先匹配的是*的证书。删除*证书后就出现匹配不到证书的情况。最后解决办法是在Build Settings里面配置Release的证书，如图<br><img src="/2015/12/23/JenkinsContinuousImprovement/Jenkins_IOS_Sign.webp" alt>  </p>
<h6 id="4、上传至蒲公英"><a href="#4、上传至蒲公英" class="headerlink" title="4、上传至蒲公英"></a>4、上传至蒲公英</h6><p> 执行下列命令上传<br>filen=`find . -name <em>release</em>.apk`;<br>curl -F “file=@$filen” -F “uKey=4602339dac5705c81578cd8580505ab5” -F “_api_key=e3d6725adc24fce33c5210271ef1efed” <a href="http://www.pgyer.com/apiv1/app/upload" target="_blank" rel="noopener">http://www.pgyer.com/apiv1/app/upload</a><br> <img src="/2015/12/23/JenkinsContinuousImprovement/ExecuteShell.webp" alt>  </p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>上传到蒲公英只作为测试使用。正式分发产品时会更新到自己的网站上，并更新数据库，旧有的包备份等一套应用。目前采用的.net + php。发现并不能通用，后续希望改为shell + php</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.itnose.net/detail/6075531.html" target="_blank" rel="noopener">http://www.itnose.net/detail/6075531.html</a><br><a href="http://blog.csdn.net/guojin08/article/details/39026795" target="_blank" rel="noopener">http://blog.csdn.net/guojin08/article/details/39026795</a><br><a href="http://www.android100.org/html/201506/22/156680.html" target="_blank" rel="noopener">http://www.android100.org/html/201506/22/156680.html</a><br><a href="https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin" target="_blank" rel="noopener">https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin</a>  </p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 2.4之后使用JitPack发布Github开源库</title>
    <url>/2015/11/16/JitPack/</url>
    <content><![CDATA[<p>之前采用过jcenter发布，各种步骤非常麻烦。在“掘金”上看到一篇文章可采用JitPack一键发布，照着抄遇到了一点坑。待此记录。<br>原作者的文章地址“<a href="http://www.dss886.com/android/2015/10/17/16-23/”" target="_blank" rel="noopener">http://www.dss886.com/android/2015/10/17/16-23/”</a></p>
<h5 id="一、配置并提交到Github"><a href="#一、配置并提交到Github" class="headerlink" title="一、配置并提交到Github"></a>一、配置并提交到Github</h5><p>Gradle<br>To enable installing into local maven repository and JitPack you need to add the android-maven plugin.</p>
<p>If using Gradle 2.4 or later:<br>Gradle 2.4之后要添加如下配置</p>
<h6 id="1-In-your-root-build-gradle"><a href="#1-In-your-root-build-gradle" class="headerlink" title="1) In your root build.gradle:"></a>1) In your root build.gradle:</h6><p>root/build.gradle添加<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;   </span><br><span class="line">  <span class="keyword">dependencies</span> &#123;  </span><br><span class="line">      <span class="keyword">classpath</span> <span class="string">'com.github.dcendents:android-maven-gradle-plugin:2.0'</span> <span class="comment">// Add this line</span></span><br></pre></td></tr></table></figure><br><a id="more"></a> </p>
<h6 id="2-Add-the-following-lines-to-your-library-build-gradle"><a href="#2-Add-the-following-lines-to-your-library-build-gradle" class="headerlink" title="2) Add the following lines to your library/build.gradle:"></a>2) Add the following lines to your library/build.gradle:</h6><p>library/build.gradle添加<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">apply</span> plugin: <span class="string">'com.github.dcendents.android-maven'</span>   </span><br><span class="line"><span class="built_in">group</span>=<span class="string">'com.github.YourUsername'</span></span><br></pre></td></tr></table></figure></p>
<h5 id="二、获取JitPack中依赖地址"><a href="#二、获取JitPack中依赖地址" class="headerlink" title="二、获取JitPack中依赖地址"></a>二、获取JitPack中依赖地址</h5><p>打开<a href="https://jitpack.io/" target="_blank" rel="noopener">https://jitpack.io/</a><br>输入Github地址<br><img src="/2015/11/16/JitPack/JitPack_lookup.webp" alt><br>点击“Look up”<br>点击“Get it”<br>查看Log</p>
<h6 id="1）在项目中引用"><a href="#1）在项目中引用" class="headerlink" title="1）在项目中引用"></a>1）在项目中引用</h6><p>root/build.gradle<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">allprojects </span>&#123;  </span><br><span class="line">    <span class="class">repositories </span>&#123;  </span><br><span class="line">        jcenter()  </span><br><span class="line">        <span class="class">maven </span>&#123; url <span class="string">"https://jitpack.io"</span> &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="2）添加依赖"><a href="#2）添加依赖" class="headerlink" title="2）添加依赖"></a>2）添加依赖</h6><pre><code>dependencies {  
    compile &apos;com.github.username:Project-name:v1.0&apos;
}
</code></pre><p> 一切OK。项目中也可以引用，不用再引用AAR。</p>
<p> 目前（2016-8-31）JitPack默认采用gradle2.7，可以采用wrapper方式使用指定Gradle版本。<br> 另外也支持module，详情见下方参考文档。</p>
<p> 参考：<a href="https://jitpack.io/docs/ANDROID/" target="_blank" rel="noopener">https://jitpack.io/docs/ANDROID/</a><br> <a href="https://jitpack.io/docs/BUILDING/#multi-module-projects" target="_blank" rel="noopener">https://jitpack.io/docs/BUILDING/#multi-module-projects</a><br> <a href="http://www.dss886.com/android/2015/10/17/16-23/" target="_blank" rel="noopener">http://www.dss886.com/android/2015/10/17/16-23/</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>JitPack</tag>
      </tags>
  </entry>
  <entry>
    <title>module自动适应app中的flavors</title>
    <url>/2015/12/11/ModuleFlavors/</url>
    <content><![CDATA[<ul>
<li><strong>需求</strong>  </li>
</ul>
<p>app进行分层设计，将业务层剥离至module中  </p>
<ul>
<li><p><strong>问题</strong>  </p>
<h6 id="module自动适应app中的flavors"><a href="#module自动适应app中的flavors" class="headerlink" title="module自动适应app中的flavors"></a>module自动适应app中的flavors</h6><h6 id="打包时自动匹配"><a href="#打包时自动匹配" class="headerlink" title="打包时自动匹配"></a>打包时自动匹配</h6></li>
<li><p><strong>解决办法</strong>  </p>
<h6 id="app与module使用相同的flavors配置"><a href="#app与module使用相同的flavors配置" class="headerlink" title="app与module使用相同的flavors配置"></a>app与module使用相同的flavors配置</h6><h6 id="module中build-gradle添加“publishNonDefault-true”"><a href="#module中build-gradle添加“publishNonDefault-true”" class="headerlink" title="module中build.gradle添加“publishNonDefault true”"></a>module中build.gradle添加“publishNonDefault true”</h6><h6 id="app中添加module-flavor-compile"><a href="#app中添加module-flavor-compile" class="headerlink" title="app中添加module flavor compile"></a>app中添加module flavor compile</h6><a id="more"></a>  
<p><code>localCompile project(path: &#39;:mylibrary&#39;, configuration: &#39;localRelease&#39;)</code><br><code>productionCompile project(path: &#39;:mylibrary&#39;, configuration: &#39;productionRelease&#39;)</code><br><code>compile project(&#39;:mylibrary&#39;)</code></p>
</li>
<li><p>示例<br>app <a href="https://github.com/2tu/BuildVariationModuleSelection/blob/master/app/build.gradle" target="_blank" rel="noopener">build.gradle</a><br>module <a href="https://github.com/2tu/BuildVariationModuleSelection/blob/master/build.gradle" target="_blank" rel="noopener">build.gradle</a><br><a href="https://github.com/2tu/BuildVariationModuleSelection" target="_blank" rel="noopener">工程</a></p>
</li>
<li><p><strong>参考</strong>  </p>
</li>
</ul>
<p><a href="http://stackoverflow.com/questions/24860659/multi-flavor-app-based-on-multi-flavor-library-in-android-gradle" target="_blank" rel="noopener">http://stackoverflow.com/questions/24860659/multi-flavor-app-based-on-multi-flavor-library-in-android-gradle</a><br><a href="http://stackoverflow.com/questions/24307596/how-can-i-add-flavors-in-a-module-with-android-studio" target="_blank" rel="noopener">http://stackoverflow.com/questions/24307596/how-can-i-add-flavors-in-a-module-with-android-studio</a><br><a href="http://stackoverflow.com/questions/27519128/android-studio-build-variation-module-selection" target="_blank" rel="noopener">http://stackoverflow.com/questions/27519128/android-studio-build-variation-module-selection</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>module</tag>
        <tag>flavor</tag>
      </tags>
  </entry>
  <entry>
    <title>NODE_ENV跨平台设置</title>
    <url>/2018/01/18/NODE-ENV-cross/</url>
    <content><![CDATA[<h5 id="set-NODE-ENV问题"><a href="#set-NODE-ENV问题" class="headerlink" title="set NODE_ENV问题"></a>set NODE_ENV问题</h5><p>最近接手系统中采用React作为管理端，其中有这样一句</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"node ./tools/gulpfile.js&amp;&amp;set NODE_ENV=__PROD__&amp;&amp;node ./tools/webpack.config.js"</span></span><br></pre></td></tr></table></figure>
<p>其中“set NODE_ENV=<strong>PROD</strong>”却未在我的Mac下生效，其他成员使用Windows。<br>原因是Windows下使用set NODE_ENV=xx，Unix下应该为export NODE_ENV=xx，于是不得不区分操作系统进行设置，于是就有了<a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener">cross-env</a>这个方案。<br><a id="more"></a></p>
<h5 id="使用cross-env解决跨平台"><a href="#使用cross-env解决跨平台" class="headerlink" title="使用cross-env解决跨平台"></a>使用cross-env解决跨平台</h5><p>修改命令为</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"node ./tools/gulpfile.js&amp;&amp;cross-env NODE_ENV=__PROD__&amp;&amp;node ./tools/webpack.config.js"</span></span><br></pre></td></tr></table></figure>
<p>执行后，结果还是TMD没生效。查看cross-env的Usage后，区别在于我使用了&amp;&amp;分隔，在后面的webpack.config.js中获取前面设置的NODE_ENV，问题是否出在这里呢？</p>
<h5 id="amp-amp-与空格问题"><a href="#amp-amp-与空格问题" class="headerlink" title="&amp;&amp;与空格问题"></a>&amp;&amp;与空格问题</h5><p><font color="red">感谢<a href="https://github.com/justjavac" target="_blank" rel="noopener">justjavac</a>提供支持</font>  </p>
<h6 id="amp-amp-为shell逻辑与运算符"><a href="#amp-amp-为shell逻辑与运算符" class="headerlink" title="&amp;&amp;为shell逻辑与运算符"></a>&amp;&amp;为shell逻辑与运算符</h6><p>格式<br>command1 &amp;&amp; command2 [&amp;&amp; command3 …]<br>command1执行成功才会执行command2，任意命令执行失败则不会再执行后面的命令<br>shell执行命令可以(;、&amp;&amp;、||）间隔</p>
<h6 id="正确使用-cross-env-vs-cross-evn-shell"><a href="#正确使用-cross-env-vs-cross-evn-shell" class="headerlink" title="正确使用 cross-env vs cross-evn-shell"></a>正确使用 <a href="https://github.com/kentcdodds/cross-env#cross-env-vs-cross-env-shell" target="_blank" rel="noopener">cross-env vs cross-evn-shell</a></h6><p>cross-env<br><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"node ./tools/gulpfile.js&amp;&amp;cross-env NODE_ENV=__PROD__ node ./tools/webpack.config.js"</span></span><br></pre></td></tr></table></figure></p>
<p>cross-env-shell<br><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"node ./tools/gulpfile.js&amp;&amp;cross-env-shell NODE_ENV=__PROD__ \"</span><span class="type">node</span> ./tools/webpack.config.js &amp;&amp; echo <span class="variable">$NODE_ENV</span>\<span class="string">""</span></span><br></pre></td></tr></table></figure><br>\”\”包裹中的内容都可以有效取到cross-env-shell设置的环境变量，这里面的原理在于Node本身的跨平台机制<a href="https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options" target="_blank" rel="noopener">spawn</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/q/1010000009324489" target="_blank" rel="noopener">cross-env 不起作用怎么办？</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>NODE_ENV</tag>
        <tag>cross-env</tag>
        <tag>spawn</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadPoolExecutor学习</title>
    <url>/2023/04/07/ThreadPoolExecutor/</url>
    <content><![CDATA[<ul>
<li>创建线程的几种方式<ul>
<li>Thread</li>
<li>Runnable</li>
<li>Callable（配合Future获取返回值）</li>
<li>线程池<ul>
<li>Executors</li>
<li>ThreadPoolExecutor</li>
</ul>
</li>
</ul>
</li>
<li>线程池ThreadPoolExcecutor的7个参数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment"> *        creates a new thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment"> *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>corePoolSize（核心线程数）</li>
<li>maximumPoolSize（最大线程数）</li>
<li>keepAliveTime、unit（最大空闲时间）</li>
<li>workQueue（阻塞队列）</li>
<li>threadFactory（线程工厂，为线程自定义名称）</li>
<li>handler（拒绝策略）</li>
</ul>
</li>
<li>线程池执行流程<a id="more"></a>
<img src="/2023/04/07/ThreadPoolExecutor/ThreadPoolExcutor_flow.png" alt="ThreadPoolExcutor Flow"></li>
<li>线程池属性标识<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The main pool control state, ctl, is an atomic integer packing</span></span><br><span class="line"><span class="comment">    * two conceptual fields</span></span><br><span class="line"><span class="comment">    *   workerCount, indicating the effective number of threads</span></span><br><span class="line"><span class="comment">    *   runState,    indicating whether running, shutting down etc</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * In order to pack them into one int, we limit workerCount to</span></span><br><span class="line"><span class="comment">    * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2</span></span><br><span class="line"><span class="comment">    * billion) otherwise representable. If this is ever an issue in</span></span><br><span class="line"><span class="comment">    * the future, the variable can be changed to be an AtomicLong,</span></span><br><span class="line"><span class="comment">    * and the shift/mask constants below adjusted. But until the need</span></span><br><span class="line"><span class="comment">    * arises, this code is a bit faster and simpler using an int.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The workerCount is the number of workers that have been</span></span><br><span class="line"><span class="comment">    * permitted to start and not permitted to stop.  The value may be</span></span><br><span class="line"><span class="comment">    * transiently different from the actual number of live threads,</span></span><br><span class="line"><span class="comment">    * for example when a ThreadFactory fails to create a thread when</span></span><br><span class="line"><span class="comment">    * asked, and when exiting threads are still performing</span></span><br><span class="line"><span class="comment">    * bookkeeping before terminating. The user-visible pool size is</span></span><br><span class="line"><span class="comment">    * reported as the current size of the workers set.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The runState provides the main lifecycle control, taking on values:</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *   RUNNING:  Accept new tasks and process queued tasks</span></span><br><span class="line"><span class="comment">    *   SHUTDOWN: Don't accept new tasks, but process queued tasks</span></span><br><span class="line"><span class="comment">    *   STOP:     Don't accept new tasks, don't process queued tasks,</span></span><br><span class="line"><span class="comment">    *             and interrupt in-progress tasks</span></span><br><span class="line"><span class="comment">    *   TIDYING:  All tasks have terminated, workerCount is zero,</span></span><br><span class="line"><span class="comment">    *             the thread transitioning to state TIDYING</span></span><br><span class="line"><span class="comment">    *             will run the terminated() hook method</span></span><br><span class="line"><span class="comment">    *   TERMINATED: terminated() has completed</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The numerical order among these values matters, to allow</span></span><br><span class="line"><span class="comment">    * ordered comparisons. The runState monotonically increases over</span></span><br><span class="line"><span class="comment">    * time, but need not hit each state. The transitions are:</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * RUNNING -&gt; SHUTDOWN</span></span><br><span class="line"><span class="comment">    *    On invocation of shutdown(), perhaps implicitly in finalize()</span></span><br><span class="line"><span class="comment">    * (RUNNING or SHUTDOWN) -&gt; STOP</span></span><br><span class="line"><span class="comment">    *    On invocation of shutdownNow()</span></span><br><span class="line"><span class="comment">    * SHUTDOWN -&gt; TIDYING</span></span><br><span class="line"><span class="comment">    *    When both queue and pool are empty</span></span><br><span class="line"><span class="comment">    * STOP -&gt; TIDYING</span></span><br><span class="line"><span class="comment">    *    When pool is empty</span></span><br><span class="line"><span class="comment">    * TIDYING -&gt; TERMINATED</span></span><br><span class="line"><span class="comment">    *    When the terminated() hook method has completed</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Threads waiting in awaitTermination() will return when the</span></span><br><span class="line"><span class="comment">    * state reaches TERMINATED.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Detecting the transition from SHUTDOWN to TIDYING is less</span></span><br><span class="line"><span class="comment">    * straightforward than you'd like because the queue may become</span></span><br><span class="line"><span class="comment">    * empty after non-empty and vice versa during SHUTDOWN state, but</span></span><br><span class="line"><span class="comment">    * we can only terminate if, after seeing that it is empty, we see</span></span><br><span class="line"><span class="comment">    * that workerCount is 0 (which sometimes entails a recheck -- see</span></span><br><span class="line"><span class="comment">    * below).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 1.高3位：声明当前线程池状态  2.低29位：声明线程池中的线程个数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">   <span class="comment">// 29，方便后面做位运算</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">   <span class="comment">// 通过位运算得出最大容量</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池状态</span></span><br><span class="line">   <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">   <span class="comment">// 111 正常接收任务</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 000 不接收新任务，仍会处理阻塞队列中的任务，正在进行中的任务也正常进行</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 001 不接收新任务，不处理阻塞队列中的任务，中断正在进行中的任务</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 010 过渡状态，当前线程池即将结束</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 011 结束</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Packing and unpacking ctl</span></span><br><span class="line">   <span class="comment">// 获取线程池状态</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">   <span class="comment">// 获取线程池的线程数量</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="线程池数量选择"><a href="#线程池数量选择" class="headerlink" title="线程池数量选择"></a>线程池数量选择</h4><ul>
<li>IO密集型（I/O bound）<br>程序处理时，CPU需要等待时间比CPU运算时间更多。<br>线程数量：（线程等待时间+CPU运算时间）* CPU核数 / CPU处理时间</li>
<li>CPU密集型（CPU-bound）<br>也叫计算密集型，大部分时间用来计算、逻辑判断等CPU动作的程序。任务不太需要访问I/O，或使用线程等方式减少了IO等待时间。<br>线程数量：CPU个数或+1 +2</li>
</ul>
<h5 id="nginx-IO密集型"><a href="#nginx-IO密集型" class="headerlink" title="nginx IO密集型"></a>nginx IO密集型</h5><p>nginx处理文件缓冲时有几种方式</p>
<ul>
<li>sendfile<br>处理小文件时使用<ul>
<li>减少数据拷贝，提高发送效率</li>
<li>socket通过dma直接访问文件数据</li>
</ul>
</li>
<li>directio<br>处理大文件时使用<ul>
<li>directio以512字节为边界对齐block进行发送</li>
<li>未对齐的block以阻塞方式读取发送</li>
</ul>
</li>
<li>aio<ul>
<li>airead</li>
<li>线程池异步读取较大文件，以提高io效率</li>
</ul>
</li>
</ul>
<h5 id="redis-CPU密集型"><a href="#redis-CPU密集型" class="headerlink" title="redis CPU密集型"></a>redis CPU密集型</h5><p>io-threads = 4<br>非阻塞IO<br>多路复用</p>
<p>IO线程作用于<br><img src="/2023/04/07/ThreadPoolExecutor/RedisIO.jpg" alt="Redis IO"><br>这就要看其中read、send中的线程等待时间多，还是decode、encode使用CPU运算时间多。由于我们使用非阻塞IO，无需等待，所以decode、encode时CPU运算时间多，最后得出结论Redis是 CPU密集型</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ThreadPoolExecutor</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity调用外部为WebView设值不成功问题解决</title>
    <url>/2017/12/15/WebView-RestoreInstance-onActivityForResult-not-work/</url>
    <content><![CDATA[<p>简单的Android保存恢复数据，有很多app没有做到。如之前提到的知名APP<a href="https://juejin.im/" target="_blank" rel="noopener">掘金v3.1.1</a>，以及朋友公司的<a href="http://www.sxyj.net/" target="_blank" rel="noopener">书香云集v5.40.1</a>，基本每去一家公司都会要为公司产品检查修改此类问题。本以为自己是这方面的老司机，没想到最近同事反馈上来又有此类问题发生，而这次的问题却是与我有关。<br>16年9月开始负责重构马上金融2.0，其中一项重要功能是hybrid资料表单以适应风控频繁变化的需求。采用jsbridge动态写入js解决js与native相互调用的安全性，此次按下不表。<font color="red"><strong>问题发生在表单中js调用android访问联系人，获取联系人数据调用js设置时不成功</strong></font>  </p>
<h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>还原代码<br>MainActivity  implements RestoreActivityResultCallback<br><a id="more"></a></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> @Override protected void on<span class="constructor">Create(Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">   super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">   webView.set<span class="constructor">WebViewClient(<span class="params">new</span> WebViewClient()</span> &#123;</span><br><span class="line"></span><br><span class="line">     @Override public void on<span class="constructor">PageFinished(WebView <span class="params">view</span>, String <span class="params">url</span>)</span> &#123;</span><br><span class="line">       super.on<span class="constructor">PageFinished(<span class="params">view</span>, <span class="params">url</span>)</span>;</span><br><span class="line">       webView.on<span class="constructor">PageFinished(<span class="params">view</span>, <span class="params">url</span>)</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   webView.add<span class="constructor">JavascriptInterface(<span class="params">new</span> JSInteraction()</span>, <span class="string">"contact"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (savedInstanceState != null) &#123;</span><br><span class="line">     webView.restore<span class="constructor">State(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     webView.load<span class="constructor">Url(<span class="params">url</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> @Override protected void on<span class="constructor">SaveInstanceState(Bundle <span class="params">outState</span>)</span> &#123;</span><br><span class="line">   super.on<span class="constructor">SaveInstanceState(<span class="params">outState</span>)</span>;</span><br><span class="line">   webView.save<span class="constructor">State(<span class="params">outState</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Override protected void on<span class="constructor">ActivityResult(<span class="params">int</span> <span class="params">requestCode</span>, <span class="params">int</span> <span class="params">resultCode</span>, Intent <span class="params">data</span>)</span> &#123;</span><br><span class="line">   super.on<span class="constructor">ActivityResult(<span class="params">requestCode</span>, <span class="params">resultCode</span>, <span class="params">data</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (requestCode<span class="operator"> == </span>REQUEST_CODE_PICK_CONTACT) &#123;</span><br><span class="line">     webView.on<span class="constructor">ActivityResult(<span class="params">requestCode</span>, <span class="params">resultCode</span>, <span class="params">data</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span> (Activity.RESULT_OK<span class="operator"> == </span>resultCode<span class="operator"> &amp;&amp; </span>data != null) &#123;</span><br><span class="line">       set<span class="constructor">Contact(<span class="params">data</span>)</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Override public void restore<span class="constructor">ActivityResult(<span class="params">int</span> <span class="params">requestCode</span>, <span class="params">int</span> <span class="params">resultCode</span>, Intent <span class="params">data</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (requestCode<span class="operator"> == </span>REQUEST_CODE_PICK_CONTACT<span class="operator"> &amp;&amp; </span>RESULT_OK<span class="operator"> == </span>resultCode) &#123;</span><br><span class="line">     set<span class="constructor">Contact(<span class="params">data</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> void set<span class="constructor">Contact(Intent <span class="params">data</span>)</span> &#123;</span><br><span class="line">   String contact = read<span class="constructor">ContactFormResult(<span class="params">data</span>)</span>;</span><br><span class="line">   webView.load<span class="constructor">Url(<span class="string">"javascript:setContact(\""</span> + <span class="params">contact</span> + <span class="string">"\")"</span>)</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Activity WebView restore流程<br><img src="/2017/12/15/WebView-RestoreInstance-onActivityForResult-not-work/activity_webview_restore.jpeg" alt="Activity WebView restore"><br>由于onActivityResult执行webView.loadUrl之前WebView并未restore完成，所以js执行不会生效  </p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>1、自定义WebView缓存onActivityResult结果<br>2、WebViewClient.onPageFinished时回调WebView，由WebView将缓存的Activity Result回调至Activity中，并清空缓存Result数据<br>3、Activity判断是否需要对WebView操作<br>具体流程如下：<br><img src="/2017/12/15/WebView-RestoreInstance-onActivityForResult-not-work/activity_webview_restore_fixed.jpeg" alt="webview-restore">   </p>
<p><strong>源码，请参见<a href="https://github.com/2tu/webview-restore" target="_blank" rel="noopener">webview-restore</a></strong></p>
<h5 id="相关导读"><a href="#相关导读" class="headerlink" title="相关导读"></a>相关导读</h5><p><a href="/2016/05/14/android-data-store/">android数据共享，Application\Singleton存储数据出错的问题</a><br><a href="/2017/12/18/WebView-can-not-support-WebGL/">WebView兼容问题之can not support WebGL</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RestoreInstance</tag>
        <tag>WebView</tag>
        <tag>Activity</tag>
        <tag>onActivityForResult</tag>
        <tag>onPageFinished</tag>
      </tags>
  </entry>
  <entry>
    <title>WebView兼容问题之can not support WebGL</title>
    <url>/2017/12/18/WebView-can-not-support-WebGL/</url>
    <content><![CDATA[<p><a href="https://youjie.kongapi.com/?channel=xiangduoduoylpyj&amp;utm_source=daikuan&amp;utm_medium=xiangduoduoylpyj#/loan-in-index" target="_blank" rel="noopener">合作方页面</a>能在浏览器中打开，不能在我们的WebView中打开，运营打上门来。<br>作为一个有态度的码农当然是要怒回去的。于是调试看了对方h5报错如下：<br><a id="more"></a></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">VM122:</span><span class="number">158</span> NativeBridge Ready  </span><br><span class="line">app.e<span class="symbol">35363b</span>….<span class="keyword">js:1 </span>Uncaught TypeError: Cannot read property <span class="string">'getExtension'</span> of null</span><br><span class="line">    <span class="built_in">at</span> g (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> r (manifest.d23aea9….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> r (manifest.d23aea9….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> r (manifest.d23aea9….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> Object.&lt;anonymous&gt; (app.e<span class="symbol">35363b</span>….<span class="keyword">js:1)</span></span><br><span class="line"><span class="keyword">g </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">r </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">window.webpackJsonp </span>@ manifest.d23aea9….<span class="keyword">js:1</span></span><br><span class="line"><span class="keyword">(anonymous) </span>@ app.e<span class="symbol">35363b</span>….<span class="keyword">js:1</span></span><br></pre></td></tr></table></figure>
<p>我们观摩对方代码</p>
<pre><code>e=t.getContext(&quot;experimental-webgl&quot;),
n=e.getExtension(&quot;WEBGL_debug_renderer_info&quot;);
return n?e.getParameter(n.UNMASKED_RENDERER_WEBGL):
&quot;Apple unknown GPU&quot;
</code></pre><p>H5中采用了WebGL，android WebView v36才开始支持WebGL，所以出现了这样的兼容性问题。<br>运营再怒，在你们的App中出现这个问题，但是就在该手机的浏览器、微信中都是可以打开的。<br>有态度的码农知道这次有口莫辩了。如果对方用的Chrome，那问题一定是同步的，但是其它浏览器自研内核，有的是支持的。<br>于是这时候我们应该怎样微笑着玩下去，代码截图，解决方案截图与合作方的工程师相爱相杀去了。  </p>
<h5 id="相关导读"><a href="#相关导读" class="headerlink" title="相关导读"></a>相关导读</h5><p><a href="/2017/12/15/WebView-RestoreInstance-onActivityForResult-not-work/">Activity调用外部为WebView设值不成功问题解决</a><br><a href="/2017/12/07/fix-301-redirect/">301 造成WebView 不能正常访问</a><br><a href="/2016/05/14/android-data-store/">WebView restore</a></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://developer.chrome.com/multidevice/webview/overview" target="_blank" rel="noopener">WebView for Android</a><br><a href="https://stackoverflow.com/questions/15395245/enabling-webgl-support-for-android-webview" target="_blank" rel="noopener">enabling-webgl-support-for-android-webview</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>WebView</tag>
        <tag>WebGL</tag>
        <tag>兼容问题</tag>
        <tag>experimental-webgl</tag>
        <tag>WEBGL_debug_renderer_info</tag>
        <tag>v36</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile如何使用</title>
    <url>/2024/02/06/What-is-Makefile/</url>
    <content><![CDATA[<p>工程化编译项目时，Java用Maven\Gradle，前端用npm，C/C++用Make<br>使用Make命令编译C/C++时，是通过Make工具实现。推荐使用<a href="https://www.mingw-w64.org/downloads/#w64devkit" target="_blank" rel="noopener">w64devkit</a><br>w64devkit支持Linux命令</p>
<ul>
<li>根据更改的源文件，自动确定需要更新哪些文件。它还自动确定更新文件的正确顺序，以防一个非源文件依赖于另一个非来源文件。<br>因此，如果您更改一些源文件，然后运行Make，则不需要重新编译所有程序。它只更新那些直接或间接依赖于您更改的源文件的非源文件。<br>如何确定依赖的呢，来源与我们在Makefile中指定的dependencies</li>
<li>Make不限于任何特定的语言。所有能在命令行运行的编程语言都能处理（Java\Golang\Python…）。另外基于文件的改变然后更新另外的文件也可以。</li>
</ul>
<p>Makefile中的一条规则告诉Make如何执行一系列命令，以便从源文件构建目标文件。它还指定了目标文件的依赖项列表。此列表应包括用作规则中命令输入的所有文件（无论是源文件还是其他目标文件）。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">target:   dependencies ...</span><br><span class="line">          commands</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hello</span>: <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br><span class="line">	<span class="selector-tag">g</span>++ <span class="selector-tag">-o</span> <span class="selector-tag">hello</span> <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br><span class="line"><span class="selector-tag">hello</span><span class="selector-class">.o</span>: <span class="selector-tag">hello</span><span class="selector-class">.cpp</span></span><br><span class="line">	<span class="selector-tag">g</span>++ <span class="selector-tag">-c</span> <span class="selector-tag">hello</span><span class="selector-class">.cpp</span></span><br></pre></td></tr></table></figure>
<h4 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h4><p>运行Make时，可以指定要更新的特定目标；否则，Make会更新makefile中列出的第一个目标。当然，必须首先更新生成这些目标所需的任何其他目标文件作为输入。<br>Make使用makefile来确定哪些目标文件应该更新，然后确定哪些文件实际上需要更新。如果目标文件比其所有依赖项都新，那么它已经是最新的，不需要重新生成。其他目标文件确实需要更新，但顺序正确：每个目标文件都必须重新生成，然后才能用于重新生成其他目标。</p>
<h4 id="Makefile文件命名"><a href="#Makefile文件命名" class="headerlink" title="Makefile文件命名"></a>Makefile文件命名</h4><p>Make自动查找makefile文件，顺序为GNUmakefile&gt;makefile&gt;Makefile<br>GUNmakefile:不建议使用，只能支持GUN make<br>makefile:所有版本都能识别<br>Makefile:推荐，最常用</p>
<p>运行make时没有找到上述文件会报错，但可以手动指定文件名<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> -<span class="keyword">f</span> <span class="symbol">&lt;filename&gt;</span></span><br><span class="line"><span class="keyword">make</span> --<span class="keyword">file</span>=<span class="symbol">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>XML元素名称规范</title>
    <url>/2023/05/11/What-is-XML-Naming-Rules/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用dom4j生成XML，期望结果<br>生成XML数据<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gNB间NG切换成功率(%)</span>&gt;</span>100<span class="tag">&lt;/<span class="name">gNB间NG切换成功率(%)</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但是抛错<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Illegal character in name: <span class="string">'gNB间NG切换成功率(%)'</span>.</span><br><span class="line"></span><br><span class="line">	at org.dom4j.QName.validateName(QName.java:<span class="number">340</span>)</span><br><span class="line">	at org.dom4j.QName.&lt;init&gt;(QName.java:<span class="number">151</span>)</span><br><span class="line">	at org.dom4j.tree.QNameCache.createQName(QNameCache.java:<span class="number">245</span>)</span><br><span class="line">	at org.dom4j.tree.QNameCache.get(QNameCache.java:<span class="number">115</span>)</span><br><span class="line">	at org.dom4j.DocumentFactory.createQName(DocumentFactory.java:<span class="number">191</span>)</span><br><span class="line">	at org.dom4j.tree.AbstractElement.addElement(AbstractElement.java:<span class="number">760</span>)</span><br><span class="line">	at Dom4jTest.test_AddTagBySpecial(Dom4jTest.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="抛错的源码"><a href="#抛错的源码" class="headerlink" title="抛错的源码"></a>抛错的源码</h4><p>查看方法at org.dom4j.QName.validateName(QName.java:340)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern RE_NAME = Pattern.compile(<span class="string">"[:_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-\ufdcfﷰ-�][:_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-\ufdcfﷰ-�-.0-9·̀-ͯ‿-⁀]*"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!RE_NAME.matcher(name).matches()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Illegal character in name: '%s'."</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>dom4j为什么抛出这个错，是XML的规则就是这样还是dom4j版本不正确还是什么原因？</p>
<h4 id="XML-Naming-Rules"><a href="#XML-Naming-Rules" class="headerlink" title="XML Naming Rules"></a>XML Naming Rules</h4><p>参见<a href="https://www.w3schools.com/xml/xml_elements.asp" target="_blank" rel="noopener">XML Elements</a><br><img src="/2023/05/11/What-is-XML-Naming-Rules/XMLNamingRules.png" alt="XML Naming Rules"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>dom4j</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>牛仔裤中的牛仔是什么</title>
    <url>/2023/05/12/What-is-jeans/</url>
    <content><![CDATA[<h5 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h5><p>牛仔裤中的牛仔是什么</p>
<h5 id="A"><a href="#A" class="headerlink" title="A"></a>A</h5><p>“牛仔裤”一词源自英文单词“jeans”，最早可以追溯到1567年意大利热那亚港水手穿的一种粗帆布制作的裤子，当时水手们喜欢穿着这种粗糙而结实的布料做成的工作裤子，称之为Genoese, Genes，与Jeans有着相似的发音。1850年淘金热的浪潮下，移民到美国的巴伐利亚人李维·斯特劳斯创立了李维斯公司，该公司生产的帆布工装裤就是世人所知的牛仔裤的鼻祖。这种布料结实耐磨，十分适合应付繁重的日常劳作，受到当时矿工们的喜欢。<br>因此，牛仔裤中的“牛仔”并不是指牛，而是指<strong>穿着这种裤子的工人和冒险家</strong>。<br><img src="/2023/05/12/What-is-jeans/jeans.jpg" alt="jeans"></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Kids</tag>
      </tags>
  </entry>
  <entry>
    <title>android数据共享，Application\Singleton存储数据出错的问题</title>
    <url>/2016/05/14/android-data-store/</url>
    <content><![CDATA[<p>两天终于完成了某模块的数据共享问题的改造。此次问题就是传说中万恶的Application及Sigleton存数据的问题。<br>曾经有大拿老张疑惑说Android怎么可能没有一个安全的临时存储数据的地方。接下来我们看一下在本次应用中实际发生的问题。并查看解决<a href="http://gold.xitu.io/app" target="_blank" rel="noopener">知名app掘金v3.1.1</a>出现的这个问题<br>采用官方提供api机制来解决问题。</p>
<h5 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h5><p>应用切换到后台返回程序Crash或数据丢失。甚至在小内存手机中调用系统相机再回来应用就已经重启了</p>
<h5 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h5><p>采用Intent及setArgments的方式来传值，采用onSaveInstanceState保存数据以供恢复。</p>
<h6 id="Activity中Fragment恢复"><a href="#Activity中Fragment恢复" class="headerlink" title="Activity中Fragment恢复"></a>Activity中Fragment恢复</h6><a id="more"></a>
<p>除了界面中传值及数据恢复外还涉及到界面的恢复。各View都由系统保存并恢复，但是在涉及到Fragment时，不会为我们直接将Fragment恢复到我们的Activity中，需要我们使用getFragmentManager().findFragmentByxxx获取后再add或replace上去。  </p>
<p>采用以上的方法基本可以解决问题，能使用户走正常流程。但是会发现数据有些卡顿，甚至会偶现不能正常恢复的情况。追求极致的程序猿又要开始折腾了。</p>
<h5 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h5><h6 id="1、减小数据"><a href="#1、减小数据" class="headerlink" title="1、减小数据"></a>1、减小数据</h6><p>保持数据短小轻快，这样可以更快启动下一界面及恢复</p>
<h6 id="2、本地缓存"><a href="#2、本地缓存" class="headerlink" title="2、本地缓存"></a>2、本地缓存</h6><p>如果数据量确实大不能保持精练，则采用Singleton加本地缓存（若对象不存在则从本地读取）。这样可以保证快速启动界面，然后再加载数据。<br>本地缓存视数据大小及结构选择存储方式。可以简单粗暴的采用<a href="https://github.com/2tu/fit" target="_blank" rel="noopener">Preference</a>、ObjectFile，或者数据库、LruCache等.</p>
<h5 id="四、诱因及说明【没有耐心直接略过，真心废话】"><a href="#四、诱因及说明【没有耐心直接略过，真心废话】" class="headerlink" title="四、诱因及说明【没有耐心直接略过，真心废话】"></a>四、诱因及说明【没有耐心直接略过，真心废话】</h5><p>Home回到桌面或者调用其它应用，我们的应用转入后台后降低优先级被回收（整个Application会被会关掉，所有变量数据都会被清空）。但是，切回应用Android的恢复机制却是重新启动Application，不进入LaunchActivity，而是直接恢复到最近的界面。<br>这个时候问题来了，若正常重新启动应用程序，走正常流程，数据重新生成没有问题。但是直接进入最近界面之前生成的数据已经丢失了，此时直接引用数据将会引起Crash。<br>这时看官们就说了，直接加个判断是否为Null不就可以了。但数据为Null，用户不能走正常流程，这一定不是我们想要的。那么有没有一种机制解决这个问题呢，答应是有的。Android提供了onSaveInstanceState来保存数据，恢复时可以从savedInstanceState中获取数据。<br> OK，讲到这里方案已经呼之欲出了，答案是请看本文前面的内容。   </p>
<h5 id="五、实战分析——掘金v3-1-1"><a href="#五、实战分析——掘金v3-1-1" class="headerlink" title="五、实战分析——掘金v3.1.1"></a>五、实战分析——<a href="http://gold.xitu.io/app" target="_blank" rel="noopener">掘金v3.1.1</a></h5><p><img src="/css/images/20160514_onSaveInstanceState_xitu_error.webp" alt="文章详情"><br>进入掘金文章详情页切换到后台再恢复时会出现“文章加载失败”的提示也是这个问题导致。<br>WebViewEntryActivity(文章详情)<br>我们分析一下代码，文章详情中的url由Entry对象v中从获取（LeanCloud）  </p>
<p>首先来看加载失败的代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> void q() &#123;</span><br><span class="line">  <span class="keyword">if</span> (v == <span class="literal">null</span>) aj.a(<span class="keyword">this</span>, <span class="string">"文章信息加载失败"</span>);</span><br><span class="line">  <span class="keyword">this</span>.editorName.setText(getIntent().getStringExtra(<span class="string">"name"</span>));</span><br><span class="line">  g.a(<span class="keyword">this</span>).a(getIntent().getStringExtra(<span class="string">"avatar"</span>)).a(<span class="keyword">this</span>.avatar);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">this</span>.commentCount.setText(Entry.getString(v.getCommentCount()));</span><br><span class="line">  b.a(v, new ff(<span class="keyword">this</span>));</span><br><span class="line">  <span class="keyword">if</span> ((!(k.b(v.getUrl()))) || (v.getTags() == <span class="literal">null</span>) || (v.getTags().size() &lt;= <span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">  com.daimajia.gold.c.z.a(v.getTags(), new fg(<span class="keyword">this</span>));</span><br><span class="line">  u();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>v的获取方式有两个地方，一个是在方法a中传入，另外一个为EventBus调用onEventMainThread时传入。<br>我们切回掘金文章详情页时，WebViewEntryActivity生命周期会重新执行一次，经过查找引用的地方，我们确定方法a不会被执行。EventBus处为ShareEntryActivity调用，显然这个方法也没法执行。v就未能被初始化，为null，就必然提示“文章信息加载失败”</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(Entry paramEntry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v = paramEntry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span>(<span class="params">f paramf</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((v != <span class="literal">null</span>) &amp;&amp; (v.getUrl().<span class="keyword">equals</span>(paramf.a.getUrl())))</span><br><span class="line">    v = paramf.a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体解决办法见上文。但是对于View的状态其实Android自动作了处理，这里因为是Webview才出现这个问题，那要么解决呢？</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override protected void on<span class="constructor">SaveInstanceState(Bundle <span class="params">paramBundle</span>)</span> &#123;</span><br><span class="line">  super.on<span class="constructor">SaveInstanceState(<span class="params">paramBundle</span>)</span>;</span><br><span class="line">  mWebView.save<span class="constructor">State(<span class="params">paramBundle</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public void on<span class="constructor">Create(Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">  super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">  <span class="keyword">if</span> (savedInstanceState != null) &#123;</span><br><span class="line">    mWebView.restore<span class="constructor">State(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mWebView.load<span class="constructor">Url(<span class="string">"http://2tu.github.io/2016/05/14/android-data-store/"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="五、PS"><a href="#五、PS" class="headerlink" title="五、PS"></a>五、PS</h5><h6 id="通过-开发者选项-gt-不保留活动-制造该现象"><a href="#通过-开发者选项-gt-不保留活动-制造该现象" class="headerlink" title="通过 开发者选项-&gt;不保留活动 制造该现象"></a>通过 开发者选项-&gt;不保留活动 制造该现象</h6><h6 id="采用官方推荐方式开发"><a href="#采用官方推荐方式开发" class="headerlink" title="采用官方推荐方式开发"></a>采用官方推荐方式开发</h6><h5 id="相关导读"><a href="#相关导读" class="headerlink" title="相关导读"></a>相关导读</h5><p><a href="/2017/12/15/WebView-RestoreInstance-onActivityForResult-not-work/">Activity调用外部为WebView设值不成功问题解决</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>annotationProcessor 引用后编译时不生效问题</title>
    <url>/2020/04/04/annotation-proccor-by-gradle4-7/</url>
    <content><![CDATA[<h4 id="Gradle升级后Processor无法在编译时生效"><a href="#Gradle升级后Processor无法在编译时生效" class="headerlink" title="Gradle升级后Processor无法在编译时生效"></a>Gradle升级后Processor无法在编译时生效</h4><p>升级<a href="https://github.com/2tu/fit" target="_blank" rel="noopener">fit</a>后忽然发现在annotaionProcessor后编译并没有生成。原因在哪里呢？将fit库的gradle版本从4.6升级到了5.6.4，原来从gradle4.7开始不再帮助生成，需要我们自己在库中解决。    </p>
<h4 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h4><a id="more"></a>
<h5 id="1、processor中添加anntationProcessor"><a href="#1、processor中添加anntationProcessor" class="headerlink" title="1、processor中添加anntationProcessor"></a>1、processor中添加anntationProcessor</h5><p>在comiple库的build.gradle中加入后，其它不需要动即可（我的库使用的AutoServerice）</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">annotationProcessor deps.<span class="built_in">auto</span>service</span><br></pre></td></tr></table></figure>
<h5 id="2、自己写一个gradle-build-plugin"><a href="#2、自己写一个gradle-build-plugin" class="headerlink" title="2、自己写一个gradle build plugin"></a>2、自己写一个gradle build plugin</h5><p>需要用户使用时引入gradle plugin方能生效  </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'custom.plugin'</span></span><br></pre></td></tr></table></figure>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://docs.gradle.org/nightly/userguide/java_plugin.html#sec:incremental_annotation_processing" target="_blank" rel="noopener">Incremental annotation processing</a><br> <a href="https://www.cnblogs.com/mengshu-lbq/p/11713397.html" target="_blank" rel="noopener">annotation processor 为啥没有被调用?</a><br> <a href="https://stackoverflow.com/questions/44530648/annotation-processor-autoservice" target="_blank" rel="noopener">Annotation processor @autoservice</a><br><a href="https://github.com/JakeWharton/butterknife#butter-knife" target="_blank" rel="noopener">Butter Knife</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用antd-init创建第一个可以运行的ant design</title>
    <url>/2019/09/12/antd-init/</url>
    <content><![CDATA[<p>1、安装npm  </p>
<p>2、安装antd<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> antd-init -g</span><br></pre></td></tr></table></figure></p>
<p>3、创建ant-demo<br><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> antd-<span class="built_in">demo</span></span><br></pre></td></tr></table></figure></p>
<p>4、进入antd-demo目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> antd-demo</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>5、安装npm依赖<br><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">antd-init --<span class="class"><span class="keyword">type</span> <span class="title">plain</span>-<span class="title">react</span></span></span><br></pre></td></tr></table></figure><br>产生以下文件<br>    node_modules<br>    index.css<br>    index.js<br>    package.json<br>    webpack.config.js</p>
<p>6、运行 (npm run build构建部署)<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure></p>
<p>7、根据listen端口进行访问<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">           dora: listened <span class="keyword">on</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">webpack: bundle build <span class="keyword">is</span> now finished.</span><br></pre></td></tr></table></figure></p>
<p><img src="/css/images/antd_demo_20190912150102.jpg" alt="Demo"></p>
<h2 id="8、最后"><a href="#8、最后" class="headerlink" title="8、最后  "></a>8、最后  </h2><p>antd-init@2 仅适用于学习和体验 antd，如果你要开发项目，推荐使用 create-umi 进行项目初始化。umi 是一个可插拔的企业级 React 前端应用框架，已在生产环境广泛应用。<br>antd-init@2 is only for experience antd. If you want to create projects, it’s better to init with create-umi. umi is a pluggable enterprise-level react application framework.</p>
<p>Usage:</p>
<p>mkdir myapp &amp;&amp; cd myapp<br>yarn create umi</p>
<p>Visit <a href="https://github.com/umijs/create-umi/" target="_blank" rel="noopener">https://github.com/umijs/create-umi/</a> to learn more.</p>
<p>—  END  —<br>分享程序员所看、所想、所悟、所望</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸支付怎么敢采用后4位手机号</title>
    <url>/2019/04/23/assert-facepay-dragonfly-by-4/</url>
    <content><![CDATA[<p>我们的人脸支付产品只需要后4位手机号（用户号码）即可辨识用户，这是比支付宝、微信自助机，蜻蜓优秀的地方（需要11位手机号）。但是今天猛然发现唯一的优势不再。</p>
<p>优势是一种市场说法，对于技术人来讲，原理是少量用户比对。因为注册用户少，用户号码能做到1:1，个别需要1:N(N&lt;=4)。所以目前用户体量下无需担心影响用户体验。而支付宝、微信用户体量那么大，采用11位手机号才能1:1。</p>
<p>支付宝、微信到底如何做到只需后4位用户号码，甚至不需要输入手机号的呢？</p>
<p>支付宝用户超10亿   </p>
<p>去除海外用户  </p>
<p>去除尚未开通刷脸支付用户[后期越来越多]    </p>
<p>剩下的数据依然庞大，还能怎么办呢？</p>
<a id="more"></a>
<p>从人脸对比原理上提高几毫秒在这样的用户体量下九牛一毛都不算。所以是否应该从业务场景下寻找解决方案。</p>
<p>以下观点属于猜想</p>
<p>人脸都是跟着人走的，人的使用习惯，活动轨迹都是有规律的。</p>
<p>我们是否还可以从用户使用城市、地区、甚至是否常在哪个店消费来建立优先比对，或者本地比对等。或许还可以根据性别等先过滤一批。</p>
<p>总之从技术上来讲1:N很可怕，但是从业务上拆分后数据量也没有想象中难以承受。</p>
<p>附录符合猜想的蜻蜓支付视频</p>
<p>异地第一次在某店消费</p>
<video id="video" controls preload="none" poster="http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.jpg"><br><source id="mp4" src="/css/images/dragonly_newc.mp4" type="video/mp4"><br></video>


<p>本地第三次某店蜻蜓支付</p>
<video id="video" controls preload="none" poster="http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.jpg"><br><source id="mp4" src="/css/images/dragonly_frequent_visitor.mp4" type="video/mp4"><br></video>


<p>旧文<br><a href="/2018/12/06/face-rec-algorithm/">刷脸支付-人脸比对效率</a></p>
<p>—  END  —<br>分享程序员所看、所想、所悟、所望</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>人脸支付</tag>
      </tags>
  </entry>
  <entry>
    <title>brew install mac安装失败的问题</title>
    <url>/2015/10/16/brewInstall/</url>
    <content><![CDATA[<ul>
<li>问题：brew 安装失败</li>
<li>思路：将github仓库放到本地，不用ruby下载</li>
<li>解决办法：</li>
</ul>
<p>1、下载<a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install</a>文件(使用浏览器打开，另存为也可以)，命名为install  </p>
<p>2、在github上把Homebrew(<a href="https://github.com/Homebrew/homebrew" target="_blank" rel="noopener">https://github.com/Homebrew/homebrew</a>)<br>的库下载下来(下载zip包即可)<br>把下载的zip包放在文件夹”brew”(自己建立)内，<br>同时在 “brew” 文件夹内新建文件夹”brewRemote.git”<br>把步骤1下载下来的install文件也放进”brew”文件夹中<br><a id="more"></a><br>3.下面开始使用 shell，前提，shell先进入到”brew”文件夹内</p>
<pre><code>cd brewRemote.git
git init --bare  
cd ../homebrew-master
git init
git add .
git commit -m &quot;create project&quot;
git remote add origin  brewRemote.git(的绝对路径)
git push -u origin master
</code></pre><p>现在，我们本地就有了Homebrew的git库:brewRomote.git<br>接下来，修改install文件：<br>应该在第7行左右，把</p>
<pre><code>HOMEBREW_REPO = &apos;https://github.com/Homebrew/homebrew&apos;
</code></pre><p>改为：<br>    <code>HOMEBREW_REPO = &#39;/Users/tu/Documents/brew/brewRomote.git&#39;</code>  </p>
<p>这里就是把Homebrew的github库，替换为本地库。<br>注意：上面的brewRomote.git(/Users/tu/Documents/brew/brewRomote.git)的绝对路径为我的，你要替换为你自己本地的绝对路径<br>，最后继续执行ruby命令(注意：shell当前路径依然为brew)</p>
<pre><code>rm -rf /usr/local/Cellar /usr/local/.git &amp;&amp; brew   
cleanup
ruby install  
</code></pre><p>第一行的rm命令，是为了防止之前你安装Homebrew失败而残留的文件，导致这次安装失败<br>ruby install执行之后，安装命令行提示安装，应该会安装成功。<br>安装成功后，执行以下命令：  </p>
<pre><code>`brew doctor`    
</code></pre><p>这个命令是Homebrew的自我检测命令，看看有没有配置不对的地方。<br>但是我们使用的本地的git库brewRomote.git,所以会检测出这个有问题，我们接下来修改这个问题。<br>找到这个文件 /usr/local/.git/config,<br>由于.git文件是隐藏文件夹，你可以使用命令行来查找  </p>
<pre><code>open /usr/local/.git   
</code></pre><p>这样你就能找到config文件了<br>使用编辑器来修改config文件  </p>
<pre><code>url = /Users/baidu/TestTmp/yanshi/brewRomote.git改为       
url = https://github.com/Homebrew/homebrew
</code></pre><p>保存config文件，大功告成！，再使用brew doctor检查一下，应该就没问题了。</p>
<p>原文：<a href="http://doc.okbase.net/shede333/archive/122619.html" target="_blank" rel="noopener">http://doc.okbase.net/shede333/archive/122619.html</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器打开图片链接时直接显示或下载到底怎么回事</title>
    <url>/2020/07/17/browser-view-or-download-image-by-header/</url>
    <content><![CDATA[<p>最近瞎JB搞了一通，各个项目都是喊组装上就交付，难以有时间学习总结，简直违反程序员的基本原则。很多时候已经忘记踩了哪些坑，如何解决的了。 </p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>图片上传至阿里云OSS生成链接在浏览器中打开是直接下载文件，而需求需要打开图片而非下载。</p>
<h4 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h4><p>浏览器中的图片，通常印象中，前端上传文件获取url，终端当然是下载再展示。浏览器端都是img标签展示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"/css/images/favicon.png"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>下载图片及附件时都是右键保存或者点击按钮下载写入文件流中。<br>最近的需求中提到上传的图片生成的url，在浏览器中是打开而非下载文件 。我们正常上传到我们服务器上的是没问题的。这个问题出在阿里云OSS上？到底要怎么玩？</p>
<h4 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h4><p>就经验来讲肯定是响应头header的问题。Android有类似的机制，view-type啥的，你是直接在别的应用中打开，还是怎么操作。<br>对比下载和打开图片两种不同链接  </p>
<a id="more"></a>
<h5 id="打开图片"><a href="#打开图片" class="headerlink" title="打开图片"></a>打开图片</h5><p>链接：<a href="http://blog.520wa.com/css/images/watermark_bg.jpeg" target="_blank" rel="noopener">http://blog.520wa.com/css/images/watermark_bg.jpeg</a><br>Response Headers</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.10</span><span class="number">.2</span></span><br><span class="line">Date: Fri, <span class="number">17</span> Jul <span class="number">2020</span> <span class="number">15</span>:<span class="number">43</span>:<span class="number">50</span> GMT</span><br><span class="line">Last-Modified: Sun, <span class="number">19</span> Apr <span class="number">2020</span> <span class="number">08</span>:<span class="number">52</span>:<span class="number">37</span> GMT</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: <span class="number">101372</span></span><br><span class="line">ETag: <span class="string">"5e9c1155-18bfc"</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>
<h5 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h5><p>链接（网上找的，失效了就自己找一个）：<a href="http://pic.96weixin.com/ueditor/20200511/1589185236200665.jpg?x-oss-process=image/resize,m_lfit,w_120" target="_blank" rel="noopener">http://pic.96weixin.com/ueditor/20200511/1589185236200665.jpg?x-oss-process=image/resize,m_lfit,w_120</a>  </p>
<p>Response Headers</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">Server:</span> <span class="string">TencentCOS</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">17</span> <span class="string">Jul</span> <span class="number">2020</span> <span class="number">15</span><span class="string">:42:07</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Last-Modified:</span> <span class="string">Mon,</span> <span class="number">11</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">16</span><span class="string">:20:36</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">image/jpeg</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">33302</span></span><br><span class="line"><span class="attr">Content-Disposition:</span> <span class="string">attachment;</span> <span class="string">filename*="UTF-8''1589185236200665.jpg"</span></span><br></pre></td></tr></table></figure>
<p>这个响应头太多，我只截取关键部份。  </p>
<h5 id="对比不同"><a href="#对比不同" class="headerlink" title="对比不同"></a>对比不同</h5><p>关键点在于下载图片多了</p>
<figure class="highlight csp"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Disposition</span>: attachment; filename*="UTF-8<span class="string">''</span>1589185236200665.jpg"</span><br></pre></td></tr></table></figure>
<p>而1589185236200665.jpg就是我们下载图片保存到本地的文件名。</p>
<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>在常规的HTTP应答中，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition" target="_blank" rel="noopener">Content-Disposition</a> 响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。<br>看了这么多，就是因为Content-Disposition指定了下载，所以就下载了，没有Content-Disposition响应头就是显示。</p>
<h4 id="阿里云OSS上传图片直接显示解决方案"><a href="#阿里云OSS上传图片直接显示解决方案" class="headerlink" title="阿里云OSS上传图片直接显示解决方案"></a>阿里云OSS上传图片直接显示解决方案</h4><p>那么在阿里OSS上传又是怎么解决了，毕竟我们只上传了图片，也没有指定响应头。详细OSS的机制我已不想追究，没有意义，搞懂原理，只想睡个好觉，加班太JB累。<br>网友给出的解决办法  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ObjectMetadata metadata = <span class="keyword">new</span> <span class="constructor">ObjectMetadata()</span>;</span><br><span class="line"><span class="comment">// 指定Content-Type</span></span><br><span class="line">metadata.set<span class="constructor">ContentType(<span class="params">getContentType</span>(<span class="params">path</span>.<span class="params">substring</span>(<span class="params">path</span>.<span class="params">lastIndexOf</span>(<span class="string">"."</span>)</span>)));</span><br><span class="line">put.set<span class="constructor">Metadata(<span class="params">metadata</span>)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static String get<span class="constructor">ContentType(String FilenameExtension)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">FilenameExtension</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="string">".bmp"</span>)</span>) &#123;</span><br><span class="line">        return <span class="string">"image/bmp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">FilenameExtension</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="string">".gif"</span>)</span>) &#123;</span><br><span class="line">        return <span class="string">"image/gif"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">FilenameExtension</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="string">".jpeg"</span>)</span> <span class="pattern-match"><span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">        <span class="constructor">FilenameExtension</span>.equals<span class="constructor">IgnoreCase(<span class="string">".jpg"</span>)</span> <span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">        <span class="constructor">FilenameExtension</span>.equals<span class="constructor">IgnoreCase(<span class="string">".png"</span>)</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">        return "image<span class="operator">/</span>jpg";</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">if</span> (<span class="constructor">FilenameExtension</span>.equals<span class="constructor">IgnoreCase(<span class="string">".txt"</span>)</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">        return "text<span class="operator">/</span>plain";</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">    return "image<span class="operator">/</span>jpg";</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>香港卡全攻略</title>
    <url>/2023/11/19/bankcard-hongkong/</url>
    <content><![CDATA[<h3 id="为什么要办香港卡？"><a href="#为什么要办香港卡？" class="headerlink" title="为什么要办香港卡？"></a>为什么要办香港卡？</h3><p>保险？参与港美股？参与加密货币？OpenAI付费？公司股票不转回？对于我来说，听着牛逼想要但又不是必须的理由。最后决定办理是因为觉得港股券商入金有奖励，家人可以顺便去玩一圈。</p>
<h3 id="选择哪个银行？"><a href="#选择哪个银行？" class="headerlink" title="选择哪个银行？"></a>选择哪个银行？</h3><p>有那么多银行，我们可以办哪些，哪些又比较好呢？<br>从发币行角度考虑</p>
<ul>
<li>香港上海汇丰银行</li>
<li>渣打银行（香港）</li>
<li>中国银行（香港）<br>三家银行都是在全球开展业务。从网上的信息来看汇丰和中国银行很好办，渣打不太好办。<br>另外虚拟银行众安银行、天星银行、蚂蚁银行等，没有考虑和办理就不列了。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>香港上海汇丰银行</th>
<th>中国银行</th>
</tr>
</thead>
<tbody>
<tr>
<td>总部</td>
<td>伦敦</td>
<td>中国</td>
</tr>
<tr>
<td>办理难度</td>
<td>容易</td>
<td>容易</td>
</tr>
<tr>
<td>转汇费用</td>
<td>据说同名内地香港互转不要手续费</td>
<td>同名内地香港互转不要手续费</td>
</tr>
</tbody>
</table>
<p>听说汇丰和中国银行从内地卡转入香港卡不要手续费。我办了汇丰之后就飘了不想再办就出去玩了。回来内地后去汇丰银行办理内地卡，没想到她直接告诉我只接待Premier客户，有存款要求不然有管理费。</p>
<h3 id="怎么办理？"><a href="#怎么办理？" class="headerlink" title="怎么办理？"></a>怎么办理？</h3><p>两种方式</p>
<ul>
<li><p>直接到营业网点线下排队办理</p>
<p>  如果人多去晚了可能无法办理，或者预约的人数多也可能被拒绝</p>
</li>
<li><p>网上预约，再到网点办理</p>
<p>  网上预约后无需再早去现场排队拿号，直接告诉接待人员，然后就给你安排了</p>
</li>
</ul>
<a id="more"></a>
<h4 id="怎么预约"><a href="#怎么预约" class="headerlink" title="怎么预约"></a>怎么预约</h4><h5 id="汇丰银行"><a href="#汇丰银行" class="headerlink" title="汇丰银行"></a>汇丰银行</h5><p>多久开始提前预约？<br>公众号上写提前2个工作日，预约后，会有香港电话打过来问你是哪天要去，去哪个分行，她登记后会将信息转至分行<br>分行的人会再次打电话给你，确认上门时间</p>
<ol>
<li>关注微信公众号汇丰香港，微信号：hsbc-hongkong</li>
<li><p>预约开户<br>点击“预约开户”按钮<br><img src="/2023/11/19/bankcard-hongkong/hsbc-app-open1.jpg" alt="预约开户"><br>进入页面后，填写相关信息<br><img src="/2023/11/19/bankcard-hongkong/hsbc-app-open-form.jpg" alt="预约会面"><br>联络电话，填写你内地的，要改成+86<br>产品及服务，选择汇丰ONE<br>选择会面日期，香港银行周一到周五营业时间为上午9点到下午4点，周六营业时间为上午9点到下午1点，我是周六去的<br>选择会面地区，我选择的网红网点<strong>葵芳分行</strong>，新界-》葵涌及荃湾</p>
</li>
<li><p>银行登记<br>提交完后，第二天晚上17:59银行电话我<br>询问我具体办理日期和时间<br>确认我们选择的区域的分行，或者你也可以讲自己想要的分行<br>告知开户时需要提供的资料<br>分行同事会再电话告知需要提供的资料</p>
</li>
<li><p>分行电话<br>隔天18：:01分行电话，<br>告知几点<br>带上身份证、港澳通行证、过关小票</p>
</li>
</ol>
<h5 id="中国银行"><a href="#中国银行" class="headerlink" title="中国银行"></a>中国银行</h5><p>可以提前7个工作日预约，不能约当天，工作日包含周六<br>中国银行预约时，公众号里面只能选择还能预约的分行，不会打电话给你确认，所以公众号预约成什么地方就是什么地方</p>
<ol>
<li>关注微信公众号中银香港微服务，微信号：BOCHK_Banking</li>
<li>预约开户<br>点击”银行服务”-》“我要预约”按钮<br><img src="/2023/11/19/bankcard-hongkong/boc-app-open1.jpg" alt="预约开户"><br>进入页面后，点击“预约开户”<br><img src="/2023/11/19/bankcard-hongkong/boc-app-form1.jpg" alt="预约开户"><br><img src="/2023/11/19/bankcard-hongkong/boc-app-form2.jpg" alt="预约开户"><br><img src="/2023/11/19/bankcard-hongkong/boc-app-form3.jpg" alt="预约开户"></li>
</ol>
<h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p>总结一下要带哪些资料</p>
<ul>
<li>身份证</li>
<li>港澳通行证（有效期不低于3个月）</li>
<li>过关小票</li>
<li>地址证明（不一定需要，看客户经理）</li>
<li>收入来源（不一定需要，看客户经理）</li>
<li>存款（不一定需要，看客户经理）<br>我在葵芳分行只要了身份证、港澳通行证、过关小票</li>
</ul>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>香港卡</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编译器有哪些</title>
    <url>/2023/10/21/cpp-compiler/</url>
    <content><![CDATA[<p>没想到C++环境搭建都这么麻烦，编译器有很多种。</p>
<ul>
<li><a href="https://code.visualstudio.com/docs/cpp/config-msvc" target="_blank" rel="noopener">MSVC</a></li>
<li><a href="https://github.com/skeeto/w64devkit" target="_blank" rel="noopener">w64devkit</a></li>
<li>Clang</li>
</ul>
<p>没有研究是觉得有些复杂。</p>
<p>在编译时会将我们include，#define等合并成一个文件。那如何看到这个编译的中间文件呢？<br>在Visual Studio中设置<br><img src="/2023/10/21/cpp-compiler/preprocess-to-a-file.png" alt="Preprocess to a File"></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Ctrl + F7编译后，可以从Debug目录下看到FileName.i文件中已经包含了include的 iostream代码</p>
<p><strong>注意：Visual Studio和Visual Studio Code是不同的工具</strong></p>
<p>下一个看看C++如何建立link，为什么C++中不像java一样需要导入包，就可以link，然后引用呢？如果有两个同名的函数，那link的时候会报错吗？</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>表达式引擎预研</title>
    <url>/2022/09/02/compare-expression-language/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最后业务有需求需要动态计算表达式，基于公式对某些值进行再加工计算。所以对表达式引擎进行一个简单的了解。<br>表达式引擎就是为了表达式的动态求值计算。<br>通常对于各个类库对比，我们需要看厂商、License、社区活跃度、优缺点等来判断其符合的使用场景，最终决定应该用哪个。<br>由于时间较紧，只做简单收集，在项目中本已使用AviatorScript的情况下就选择了它。</p>
<h3 id="特性对比"><a href="#特性对比" class="headerlink" title="特性对比"></a>特性对比</h3><table>
<thead>
<tr>
<th></th>
<th><a href="https://github.com/killme2008/aviatorscript" target="_blank" rel="noopener">AviatorScript</a></th>
<th><a href="http://www.groovy-lang.org/" target="_blank" rel="noopener">Groovy</a></th>
<th><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions" target="_blank" rel="noopener">SpEL</a></th>
<th><a href="https://github.com/alibaba/QLExpress" target="_blank" rel="noopener">QLExpress</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>Version</td>
<td>5.3.2</td>
<td>4.0.4</td>
<td>5.3.22</td>
<td>3.3.0</td>
</tr>
<tr>
<td>厂商</td>
<td>killme2008</td>
<td>Apache</td>
<td>Spring</td>
<td>alibaba</td>
</tr>
<tr>
<td>License</td>
<td>GPL V3</td>
<td>Apache 2 License</td>
<td>Apache License 2.0</td>
<td>Apache License 2.0</td>
</tr>
<tr>
<td>Language</td>
<td>基于Java</td>
<td>基于Java</td>
<td>Java</td>
<td>Java</td>
</tr>
<tr>
<td>优点</td>
<td>高性能<br> 轻量级</td>
<td>Flat learning curve<br>Powerful features<br>Smooth Java integration<br>Domain-Specific Languages<br>Vibrant and rich ecosystem<br>Scripting and testing glue</td>
<td></td>
<td>线程安全<br>高性能<br>弱类型脚本语言<br>安全控制<br>代码精简</td>
</tr>
</tbody>
</table>
<p>还有<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">OGNL</a>、<a href="https://www.drools.org/" target="_blank" rel="noopener">Drools</a>、<a href="https://github.com/j-easy/easy-rules" target="_blank" rel="noopener">EasyRules</a></p>
<p>另外<a href="https://github.com/mvel/mvel" target="_blank" rel="noopener">MVEL</a>、<a href="https://code.google.com/p/ik-expression/" target="_blank" rel="noopener">IKExpression</a>很久未更新，不列</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Aviator</tag>
      </tags>
  </entry>
  <entry>
    <title>C++构造函数设计原理</title>
    <url>/2019/02/14/cpp-constructor-rule/</url>
    <content><![CDATA[<p>构造函数，我们通常看到的如下<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">Point(<span class="params">void</span>)</span>&#123;</span><br><span class="line">    x = <span class="number">0.0</span>;</span><br><span class="line">    y = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="constructor">Point(<span class="params">double</span> <span class="params">xP</span>, <span class="params">double</span> <span class="params">yP</span>)</span>&#123;</span><br><span class="line">    x = xP;</span><br><span class="line">    y = yP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>与函数相比没有返回值部份（连void也没有），且与构造函数名与类名称相同。<br><a id="more"></a><br>函数名称与类名相同，每个对象都会初始化，可以由用户定义的函数初始化，也可以由系统编译器调用默认构造初始化。这就要求编译器必须总能知道调用哪个函数是构造函数，最简单也最符合逻辑的方式就是指定构造函数的名称与类名相同。<br>没有返回值，如果有返回值，则编译器必须知道如何处理返回值，这样会增加编译器的工作，降低效率。所以在定义构造函数时不能指定返回类型，即使void类型也不行。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title>C++重载默认参数函数问题？</title>
    <url>/2019/01/18/cpp-overload-default-param/</url>
    <content><![CDATA[<p>函数重载以参数类型和参数个数不同区分。如:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3, <span class="keyword">int</span> m4)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> m1, <span class="keyword">char</span> m2)</span></span>;</span><br></pre></td></tr></table></figure><br>以上程序大家都没有什么疑惑。那么下面的程序呢？<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3, <span class="keyword">int</span> m4 = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> m1, <span class="keyword">char</span> m2)</span></span>;</span><br></pre></td></tr></table></figure><br>看着也无大问题，但是编译却会报错<br><img src="/2019/01/18/cpp-overload-default-param/overload_argument.png" alt><br>原因在于C++中有了默认参数后4个int参数的方法相当于<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3, <span class="keyword">int</span> m4 = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2, <span class="keyword">int</span> m3)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">m4</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所以再定义一个int (int m1, int m2, int m3)已经造成了歧义。<br>由此设置默认参数需要注意2点  </p>
<ol>
<li>只能由后往前  </li>
<li>不能对少于参数个数的函数进行重载</li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Override</tag>
      </tags>
  </entry>
  <entry>
    <title>cq.qq.com</title>
    <url>/2015/10/06/cq-qq-com/</url>
    <content><![CDATA[<h1>国庆长假第三天：阴雨不断 影响出游</h1>

<h2 id="大渝网新闻中心-重庆晨网-吴国富2015-10-04-07-20"><a href="#大渝网新闻中心-重庆晨网-吴国富2015-10-04-07-20" class="headerlink" title="大渝网新闻中心 重庆晨网  吴国富2015-10-04 07:20"></a><a target="_blank" accesskey="5" href="http://cq.qq.com/news/" title="更多大渝网新闻中心相关内容列表">大渝网新闻中心</a> <a target="_blank" href="http://www.cqcb.com/">重庆晨网</a>  吴国富2015-10-04 07:20</h2><p><img src="/2015/10/06/cq-qq-com/fang.webp" alt><br><br><br>今年流行头上长花。重庆晨网记者 吴国富 摄</p>
<p>国庆节假日进入第三天，重庆主城天气阴雨相间，一定程度上影响了市民出游，但对整个重庆全市旅游接待影响不大，旅游接待有升有降，总体平稳，重庆市旅游市场秩序良好，无旅游安全事故。</p>
<p>（一）都市功能核心区和拓展区。渝中区接待95.1万人次，同比增长12.9%；沙坪坝区接待30.33万人次，同比增长6.78%；渝北区接待25.78万人次，同比增长10.54%；北碚区接待19.34万人次，同比增长7.86%；九龙坡区接待29.47万人次，同比下降2.9%。</p>
<p>（二）城市发展新区。南川区接待5.1万人次，同比增长19%；大足区接待6.69万人次，同比增长41.7%；铜梁区接待17.27万人次，同比增长32.25%；江津区接待8.92万人次，同比增长16.4%；永川区接待13.38万人次，同比增长23.39%；合川区接待1.55万人次，同比下降15.3%。</p>
<p>（三）渝东北生态涵养发展区。万州区接待17.18万人次，同比增长4.07%；巫山县接待4.73万人次，同比增长0.97%；奉节县接待1.74万人次，同比增长2.1%；云阳县接待10.03万人次，同比增长321%;梁平县接待3.62万人次，同比增长19.3%；丰都县接待2.69万人次，同比下降19.65%。</p>
<p>（四）渝东南生态保护发展区。武隆县接待18.87万人次，同比增长15.67%；黔江区接待6.52万人次，同比增长20.29%；酉阳县接待5.11万人次，同比增长3.81%；石柱县接待2.93万人次，同比增长9.6%。</p>
<p>3日离港班机共383架次，离港旅客共4.77万人次；入港班机384架次，入港旅客4.96万人次。铁路发送列车共164车次，发送旅客共13.5万人次；抵达列车164车次，抵达旅客11.8万人次。水运发送客船共26船班，发送旅客共0.33万人次；抵达客船26船班，抵达旅客0.26万人次。公路发送车次共7981班，发送旅客共21.61万人次；抵达车次7000班，抵达旅客20.99万人次。</p>
<p>三、旅游适时信息友情提示</p>
<p>各地旅游接待稳步上升，各区县旅游管理部门和旅游企业要认真按照《重庆市旅游局关于认真做好2015年国庆节假日旅游工作的通知》要求，结合天气和游客流量变化，加强旅游景区的安全监督检查和管理，落实相关旅游安全防范措施，加强应急值守，确保旅游安全。</p>
<p>根据最新天气预报资料，4日，阴转小雨，气温18—21℃，西风微风。</p>
<p>(<a href="http://cq.qq.com/a/20151004/007110.htm" target="_blank" rel="noopener">重庆晨网</a>)</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title>基于数据决策春节怎样回家最不堵车</title>
    <url>/2018/01/29/data-decision-go-home-time-in-the-spring-festival/</url>
    <content><![CDATA[<h6 id="互联网从业者的优势在于会查看利用网络上公开数据"><a href="#互联网从业者的优势在于会查看利用网络上公开数据" class="headerlink" title="互联网从业者的优势在于会查看利用网络上公开数据"></a>互联网从业者的优势在于会查看利用网络上公开数据</h6><p>还有14个工作日就过年了，各大公司即将封版，很多已无心工作数着日子等过年（作者除外，还有两个版本需上线）。 数日子过年的时候不得不谋划如何休假使假期时间最长，可惜今年是前4后3，没那么好。<br>今年过年得回我家、老婆家，分别为200公里-3小时、450公里-6小时左右。堵在路上听着儿子撕心裂肺的哭声犹如应用宕掉了一样让人着急心疼。除了每过一个服务区重新导航一次以外还能做些什么避免呢？年底时各大地图、打车软件发布过各互联网公司加班情况，那他们是否也有春节的交通预测呢？答案是有的。<br><a id="more"></a></p>
<h4 id="查看历史数据"><a href="#查看历史数据" class="headerlink" title="查看历史数据"></a>查看历史数据</h4><p>百度、高德都有相关数据，但是还未有2018年的春节预测。<br>高德，17年1月16发布<a href="http://report.amap.com/share.do?id=8a38bb8659a639ce0159a639ce090000" target="_blank" rel="noopener">2017年春节出行预测报告</a>，放假前一周周一，所以今年是否会在2018-02-05发布，值得关注。<br>百度，17年2月发布<a href="http://wiki.lbsyun.baidu.com/cms/2017_migration_summary_report.pdf" target="_blank" rel="noopener">2017年春运迁徙总结报告</a>，应该是迁徙后得出的数据。也许更为接近事实。<br>既然已有报告，我们进行简单对比，取个大概趋势休假出行即可。<br>高德-春运期间全国高速公路网拥堵趋势<br><img src="/2018/01/29/data-decision-go-home-time-in-the-spring-festival/spring_festival_amap.png" alt="春运期间全国高速公路网拥堵趋势"><br>百度-春运全国迁徙趋势<br><img src="/2018/01/29/data-decision-go-home-time-in-the-spring-festival/spring_festival_baidu.png" alt="春运全国迁徙趋势"><br>节前拥堵情况几乎一致，但是打破了我原本认为二十八、二十九、除夕会很堵车的情况，由此取消节前先送老婆孩子回家的决定。<br>节后略有不同，主要分析初六、七、八、九，因为初七、八上班，九放假，不排除很多人七、八休假的可能。初六毋庸置疑最拥堵，余下三天高德认为初七最不堵，百度认为初九的交通情况略好于初七。  </p>
<font color="red">所以大致决策是除夕回家，初七回市区，留着年假带宝宝出去浪里咯浪~<br>最后实时关注2月5日的高德预测<br>最最后表示一切决定听老婆的<br></font>]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>数据决策</tag>
        <tag>春运交通情况</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java、Excel数据分析如何有效投资房产</title>
    <url>/2018/01/27/data-analysis-house-price/</url>
    <content><![CDATA[<h4 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h4><p>2017年IT业中多起猝死、自杀，创业的九死一生，各大公司清算、裁员等。年底也总是充斥着各种活动刷屏，年终总结、账单等。30岁的程序猿什么的，不幸我们可能也是其中之一。要改变现状，离不开钱与投资，提到投资就不得不提房。过去数十年的房价颠覆了努力工作改变生活的思维。作为程序猿比他人多的优势在于可以利用互联网数据进行数据分析决策，接下来看看<font color="red">基于链家中重庆渝北区人和二手房及国家全国商品房销售面积统计的简单数据分析</font>。<br><a id="more"></a></p>
<h4 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h4><h5 id="链家公共数据"><a href="#链家公共数据" class="headerlink" title="链家公共数据"></a>链家公共数据</h5><p>链家的url很标准，我们要获取的数据如下<a href="https://cq.lianjia.com/ershoufang/renhe/" target="_blank" rel="noopener">【人和二手房_重庆人和二手房出售】(重庆链家网)</a>，2018年1月27日数据为472条，共16页，url格式为<br><a href="https://cq.lianjia.com/ershoufang/renhe/pg1/" target="_blank" rel="noopener">https://cq.lianjia.com/ershoufang/renhe/pg1/</a><br>…<br><a href="https://cq.lianjia.com/ershoufang/renhe/pg16/" target="_blank" rel="noopener">https://cq.lianjia.com/ershoufang/renhe/pg16/</a>  </p>
<h5 id="Java-Jsoup爬虫"><a href="#Java-Jsoup爬虫" class="headerlink" title="Java Jsoup爬虫"></a>Java Jsoup爬虫</h5><p>现在全职Java，且为了快速实现采用Jsoup获取Html数据，代码非常简单</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Document document = Jsoup.<span class="keyword">connect</span>(<span class="keyword">domain</span> + uri)</span><br><span class="line">   .userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36")</span><br><span class="line">   .timeout(<span class="number">30000</span>).<span class="keyword">get</span>();</span><br></pre></td></tr></table></figure>
<h5 id="保存Html数据至本地文件"><a href="#保存Html数据至本地文件" class="headerlink" title="保存Html数据至本地文件"></a>保存Html数据至本地文件</h5><p>厚道的链家并未做防爬虫，也有可能是为了对搜索引擎友好，提高曝光率。数据获取后要保存至本地文件就简单了，合并后代码如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public String save<span class="constructor">Html(String <span class="params">domain</span>, String <span class="params">uri</span>)</span> &#123;</span><br><span class="line">  FileOutputStream out = null;</span><br><span class="line">  File dest = <span class="keyword">new</span> <span class="constructor">File(<span class="string">"src/temp_html/"</span> + (<span class="params">uri</span>.<span class="params">endsWith</span>(<span class="string">"/"</span>)</span> ? uri.substring(<span class="number">0</span>, uri.length<span class="literal">()</span> - <span class="number">1</span>) : uri) + <span class="string">".html"</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Document document = <span class="module-access"><span class="module"><span class="identifier">Jsoup</span>.</span></span>connect(domain + uri)</span><br><span class="line">        .user<span class="constructor">Agent(<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36"</span>)</span></span><br><span class="line">        .timeout(<span class="number">30000</span>).get<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dest.get<span class="constructor">ParentFile()</span>.exists<span class="literal">()</span>) &#123;</span><br><span class="line">      dest.get<span class="constructor">ParentFile()</span>.mkdirs<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dest.exists<span class="literal">()</span>) &#123;</span><br><span class="line">      dest.create<span class="constructor">NewFile()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out = <span class="keyword">new</span> <span class="constructor">FileOutputStream(<span class="params">dest</span>, <span class="params">false</span>)</span>;</span><br><span class="line">    out.write(document.<span class="keyword">to</span><span class="constructor">String()</span>.get<span class="constructor">Bytes(<span class="string">"UTF-8"</span>)</span>);</span><br><span class="line">    out.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">    e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    return null;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span>close<span class="constructor">Quietly(<span class="params">out</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return dest.get<span class="constructor">Path()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过Jsoup解析数据至Excel"><a href="#通过Jsoup解析数据至Excel" class="headerlink" title="通过Jsoup解析数据至Excel"></a>通过Jsoup解析数据至Excel</h5><p>再将html中数据解析使用POI写入Excel就相对简单了，主要在于规则匹配</p>
<h6 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public List&lt;House&gt; parse<span class="constructor">Html(String <span class="params">fileName</span>)</span> &#123;</span><br><span class="line">    List&lt;House&gt; houses = null;</span><br><span class="line">    <span class="comment">//读取本地html的路径</span></span><br><span class="line">    File file = <span class="keyword">new</span> <span class="constructor">File(<span class="params">fileName</span>)</span>;</span><br><span class="line">    <span class="comment">//写个循环读取这些文件的名字</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (file.is<span class="constructor">File()</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">"文件&#123;&#125;开始解析"</span>, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面开始解析本地的html</span></span><br><span class="line">        Document doc = <span class="module-access"><span class="module"><span class="identifier">Jsoup</span>.</span></span>parse(file, <span class="string">"UTF-8"</span>);</span><br><span class="line">        Elements sellListContents = doc.select(<span class="string">"ul.sellListContent"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">ObjectUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">sellListContents</span>)</span>) &#123;</span><br><span class="line">          Element sellListContent = sellListContents.first<span class="literal">()</span>;</span><br><span class="line">          Elements sellContents = sellListContent.select(<span class="string">"li.clear"</span>);</span><br><span class="line">          <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">ObjectUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">sellListContents</span>)</span>) &#123;</span><br><span class="line">            houses = <span class="keyword">new</span> ArrayList&lt;&gt;(sellContents.size<span class="literal">()</span>);</span><br><span class="line">            for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sellContents.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">              Element sellList = sellContents.get(i);</span><br><span class="line">              Elements sellElements = sellList.select(<span class="string">"div.clear"</span>);</span><br><span class="line">              <span class="keyword">if</span> (null != sellElements<span class="operator"> &amp;&amp; </span>sellElements.size<span class="literal">()</span><span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">                House house = <span class="keyword">new</span> <span class="constructor">House()</span>;</span><br><span class="line">                Element infoElement = sellElements.first<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                Element titleElement = infoElement.select(<span class="string">"div.title"</span>).first<span class="literal">()</span>.select(<span class="string">"a[href]"</span>).first<span class="literal">()</span>;</span><br><span class="line">                house.set<span class="constructor">Title(<span class="params">titleElement</span>.<span class="params">text</span>()</span>);</span><br><span class="line">                house.set<span class="constructor">Url(<span class="params">titleElement</span>.<span class="params">attr</span>(<span class="string">"href"</span>)</span>);</span><br><span class="line"></span><br><span class="line">                Element houseInfoElement = infoElement.select<span class="constructor">First(<span class="string">"div.houseInfo"</span>)</span>;</span><br><span class="line">                house.set<span class="constructor">Village(<span class="params">houseInfoElement</span>.<span class="params">select</span>(<span class="string">"a"</span>)</span>.first<span class="literal">()</span>.text<span class="literal">()</span>);</span><br><span class="line">                String houseInfo = houseInfoElement.text<span class="literal">()</span>;</span><br><span class="line">                String<span class="literal">[]</span> houseInfos = houseInfo.split(<span class="string">"\\|"</span>);</span><br><span class="line"></span><br><span class="line">                for (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; houseInfos.length; j++</span><br><span class="line">                    ) &#123;</span><br><span class="line">                  switch (j) &#123;</span><br><span class="line">                    case <span class="number">1</span>:</span><br><span class="line">                      house.set<span class="constructor">Structure(<span class="params">houseInfos</span>[<span class="params">j</span>].<span class="params">trim</span>()</span>);</span><br><span class="line">                      break;</span><br><span class="line">                    case <span class="number">2</span>:</span><br><span class="line">                      house.set<span class="constructor">Acreage(<span class="params">houseInfos</span>[<span class="params">j</span>].<span class="params">replace</span>(<span class="string">"平米"</span>, <span class="string">""</span>)</span>.trim<span class="literal">()</span>);</span><br><span class="line">                      break;</span><br><span class="line">                    case <span class="number">3</span>:</span><br><span class="line">                      house.set<span class="constructor">Orientation(<span class="params">houseInfos</span>[<span class="params">j</span>].<span class="params">trim</span>()</span>);</span><br><span class="line">                      break;</span><br><span class="line">                    case <span class="number">4</span>:</span><br><span class="line">                      house.set<span class="constructor">Decoration(<span class="params">houseInfos</span>[<span class="params">j</span>].<span class="params">trim</span>()</span>);</span><br><span class="line">                      break;</span><br><span class="line">                    case <span class="number">5</span>:</span><br><span class="line">                      house.set<span class="constructor">Elevator(<span class="params">houseInfos</span>[<span class="params">j</span>].<span class="params">trim</span>()</span>);</span><br><span class="line">                      break;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Element positionInfoElement = infoElement.select<span class="constructor">First(<span class="string">"div.positionInfo"</span>)</span>;</span><br><span class="line">                house.set<span class="constructor">Region(<span class="params">positionInfoElement</span>.<span class="params">select</span>(<span class="string">"a"</span>)</span>.first<span class="literal">()</span>.text<span class="literal">()</span>);</span><br><span class="line">                String position = positionInfoElement.text<span class="literal">()</span>.split(house.get<span class="constructor">Region()</span>)<span class="literal">[<span class="number">0</span>]</span>.trim<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                house</span><br><span class="line">                    .set<span class="constructor">Position(<span class="params">position</span>.<span class="params">lastIndexOf</span>(<span class="string">"-"</span>)</span><span class="operator"> == </span>position.length<span class="literal">()</span> - <span class="number">1</span> ? position.substring(<span class="number">0</span>, position.length<span class="literal">()</span> - <span class="number">1</span>).trim<span class="literal">()</span> : position);</span><br><span class="line"></span><br><span class="line">                house.set<span class="constructor">Tag(<span class="params">infoElement</span>.<span class="params">selectFirst</span>(<span class="string">"div.tag"</span>)</span>.text<span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">                Element priceInfoElement = infoElement.select<span class="constructor">First(<span class="string">"div.priceInfo"</span>)</span>;</span><br><span class="line">                house.set<span class="constructor">TotalPrice(<span class="params">priceInfoElement</span>.<span class="params">selectFirst</span>(<span class="string">"div.totalPrice"</span>)</span>.text<span class="literal">()</span>.replace(<span class="string">"万"</span>, <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">                house.set<span class="constructor">UnitPrice(<span class="params">priceInfoElement</span>.<span class="params">selectFirst</span>(<span class="string">"div.unitPrice"</span>)</span>.text<span class="literal">()</span>.replace(<span class="string">"单价"</span>, <span class="string">""</span>).replace(<span class="string">"元/平米"</span>, <span class="string">""</span>).trim<span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">"解析第&#123;&#125;个元素，结果为：&#123;&#125;"</span>, i, house.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">                houses.add(house);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">"文件&#123;&#125;解析错误"</span>, fileName, e);</span><br><span class="line">    &#125;</span><br><span class="line">    return houses;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h6 id="写入Excel"><a href="#写入Excel" class="headerlink" title="写入Excel"></a>写入Excel</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public String write<span class="constructor">Excel(String <span class="params">fileName</span>, List&lt;House&gt; <span class="params">houses</span>)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">"文件&#123;&#125;开始写入"</span>, fileName);</span><br><span class="line">    <span class="keyword">try</span> (POIFSFileSystem fs = <span class="keyword">new</span> <span class="constructor">POIFSFileSystem(<span class="params">new</span> FileInputStream(<span class="params">fileName</span>)</span>)) &#123;</span><br><span class="line">      Workbook workbook = <span class="keyword">new</span> <span class="constructor">HSSFWorkbook(<span class="params">fs</span>)</span>;</span><br><span class="line">      HSSFSheet sheet = (HSSFSheet) workbook.get<span class="constructor">SheetAt(0)</span>;</span><br><span class="line">      final <span class="built_in">int</span> preLastRowNum = sheet.get<span class="constructor">LastRowNum()</span>;</span><br><span class="line">      logger.info(<span class="string">"文件&#123;&#125;,上次行数为&#123;&#125;"</span>, fileName, preLastRowNum);</span><br><span class="line">      for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; houses.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">        Row row = sheet.create<span class="constructor">Row(<span class="params">preLastRowNum</span> + <span class="params">i</span> + 1)</span>;</span><br><span class="line">        House house = houses.get(i);</span><br><span class="line">        row.create<span class="constructor">Cell(0)</span>.set<span class="constructor">CellValue(<span class="params">preLastRowNum</span> + <span class="params">i</span> + 1)</span>;</span><br><span class="line">        row.create<span class="constructor">Cell(1)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getTitle</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(2)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getTotalPrice</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(3)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getUnitPrice</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(4)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getVillage</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(5)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getStructure</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(6)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getAcreage</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(7)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getOrientation</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(8)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getDecoration</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(9)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getElevator</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(10)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getPosition</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(11)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getRegion</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(12)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getTag</span>()</span>);</span><br><span class="line">        row.create<span class="constructor">Cell(13)</span>.set<span class="constructor">CellValue(<span class="params">house</span>.<span class="params">getUrl</span>()</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      FileOutputStream fileOut = <span class="keyword">new</span> <span class="constructor">FileOutputStream(<span class="params">fileName</span>)</span>;</span><br><span class="line">      workbook.write(fileOut);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span>close<span class="constructor">Quietly(<span class="params">fileOut</span>)</span>;</span><br><span class="line">      logger.info(<span class="string">"文件&#123;&#125;写入完成,&#123;&#125;-&#123;&#125;行"</span>, fileName, preLastRowNum + <span class="number">1</span>, preLastRowNum + houses.size<span class="literal">()</span>);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">      logger.error(<span class="string">"excel-&#123;&#125;处理出错"</span>, fileName, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return fileName;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>写入后核对数据没什么问题，然后需要对数据进行简单处理。  </p>
<h5 id="删除车位、别墅"><a href="#删除车位、别墅" class="headerlink" title="删除车位、别墅"></a>删除车位、别墅</h5><p>观察发现数据中有车位、别墅存在，不在我们投资范围，需要从类别中筛选出并删除</p>
<h5 id="重复数据"><a href="#重复数据" class="headerlink" title="重复数据"></a>重复数据</h5><p>小区名称中发现有如棕榈泉一期、棕榈泉二期、棕榈泉三期字样，我们此次的初步分析暂时不需要这样统计，在后期具体决策时再才需要参考某期是否离轻轨、学校更近，车位比更高等。所以也需要通过函数全部替换成“棕榈泉”。</p>
<h4 id="数据分析展现"><a href="#数据分析展现" class="headerlink" title="数据分析展现"></a>数据分析展现</h4><p>数据分析在多年拉卡拉、中汇支付风控、合规经验的老婆手把手教导下完成，大量运用透视图  </p>
<h5 id="小区平均单价分析"><a href="#小区平均单价分析" class="headerlink" title="小区平均单价分析"></a>小区平均单价分析</h5><p>初步数据处理后，不会再有总价500w这种不忍直视的内容，此时我们需要来个直观的小区平均单价柱状图冲击一下<br><img src="/css/images/20180127_village_unitprice_histogram.png" alt="小区平均单价柱状图"><br>小区平均单价  </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>平均单价（元）</th>
<th>小区</th>
</tr>
</thead>
<tbody>
<tr>
<td>最高</td>
<td>20,000</td>
<td>比毕得豪园</td>
</tr>
<tr>
<td>最低</td>
<td>6,480</td>
<td>人和家园</td>
</tr>
<tr>
<td>平均</td>
<td>14,151.46</td>
</tr>
</tbody>
</table>
<p>当然这个价格并不准确，其中有房龄、交通、装修、是否带学校指标等其它因素，但是至少可以让我们跨出第一步让自己对市场价格有一定的认知，计算自己可承受的价位</p>
<h5 id="房源数量分析"><a href="#房源数量分析" class="headerlink" title="房源数量分析"></a>房源数量分析</h5><p>接下来看看房源多的一些小区，经过我们之前处理过后不分几期几期后只取前20，分布如下<br><img src="/css/images/20180127_village_sum_pie_chat.png" alt="房源前20小区饼状图"><br>棕榈泉的楼盘本身大房子数量多，且含有别墅洋房及高层，出售最多，占比27.32%力夺第二的9.02%。想必其中很多都是投资来的，如果分析清水与装修过的比例、持有房子年限等应该是可以分析出来   </p>
<h5 id="户型占比分析"><a href="#户型占比分析" class="headerlink" title="户型占比分析"></a>户型占比分析</h5><p>作为投资户型极其重要，市场上哪些户型受欢迎，新楼盘也一样会对人群分析，对楼盘人群定位。<br><img src="/css/images/20180127_structure_pie_chart.png" alt="户型饼状图"><br>3室2厅大比分夺得冠军，4室2厅为第二出乎意料，应该具体分析这些房子的出处是否为棕榈泉的洋房。除去4室2厅外，3室2厅和2室2厅都在我们接受的范围，像我们没有多少财力的年轻人很多第一套房会选择2室2厅，够自己和孩子住，但是如果加入父母就不够住了，多半会卖掉换一个3室2厅。<br>由此可以得出结论，如果目标为这些改善型的人群，3室2厅是最佳选择<br>如果财力有限可以可以买2室2厅<br>如果钱更少是否需要买个1室来投资出租，就该考虑地段及租金的关联关系了。  </p>
<h5 id="全国商品房销售面积分析"><a href="#全国商品房销售面积分析" class="headerlink" title="全国商品房销售面积分析"></a>全国商品房销售面积分析</h5><p>2月3日对全国商品房销售面积抓取，制作简单折线图<br><img src="/css/images/20180127_acreage_china_line_chart.png" alt="全国销售面积"><br><img src="/css/images/20180127_acreage_cq_line_chart.png" alt="重庆销售面积">  </p>
<h6 id="其实还有很多可分析，想必房子的热门程度和价格是有一定关系，多久可以收回成本等。程序猿总是想太多，一个简单需求整成了一个价格监控、预测系统。所以本文只做简单分析，代码也很简单，2小时左右。"><a href="#其实还有很多可分析，想必房子的热门程度和价格是有一定关系，多久可以收回成本等。程序猿总是想太多，一个简单需求整成了一个价格监控、预测系统。所以本文只做简单分析，代码也很简单，2小时左右。" class="headerlink" title="其实还有很多可分析，想必房子的热门程度和价格是有一定关系，多久可以收回成本等。程序猿总是想太多，一个简单需求整成了一个价格监控、预测系统。所以本文只做简单分析，代码也很简单，2小时左右。"></a>其实还有很多可分析，想必房子的热门程度和价格是有一定关系，多久可以收回成本等。程序猿总是想太多，一个简单需求整成了一个价格监控、预测系统。所以本文只做简单分析，代码也很简单，2小时左右。</h6><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>Github:<a href="https://github.com/2tu/house" target="_blank" rel="noopener">house</a></p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>日期格式化 YYYY日期错位</title>
    <url>/2018/01/03/date-formate-YYYY-in-java/</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>支付系统通知账务还款结果时，对请求时间使用“YYYYMMddHHmmss”格式化，20171231变为了20181231致使数据不匹配。  </p>
<p>我们大多都知道mm与MM的区别，因为分和月会同时出现，但很少会关注其它的pattern大小写有无区分。<br><a id="more"></a></p>
<p>重现demo如下  </p>
<pre><code>Date date = new Date(2017 - 1900, 11, 31);

DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
System.out.println(dateFormat.format(date));

dateFormat = new SimpleDateFormat(&quot;YYYY-MM-dd&quot;);
System.out.println(dateFormat.format(date));
</code></pre><p>输出结果：<br>2017-12-31<br>2018-12-31  </p>
<p>Date and Time Patterns  </p>
<table>
<thead>
<tr>
<th>Letter</th>
<th>Date or Time Component</th>
<th>Presentation</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td>G</td>
<td>Era designator</td>
<td>Text</td>
<td>AD</td>
</tr>
<tr>
<td>y</td>
<td>Year</td>
<td>Year</td>
<td>1996; 96</td>
</tr>
<tr>
<td>Y</td>
<td>Week year</td>
<td>Year</td>
<td>2009; 09</td>
</tr>
<tr>
<td>M</td>
<td>Month in year (context sensitive)</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td>L</td>
<td>Month in year (standalone form)</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td>w</td>
<td>Week in year</td>
<td>Number</td>
<td>27</td>
</tr>
<tr>
<td>W</td>
<td>Week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td>D</td>
<td>Day in year</td>
<td>Number</td>
<td>189</td>
</tr>
<tr>
<td>d</td>
<td>Day in month</td>
<td>Number</td>
<td>10</td>
</tr>
<tr>
<td>F</td>
<td>Day of week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td>E</td>
<td>Day name in week</td>
<td>Text</td>
<td>Tuesday; Tue</td>
</tr>
<tr>
<td>u</td>
<td>Day number of week (1 = Monday, …, 7 = Sunday)</td>
<td>Number</td>
<td>1</td>
</tr>
<tr>
<td>a</td>
<td>Am/pm marker</td>
<td>Text</td>
<td>PM</td>
</tr>
<tr>
<td>H</td>
<td>Hour in day (0-23)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td>k</td>
<td>Hour in day (1-24)</td>
<td>Number</td>
<td>24</td>
</tr>
<tr>
<td>K</td>
<td>Hour in am/pm (0-11)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td>h</td>
<td>Hour in am/pm (1-12)</td>
<td>Number</td>
<td>12</td>
</tr>
<tr>
<td>m</td>
<td>Minute in hour</td>
<td>Number</td>
<td>30</td>
</tr>
<tr>
<td>s</td>
<td>Second in minute</td>
<td>Number</td>
<td>55</td>
</tr>
<tr>
<td>S</td>
<td>Millisecond</td>
<td>Number</td>
<td>978</td>
</tr>
<tr>
<td>z</td>
<td>Time zone</td>
<td>General time zone</td>
<td>Pacific Standard Time; PST; GMT-08:00</td>
</tr>
<tr>
<td>Z</td>
<td>Time zone</td>
<td>RFC 822 time zone</td>
<td>-0800</td>
</tr>
<tr>
<td>X</td>
<td>Time zone</td>
<td>ISO 8601 time zone</td>
<td>-08; -0800; -08:00</td>
</tr>
</tbody>
</table>
<p>以上y为正常理解中的year，Y为week year，当天所在的周所属年份，一周从周日开始，周六结束。只要本周跨年，那么这周即算入下一年，2017-12-31为周日，刚好是2017最后一周并跨年。用YYYY获取自然得出2018，造成了这个错误。  </p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://docs.oracle.com/javase/9/docs/api/java/text/SimpleDateFormat.html" target="_blank" rel="noopener">SimpleDateFormat by Java</a><br><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/DataFormatting/Articles/dfDateFormatting10_4.html#//apple_ref/doc/uid/TP40002369-SW1" target="_blank" rel="noopener">Date Formatters by iOS</a>  </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>DateFormat</tag>
        <tag>YYYY</tag>
        <tag>yyyy</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson序列化、反序列化枚举</title>
    <url>/2020/01/08/enum-serializer-by-Gson/</url>
    <content><![CDATA[<h4 id="后端返回了N多枚举，前端Gson解析报错？"><a href="#后端返回了N多枚举，前端Gson解析报错？" class="headerlink" title="后端返回了N多枚举，前端Gson解析报错？"></a>后端返回了N多枚举，前端Gson解析报错？</h4><p>后端接口返回很多枚举，Android复用实体，解析时却报错  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.google</span><span class="selector-class">.gson</span><span class="selector-class">.JsonSyntaxException</span>: java<span class="selector-class">.lang</span><span class="selector-class">.IllegalStateException</span>: </span><br><span class="line">Expected <span class="selector-tag">a</span> string but was BEGIN_OBJECT at line <span class="number">1</span> column <span class="number">70</span> path $<span class="selector-class">.data</span>.type</span><br></pre></td></tr></table></figure>
<p>先定义一个枚举例子  Type.java  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> enum <span class="keyword">Type</span>&#123;</span><br><span class="line">	GSON(<span class="number">0</span>, "Gson"),</span><br><span class="line">	JACKSON(<span class="number">1</span>, "Jackson"),</span><br><span class="line">	FASTJSON(<span class="number">2</span>, "FastJson");</span><br><span class="line">	private final <span class="type">int</span> code;</span><br><span class="line">	private final String <span class="type">name</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">Type</span>(<span class="type">int</span> code, String <span class="type">name</span>)&#123;</span><br><span class="line">		this.code = code;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="keyword">Type</span> code(<span class="type">int</span> code)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">Type</span> i : <span class="keyword">Type</span>.<span class="keyword">values</span>())&#123;</span><br><span class="line">			<span class="keyword">if</span>(i.code() == code)&#123;</span><br><span class="line">				<span class="keyword">return</span> i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="keyword">Type</span> <span class="type">name</span>(String <span class="type">name</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">Type</span> i : <span class="keyword">Type</span>.<span class="keyword">values</span>())&#123;</span><br><span class="line">			<span class="keyword">if</span>(i.name().equals(<span class="type">name</span>))&#123;</span><br><span class="line">				<span class="keyword">return</span> i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> code()&#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> String <span class="type">name</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在序列化时服务端有两种试返回<br>1、完整返回枚举</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"type"</span>:&#123;<span class="attr">"code"</span>:<span class="number">0</span>,<span class="attr">"name"</span>:<span class="string">"Gson"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>2、序列化code或name</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"type"</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="regexp">//</span>&#123;<span class="string">"type"</span>:<span class="string">"Gson"</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最好的解决办法——解决提出问题的人"><a href="#最好的解决办法——解决提出问题的人" class="headerlink" title="最好的解决办法——解决提出问题的人"></a>最好的解决办法——解决提出问题的人</h4><p>很不幸后端是我负责的，所以我们有三个解决方法<br>1、让前端自己解决<br>2、为前端提供技术方案<br>3、修改后端枚举<br>我应该怎么办？<br>以上，当然是认怂，直接奉上代码喽<br>Json是一种广泛使用的数据交换格式，在Java中序列化和反序列化的各API名称也都类似，下面正式介绍Gson如何序列化、反序列化枚举  </p>
<a id="more"></a>
<h5 id="实现JsonSerializer-JsonDeserializer"><a href="#实现JsonSerializer-JsonDeserializer" class="headerlink" title="实现JsonSerializer/JsonDeserializer"></a>实现JsonSerializer/JsonDeserializer</h5><h6 id="序列化及反序列化如何实现"><a href="#序列化及反序列化如何实现" class="headerlink" title="序列化及反序列化如何实现"></a>序列化及反序列化如何实现</h6><p>实现JsonSerializer/JsonDeserializer，在序列化和反序列化时会调用重载的serialize、deserialize方法  </p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonDeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonElement;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonParseException;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonPrimitive;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonSerializationContext;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonSerializer;</span><br><span class="line"></span><br><span class="line">public class TypeSerializer implements JsonDeserializer&lt;<span class="built_in">Type</span>&gt;, JsonSerializer&lt;<span class="built_in">Type</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> public <span class="built_in">Type</span> deserialize(JsonElement json, java.lang.reflect.<span class="built_in">Type</span> typeOfT,</span><br><span class="line">      JsonDeserializationContext context) throws JsonParseException &#123;</span><br><span class="line">    //&#123;<span class="string">"type"</span>:&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"Gson"</span>&#125;&#125;</span><br><span class="line">    /**</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Type</span>.code(<span class="built_in">Integer</span>.valueOf(((JsonObject) json).get(<span class="string">"code"</span>).toString()));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Type</span>.name(((JsonObject) json).get(<span class="string">"name"</span>).toString());</span><br><span class="line">     **/</span><br><span class="line">     </span><br><span class="line">     //&#123;<span class="string">"type"</span>:<span class="number">0</span>&#125;</span><br><span class="line">	 //&#123;<span class="string">"type"</span>:<span class="string">"Gson"</span>&#125;</span><br><span class="line">    /**</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Type</span>.code(json.getAsNumber());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Type</span>.name(json.getAsString());</span><br><span class="line">     **/</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> public JsonElement serialize(<span class="built_in">Type</span> src, java.lang.reflect.<span class="built_in">Type</span> typeOfSrc,</span><br><span class="line">      JsonSerializationContext context) &#123;</span><br><span class="line">      //&#123;<span class="string">"type"</span>:&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"Gson"</span>&#125;&#125;</span><br><span class="line">    /**</span><br><span class="line">     JsonObject jsonObject = new JsonObject();</span><br><span class="line">     jsonObject.addProperty(<span class="string">"code"</span>, src.code());</span><br><span class="line">     jsonObject.addProperty(<span class="string">"name"</span>, src.name());</span><br><span class="line">     <span class="keyword">return</span> jsonObject;</span><br><span class="line">     **/</span><br><span class="line">     </span><br><span class="line">     //&#123;<span class="string">"type"</span>:<span class="number">0</span>&#125;</span><br><span class="line">	 //&#123;<span class="string">"type"</span>:<span class="string">"Gson"</span>&#125;</span><br><span class="line">    /**</span><br><span class="line">    JsonPrimitive jsonPrimitive = new JsonPrimitive(src.code());</span><br><span class="line">    JsonPrimitive jsonPrimitive = new JsonPrimitive(src.name());</span><br><span class="line">    <span class="keyword">return</span> jsonPrimitive;</span><br><span class="line">     **/</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="registerTypeAdapter"><a href="#registerTypeAdapter" class="headerlink" title="registerTypeAdapter"></a>registerTypeAdapter</h5><p>还需要将上面的Serializer注册到Gson中  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">new</span> GsonBuilder()</span><br><span class="line">    .registerTypeAdapter(<span class="keyword">Type</span>.<span class="keyword">class</span>, <span class="built_in">new</span> TypeSerializer())</span><br><span class="line">    .<span class="keyword">create</span>();</span><br></pre></td></tr></table></figure>
<h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>经过以上步骤后就解决了枚举序列化和反序列化问题<br>gson.fromJson时遇到枚举Type类型会调用TypeSerializer中的serialize方法<br>gson.toJson时遇到要解析枚举Type类型时会调用TypeSerializer中的deserialize方法</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gson</tag>
      </tags>
  </entry>
  <entry>
    <title>刷脸支付-人脸比对效率</title>
    <url>/2018/12/06/face-rec-algorithm/</url>
    <content><![CDATA[<p>支付宝、微信刷脸支付时都要求先输入手机号，再刷人脸支付。马上刷脸付输入手机后4位，再刷脸认证支付。<br>都刷脸了，为啥还要输入手机号，不如掏出手机扫一扫。极其不理想<br>这个问题主要由目前人脸识别算法处理方式导致。我们基于传统业务想象中，应当是</p>
<ol>
<li>抓取人脸</li>
<li>提取特征</li>
<li>查询验证数据</li>
<li>支付  </li>
</ol>
<p>如此，果然不再需要手机号。但是“基于人脸特征点的识别算法”，提取的特征并非是唯一数值可供直接比对查询。需要与所有特征点计算以匹配度最高来判断（1：N）。所以真实流程是<br>1.抓取人脸<br>2.提取特征<br>3.查询所有用户特征计算<br>4.获取最匹配数值与阈值比对<br>5.支付<br>如果输入了全的手机号后，就不再有耗时的1：N，而是1：1。<br>以上</p>
<p>推荐<br><a href="/2019/04/23/assert-facepay-dragonfly-by-4/">支付宝怎么敢采用后4位手机号人脸支付</a></p>
<p>—  END  —<br>分享程序员所看、所想、所悟、所望</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>人脸支付</tag>
      </tags>
  </entry>
  <entry>
    <title>修复X转换Time Zone出错问题</title>
    <url>/2019/05/16/fix-Unknown-pattern-character-x/</url>
    <content><![CDATA[<p>IllegalArgumentException Unknown pattern character ‘x’, when using SimpleDateFormat</p>
<p>代码如下：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd'T'HH:mm:ssX"</span>).parse(<span class="string">"2019-05-14T19:00:11+08:00"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在Android 8.0运行没问题，但在5.1及以下会抛“IllegalArgumentException Unknown pattern character ‘x’, when using SimpleDateFormat”，如此看来基本可以认为是版本兼容问题</p>
<a id="more"></a>
<p>首先我们查找文档对于格式化定义，之前文章<a href="/2018/01/03/date-formate-YYYY-in-java/">日期格式化YYYY日期错位</a>中有提到Java中Date and Time Patterns，下面我们再看看Android中java.txt.SimpleDateFormat中的<br>Date and Time Patterns</p>
<p>Date and Time Patterns  </p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Meaning</th>
<th>Kind</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>D</td>
<td>Day in year</td>
<td>Number</td>
<td>189</td>
</tr>
<tr>
<td>E</td>
<td>Day of week</td>
<td>Text</td>
<td>E/EE/EEE:Tue,EEEE:Tuesday,EEEEE:T</td>
</tr>
<tr>
<td>F</td>
<td>Day of week in month</td>
<td>Number</td>
<td>2(2nd Wed inJuly)</td>
</tr>
<tr>
<td>G</td>
<td>Era designator</td>
<td>Text</td>
<td>AD</td>
</tr>
<tr>
<td>H</td>
<td>Hour in day (0-23)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td>K</td>
<td>Hour in am/pm (0-11)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td>L</td>
<td>stand-alone month</td>
<td>Text</td>
<td>L:1 LL:01 LLL:Jan LLLL:January LLLLL:J</td>
</tr>
<tr>
<td>M</td>
<td>Month in year</td>
<td>Text</td>
<td>M:1 MM:01 MMM:Jan MMMM:January MMMMM:J</td>
</tr>
<tr>
<td>S</td>
<td>fractional seconds</td>
<td>Number</td>
<td>978</td>
</tr>
<tr>
<td>W</td>
<td>Week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td>Z</td>
<td>time zone (RFC 822)</td>
<td>time zone</td>
<td>Z/ZZ/ZZZ:-0800 ZZZZ:GMT-08:00 ZZZZZ:-08:00</td>
</tr>
<tr>
<td>a</td>
<td>Am/pm marker</td>
<td>Text</td>
<td>PM</td>
</tr>
<tr>
<td>c</td>
<td>stand-alone day of week</td>
<td>Text</td>
<td>c/cc/ccc:Tue, cccc:Tuesday, ccccc:T</td>
</tr>
<tr>
<td>d</td>
<td>Day in month</td>
<td>Number</td>
<td>10</td>
</tr>
<tr>
<td>h</td>
<td>Hour in am/pm (1-12)</td>
<td>Number</td>
<td>12</td>
</tr>
<tr>
<td>k</td>
<td>Hour in day (1-24)</td>
<td>Number</td>
<td>24</td>
</tr>
<tr>
<td>m</td>
<td>Minute in hour</td>
<td>Number</td>
<td>30</td>
</tr>
<tr>
<td>s</td>
<td>Second in minute</td>
<td>Number</td>
<td>55</td>
</tr>
<tr>
<td>w</td>
<td>Week in year</td>
<td>Number</td>
<td>27</td>
</tr>
<tr>
<td>y</td>
<td>Year</td>
<td>Number</td>
<td>yy:10 y/yyy/yyyy:2010</td>
</tr>
<tr>
<td>z</td>
<td>time zone</td>
<td>Time Zone</td>
<td>z/zz/zzz:PST zzzz:Pacific Standard Time</td>
</tr>
<tr>
<td>‘</td>
<td>escape for text</td>
<td>Delimiter</td>
<td>‘Date=’:Date=</td>
</tr>
<tr>
<td>‘ ‘</td>
<td>single quote</td>
<td>Literal</td>
<td>‘o’’clock’:o’clock</td>
</tr>
</tbody>
</table>
<p>从中我们看到X和Z都是time zone，改成Z即可。<br>Android中的SimpleDateFormat也是使用Java的api<br>Android 5.0开始采用了JDK 7，对应应该已经有X了，见<a href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html" target="_blank" rel="noopener">SimpleDateFormat</a><br>但是我们从Android 22的源码中可以看到<br><figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormat</span> <span class="keyword">extends</span> <span class="title">DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4774881970558875024</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 'L' and 'c' are ICU-compatible extensions for stand-alone month and stand-alone weekday.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PATTERN_CHARS = <span class="string">"GyMdkHmsSEDFwWahKzZLc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The index of 'Z' in the PATTERN_CHARS string. This pattern character is supported by the RI,</span></span><br><span class="line">    <span class="comment">// but has no corresponding public constant.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RFC_822_TIMEZONE_FIELD = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The index of 'L' (cf. 'M') in the PATTERN_CHARS string. This is an ICU-compatible extension</span></span><br><span class="line">    <span class="comment">// necessary for correct localization in various languages (http://b/2633414).</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STAND_ALONE_MONTH_FIELD = <span class="number">19</span>;</span><br><span class="line">    <span class="comment">// The index of 'c' (cf. 'E') in the PATTERN_CHARS string. This is an ICU-compatible extension</span></span><br><span class="line">    <span class="comment">// necessary for correct localization in various languages (http://b/2633414).</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STAND_ALONE_DAY_OF_WEEK_FIELD = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DateFormatSymbols formatData;</span><br></pre></td></tr></table></figure></p>
<p>Android 28<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">DateFormatSymbols</span> <span class="symbol">implements</span> <span class="symbol">Serializable, <span class="symbol">Cloneable</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlocalized date-time pattern characters. For example: 'y', 'd', etc.</span></span><br><span class="line"><span class="comment">     * All locales use the same these unlocalized pattern characters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// Android-changed: Add 'c' (standalone day of week), 'b' (day period),</span></span><br><span class="line">    <span class="comment">//   'B' (flexible day period)</span></span><br><span class="line">    static <span class="keyword">final</span> String  patternChars = <span class="string">"GyMdkHmsSEDFwWahKzZYuXLcbB"</span>;</span><br></pre></td></tr></table></figure></p>
<p>重点：<br>static final String PATTERN_CHARS = “GyMdkHmsSEDFwWahKzZLc”;<br>static final String  patternChars = “GyMdkHmsSEDFwWahKzZYuXLcbB”;</p>
<p>源码里可以看到导致问题原因，但是为何Android 22中的java代码与Java 7中不一致呢？</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SimpleDateFormat</tag>
        <tag>Time Zone</tag>
      </tags>
  </entry>
  <entry>
    <title>301重定向导致不能正常访问</title>
    <url>/2017/12/07/fix-301-redirect/</url>
    <content><![CDATA[<p>事件通报中称由于挂维护跳转301后，恢复服务，app WebView访问缓存仍然停留在公司官方网页，无法正确访问。<br>参考<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">Http Status Code Definitions</a><br>究其原因可以知道默认情况下大家都必须遵守规范，才能不乱，并在这套规则中永久玩下去。<br>如果遇到类似情况，直接分析请求头</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>301</tag>
        <tag>302</tag>
        <tag>Http Status Code</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FeignClient上传文件</title>
    <url>/2019/11/22/feign-upload-file/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>使用FeignClient上传文件时居然失败了？意外，不敢相信SpringCloud中的组件不可能不支持该功能<br>版本<br>SpringCloud: Dalston.Release<br>feign: 9.4.0  </p>
<p>期间有各种报错，如：<br>FileUploadException: the request was rejected because no multipart boundary was found<br>MissingServletRequestPartException: Required request part ‘file’ is not present  </p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为feign 9.4.0默认并不支持multipart/form（文件上传），需要手动引入feign-form、feign-form-spring  </p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>引入feign-form依赖 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改造上传文件FeignClient<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(</span><br><span class="line">    name = <span class="string">"file-upload-service"</span>,</span><br><span class="line">    configuration = FileUploadServiceClient.MultipartSupportConfig<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FileUploadServiceClient</span> <span class="keyword">extends</span> <span class="title">IFileUploadServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartSupportConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignFormEncoder</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 支持文件上传FormEncoder及之前默认的其它Encoder</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此已可用   </p>
<h4 id="不同版本选择"><a href="#不同版本选择" class="headerlink" title="不同版本选择"></a>不同版本选择</h4><p>上文中采用的feign-form版本是与feign版本是对应的。如果版本对应错误，是不兼容的。 </p>
<table>
<thead>
<tr>
<th>spring-cloud</th>
<th>feign</th>
<th>feign-form</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dalston</td>
<td>9.4.0</td>
<td>3.5.0以前（20191122最新：3.4.1）</td>
</tr>
<tr>
<td>Greenwich</td>
<td>10.4.0</td>
<td>3.5.0以后（20191122最新：3.8.0）</td>
</tr>
</tbody>
</table>
<h4 id="MultipartFile接收时找不到问题"><a href="#MultipartFile接收时找不到问题" class="headerlink" title="MultipartFile接收时找不到问题"></a>MultipartFile接收时找不到问题</h4><p>MissingServletRequestPartException: Required request part ‘file’ is not present<br>正常情况下可能是指定的文件名不对，其它的可能不谈，只谈我在使用过程中遇到问题<br>用户端：  上传文件<br>Server1：  接收用户上传文件<br>Server2：  接收服务器端1上传文件<br>1、Server2代码示例  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(value = <span class="string">"upload"</span>, method = RequestMethod.POST,</span><br><span class="line">        consumes = &#123;MediaType.MULTIPART_FORM_DATA_VALUE&#125;)</span><br><span class="line"><span class="variable">@ResponseBody</span></span><br><span class="line">public void checkin(<span class="variable">@RequestPart</span>(<span class="string">"file"</span>) MultipartFile file) &#123;</span><br><span class="line">			<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、Server1代码示例  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(value = <span class="string">"upload"</span>, method = RequestMethod.POST,</span><br><span class="line">        consumes = &#123;MediaType.MULTIPART_FORM_DATA_VALUE&#125;)</span><br><span class="line"><span class="variable">@ResponseBody</span></span><br><span class="line">public RespBody checkin(<span class="variable">@RequestPart</span>(<span class="string">"file1"</span>) MultipartFile file1) &#123;</span><br><span class="line">			<span class="selector-tag">Server2FeignClient</span><span class="selector-class">.upload</span>(file1);</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">RespBody</span><span class="selector-class">.ok</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Server2FeignClient关键代码</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">void</span> <span class="selector-tag">upload</span>(<span class="variable">@RequestPart</span>(<span class="string">"file"</span>) MultipartFile file);</span><br></pre></td></tr></table></figure>
<p>结果就是Server2可以接收到请求，但是收不到file文件，此时我们查看Server1中的MultipartFile对象发现，虽然已经在Server2FeignClient中设置MultipartFile 的key为file，但是Server2收到的仍然是file1。</p>
<p>解决方法:  通过反映方式将MultipartFile的fieldName改为Server2需要的key</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Field partField = multipartFile.get<span class="constructor">Class()</span>.get<span class="constructor">DeclaredField(<span class="string">"part"</span>)</span>;</span><br><span class="line">partField.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line">ApplicationPart part = (ApplicationPart) partField.get(multipartFile);</span><br><span class="line">Field fileItemField = part.get<span class="constructor">Class()</span>.get<span class="constructor">DeclaredField(<span class="string">"fileItem"</span>)</span>;</span><br><span class="line">fileItemField.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line">org.apache.tomcat.util.http.fileupload.disk.DiskFileItem fileItem = (org.apache.tomcat.util.http.fileupload.disk.DiskFileItem) fileItemField.get(part);</span><br><span class="line">fileItem.set<span class="constructor">FieldName(<span class="string">"file"</span>)</span>;</span><br></pre></td></tr></table></figure>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p><a href="https://github.com/OpenFeign/feign-form" target="_blank" rel="noopener">https://github.com/OpenFeign/feign-form</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>FeignClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Android正确获取IP及MAC</title>
    <url>/2017/04/06/get-correct-ip-address/</url>
    <content><![CDATA[<p>每个产品都会统计用户终端信息。稍不注意就会经我们的手造成公司得到的数据错误，造成分析甚至战略错误。（假装是程序猿缔造了世界）  </p>
<p>设备：Oppo R9s、vivo X9<br>系统：Android 6.0.2<br>网络：4G<br>错误IP和MAC分别为  </p>
<font color="red"><br>fe80::188c:24ff:fe49:8e54%dummy0<br>02:00:00:00:00:00<br></font>

<p>错误代码：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static String get<span class="constructor">LocalIpAddress()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    for (</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; networkInterfaces = <span class="module-access"><span class="module"><span class="identifier">NetworkInterface</span>.</span></span>get<span class="constructor">NetworkInterfaces()</span>;</span><br><span class="line">        networkInterfaces.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">      NetworkInterface networkInterface = networkInterfaces.next<span class="constructor">Element()</span>;</span><br><span class="line">      for (Enumeration&lt;InetAddress&gt; inetAddresses = networkInterface.get<span class="constructor">InetAddresses()</span>;</span><br><span class="line">          inetAddresses.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">        InetAddress inetAddress = inetAddresses.next<span class="constructor">Element()</span>;</span><br><span class="line">        <span class="keyword">if</span> (!inetAddress.is<span class="constructor">LoopbackAddress()</span>) &#123;</span><br><span class="line">          String ipAddress = inetAddress.get<span class="constructor">HostAddress()</span>.<span class="keyword">to</span><span class="constructor">UpperCase()</span>;</span><br><span class="line">          return ipAddress;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (SocketException e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后根据搜索结果认为，直接将“%dummy0%2”去掉结果即为ipv6地址。不管你信不信反正当时我是信了，后来脑海里有一个声音时不时告诉我这不对，世界不是这样的。（程序猿后遗症）<br><a id="more"></a></p>
<h4 id="链路地址、回送地址-Link-local-address、Loopback-address"><a href="#链路地址、回送地址-Link-local-address、Loopback-address" class="headerlink" title="链路地址、回送地址(Link-local address、Loopback address)"></a>链路地址、回送地址(Link-local address、Loopback address)</h4><p>上面的代码中我们屏蔽了Loopback address。并且获得的fe80::188c:24ff:fe49:8e54确为IPv6，但是前缀为fe80::/64都是链路本地地址，不是我们真正想要的ip。IPv6几种地址类型、概念，详细见<a href="http://baike.baidu.com/link?url=iCSUzfkaTpmskK6k2ybPoCy6-dr28dzlAXY1ED8nszM6n-vs3lRgSEhUactfzgMuyIQrmcCNGUUx9bwdReOMFK" target="_blank" rel="noopener">IPv6</a>  </p>
<h4 id="解锁获取IP正确姿势"><a href="#解锁获取IP正确姿势" class="headerlink" title="解锁获取IP正确姿势"></a>解锁获取IP正确姿势</h4><p>经过上面度娘普及姿势得知Link-local address、Loopback address不是我们想要的IP，于是干掉它们，改造后代码如下（仅需要注意注释后面那一句）<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static String get<span class="constructor">LocalIpAddress()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    for (</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; networkInterfaces = <span class="module-access"><span class="module"><span class="identifier">NetworkInterface</span>.</span></span>get<span class="constructor">NetworkInterfaces()</span>;</span><br><span class="line">        networkInterfaces.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">      NetworkInterface networkInterface = networkInterfaces.next<span class="constructor">Element()</span>;</span><br><span class="line">      for (Enumeration&lt;InetAddress&gt; inetAddresses = networkInterface.get<span class="constructor">InetAddresses()</span>;</span><br><span class="line">          inetAddresses.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">        InetAddress inetAddress = inetAddresses.next<span class="constructor">Element()</span>;</span><br><span class="line">        <span class="comment">//过滤Loopback address, Link-local address</span></span><br><span class="line">        <span class="keyword">if</span> (!inetAddress.is<span class="constructor">LoopbackAddress()</span><span class="operator"> &amp;&amp; </span>!inetAddress.is<span class="constructor">LinkLocalAddress()</span>) &#123;</span><br><span class="line">          return inetAddress.get<span class="constructor">HostAddress()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (SocketException e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>OPPO R9s Android 6.0.1运行结果：  </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>wifi</td>
<td>172.27.35.3</td>
</tr>
<tr>
<td>流量</td>
<td>100.58.248.64</td>
</tr>
</tbody>
</table>
<h4 id="扩展-解锁6-0后获取正确MAC姿势"><a href="#扩展-解锁6-0后获取正确MAC姿势" class="headerlink" title="扩展-解锁6.0后获取正确MAC姿势"></a>扩展-解锁6.0后获取正确MAC姿势</h4><p>dummy0、lo、p2p0、rev_rmnet0、rev_rmnet1、rev_rmnet2、rev_rmnet3、rmnet0、rmnet1、rmnet2、rmnet3、rmnet_smux0、sit0、wlan0等等，我们发现有很多这样的名称。我的理解是除了wlan0是与电脑一样的真实无线网卡外，其它全是虚拟网卡，用于内部通信。<br>在6.0之后，Android 移除了对设备本地硬件标识符的编程访问权。使用WifiInfo.getMacAddress() 、BluetoothAdapter.getAddress() 返回值为常量02:00:00:00:00:00。有了上面通过Java api获取IP地址的经验，获取mac地址是否也可以在这里使用。上代码<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static String get<span class="constructor">Mac()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    for (</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; networkInterfaces = <span class="module-access"><span class="module"><span class="identifier">NetworkInterface</span>.</span></span>get<span class="constructor">NetworkInterfaces()</span>;</span><br><span class="line">        networkInterfaces.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">      NetworkInterface networkInterface = networkInterfaces.next<span class="constructor">Element()</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"wlan0"</span>.equals(networkInterface.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">        byte<span class="literal">[]</span> hardwareAddress = networkInterface.get<span class="constructor">HardwareAddress()</span>;</span><br><span class="line">        <span class="keyword">if</span> (hardwareAddress<span class="operator"> == </span>null<span class="operator"> || </span>hardwareAddress.length<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">          continue;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">        for (byte b : hardwareAddress) &#123;</span><br><span class="line">          buf.append(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"%02X:"</span>, b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buf.length<span class="literal">()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          buf.delete<span class="constructor">CharAt(<span class="params">buf</span>.<span class="params">length</span>()</span> - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String mac = buf.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">        return mac;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (SocketException e) &#123;</span><br><span class="line">    e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>OPPO R9s Android 6.0.1运行结果：  </p>
<table>
<thead>
<tr>
<th>代码类型</th>
<th>MAC</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>WifiInfo</td>
<td>02:00:00:00:00:00</td>
<td>android.permission.ACCESS_WIFI_STATE</td>
</tr>
<tr>
<td>NetworkInterface</td>
<td>B8:37:65:2D:23:ED</td>
<td>android.permission.INTERNET</td>
</tr>
</tbody>
</table>
<p>这里面涉及到挺多网络知识，现在还是比较懵逼<br>dummy0、lo、p2p0、rev_rmnet0、rev_rmnet1、rev_rmnet2、rev_rmnet3、rmnet0、rmnet1、rmnet2、rmnet3、rmnet_smux0、sit0到底咋回事儿？</p>
<h4 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h4><p>大牛老张，前公司上司，全栈。最近搞了一个有些性感的产品<a href="http://wkok.me/" target="_blank" rel="noopener">图交</a><br>硬件玩家，网络牛人莽哥</p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://baike.baidu.com/link?url=iCSUzfkaTpmskK6k2ybPoCy6-dr28dzlAXY1ED8nszM6n-vs3lRgSEhUactfzgMuyIQrmcCNGUUx9bwdReOMFK" target="_blank" rel="noopener">IPv6</a><br><a href="https://developer.android.google.cn/reference/java/net/InetAddress.html" target="_blank" rel="noopener">InetAddress API</a><br><a href="https://developer.android.google.cn/about/versions/marshmallow/android-6.0-changes.html?hl=zh-cn#behavior-hardware-id" target="_blank" rel="noopener">硬件标识符访问权</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ip</tag>
        <tag>02:00:00:00:00:00</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle查看解决依赖问题-记录Butterknife8.5.1</title>
    <url>/2017/05/11/gradle-dependencies/</url>
    <content><![CDATA[<p>相信每个人都遇到过重复引用库、冲突的问题。如support-v4、appcompat-v7、NineOldAndroids很容易被多次引用。<br>前同事在临上线前打包遇到merg出错<br><img src="/2017/05/11/gradle-dependencies/duplicate.jpeg" alt="TransformException"><br>How fix?<br><a id="more"></a><br>最近发现一个更快查看依赖问题方法  </p>
<h4 id="第一种快捷查看依赖问题命令"><a href="#第一种快捷查看依赖问题命令" class="headerlink" title="第一种快捷查看依赖问题命令"></a>第一种快捷查看依赖问题命令</h4><ul>
<li>gradle -q app:dependencies</li>
</ul>
<h4 id="第二种各module逐步查看"><a href="#第二种各module逐步查看" class="headerlink" title="第二种各module逐步查看"></a>第二种各module逐步查看</h4><p>一个一个module检查过去没有，这时候就有可能是第三方库引用了，可是第三方库那么多，How do?头疼，先换个姿势找到哪两个jar导致重复。通过打开文件发现DisplayManagerCompat类属于哪两个jar包<br><img src="/2017/05/11/gradle-dependencies/multi.jpeg" alt="Open class"><br><img src="/2017/05/11/gradle-dependencies/multi_class.jpeg" alt="jar"><br>可以确定出问题的jar为support-compat-25.1.0和support-v4-22.2.0，我们自己有依赖compat、v4 22.2.0，现在要找出冲突的compat25.1是哪个库添加的（前戏太长，我们要直奔主题）。使用maven时可以查看依赖关系，没理由要取代maven的gradle不支持。  </p>
<ul>
<li>gradle projects<br>先查看有哪些项目<br><img src="/2017/05/11/gradle-dependencies/projects.jpeg" alt="projects">   </li>
<li>gradle project:dependencies<br>其中project指上面projects获得的project，如IMKit  gradle IMKit:dependencies<br><img src="/2017/05/11/gradle-dependencies/dependencies.jpeg" alt="dependencies"><br>从图中可以看到是butterknife8.5.1依赖了compat25.1.0。  </li>
</ul>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="添加exclude法"><a href="#添加exclude法" class="headerlink" title="添加exclude法"></a>添加exclude法</h5><p> 修改compile添加exclude后解决<br> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">compile (<span class="string">"com.jakewharton:butterknife:8.5.1"</span>) &#123;</span><br><span class="line">     exclude<span class="built_in"> group </span>: <span class="string">'com.android.support'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="Grovvy脚本修改版本号方法"><a href="#Grovvy脚本修改版本号方法" class="headerlink" title="Grovvy脚本修改版本号方法"></a>Grovvy脚本修改版本号方法</h5><p>在其存在冲突的module中的build.gradle文件中加入下面代码，原理就是通过遍历所有依赖，并修改指定库的版本号</p>
<p>其中<br>requested.group == ‘com.android.support’ com.android.support表示要修改的依赖库</p>
<p>details.useVersion ‘27.1.1’    27.1.1表示要修改的版本号<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">requested</span></span> = details.requested</span><br><span class="line">        if (requested.group == <span class="string">'com.android.support'</span>) &#123;</span><br><span class="line">            if (!requested.name.startsWith(<span class="string">"multidex"</span>)) &#123;</span><br><span class="line">                details.useVersion <span class="string">'27.1.1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li><p>强制指定低版本force<br>同一个grop的库多个引用时，会自动取最版本最高的，即我们通过gradle dependencies查看后的标(*)或者 -&gt; 后的版本。<br>但是我们有时候需要覆盖使用为低版本，应用场景，使用React Native时想指定‘com.android.support:appcompat-v7:23.0.1’可以修改为  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">compile</span> (<span class="string">"com.android.support:appcompat-v7:23.0.1"</span>) &#123;</span><br><span class="line">     <span class="attribute">force</span> = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看pom依赖关系<br>可以通过gradle命令查看依赖关系，那么我们写在build.gradle里面的依赖关系一定也有地方指定。每个工程里面指定gradle，gradle查找依赖库。根据这个逻辑，查看项目文件夹下的.idea-&gt;libraries-&gt;butterknife_8_5_1.xml、support_compat_25_1_0.xml、support_v4_22_2_0.xml，其中butterknife_8_5_1.xml内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"libraryTable"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">library</span> <span class="attr">name</span>=<span class="string">"butterknife-8.5.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CLASSES</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">"file://$PROJECT_DIR$/regClientDoc/build/intermediates/exploded-aar/com.jakewharton/butterknife/8.5.1/res"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">"jar://$PROJECT_DIR$/regClientDoc/build/intermediates/exploded-aar/com.jakewharton/butterknife/8.5.1/jars/classes.jar!/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">CLASSES</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">JAVADOC</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SOURCES</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">"jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/com.jakewharton/butterknife/8.5.1/16724f486072e3ab970fc47ccff6f9013061fa6/butterknife-8.5.1-sources.jar!/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SOURCES</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">library</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>根据source文件上级目录进入，找到butterknife-8.5.1.pom文件，内容如下： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jakewharton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>butterknife<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>aar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Butterknife<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Field and method binding for Android views.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/JakeWharton/butterknife/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jakewharton<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jake Wharton<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:git://github.com/JakeWharton/butterknife.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:ssh://git@github.com/JakeWharton/butterknife.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/JakeWharton/butterknife/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jakewharton<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>butterknife-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.android.support<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>support-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>25.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 罪魁祸首  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.android.support<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>support-compat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>25.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到其中有依赖support-compat25.1.0    </p>
<ul>
<li><a href="https://docs.gradle.org/current/userguide/dependency_management.html" target="_blank" rel="noopener">exclude的其它用法</a>  </li>
</ul>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://developer.android.google.cn/studio/build/dependencies.html" target="_blank" rel="noopener">Add Build Dependencies</a><br><a href="https://docs.gradle.org/current/userguide/dependency_management.html" target="_blank" rel="noopener">Dependency Management</a><br><a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="noopener">Gradle Task</a> </p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>头文件和命名空间是否必须同时引用？</title>
    <url>/2019/01/11/headerfiles-namespace/</url>
    <content><![CDATA[<p>c++中开始的两行一般为<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><br>但也可以使用std::cin方式显示指定namespace。那么不使用”using namespace std;”是否可以直接采用std::cin调用呢？试验后却发现会报错。    </p>
<p>头文件iostream中定义了std namespace，如果不用using namespace std，则cin cout不可见？目前未搞懂，先记录<br><a id="more"></a><br>iostream源码如下：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iostream standard header for Microsoft</span></span><br><span class="line"><span class="meta">#pragma once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _IOSTREAM_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IOSTREAM_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RC_INVOKED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;istream&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#pragma pack(push,_CRT_PACKING)</span></span><br><span class="line"> <span class="meta">#pragma warning(push,3)</span></span><br><span class="line"> <span class="meta">#pragma push_macro(<span class="meta-string">"new"</span>)</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">undef</span> new</span></span><br><span class="line"><span class="variable">_STD_BEGIN</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> _M_CEE_PURE</span></span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern istream cin, *<span class="variable">_Ptr_cin</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern ostream cout, *<span class="variable">_Ptr_cout</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern ostream cerr, *<span class="variable">_Ptr_cerr</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern ostream clog, *<span class="variable">_Ptr_clog</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern wistream wcin, *<span class="variable">_Ptr_wcin</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern wostream wcout, *<span class="variable">_Ptr_wcout</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern wostream wcerr, *<span class="variable">_Ptr_wcerr</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern wostream wclog, *<span class="variable">_Ptr_wclog</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* _M_CEE_PURE */</span></span></span><br><span class="line">		<span class="comment">// OBJECTS</span></span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> istream cin, *<span class="variable">_Ptr_cin</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> ostream cout, *<span class="variable">_Ptr_cout</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> ostream cerr, *<span class="variable">_Ptr_cerr</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> ostream clog, *<span class="variable">_Ptr_clog</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> wistream wcin, *<span class="variable">_Ptr_wcin</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> wostream wcout, *<span class="variable">_Ptr_wcout</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> wostream wcerr, *<span class="variable">_Ptr_wcerr</span>;</span><br><span class="line"><span class="variable">__PURE_APPDOMAIN_GLOBAL</span> extern <span class="variable">_CRTDATA2</span> wostream wclog, *<span class="variable">_Ptr_wclog</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// CLASS _Winit</span></span><br><span class="line">class <span class="variable">_CRTIMP2_PURE</span> <span class="variable">_Winit</span> &#123;</span><br><span class="line">public:</span><br><span class="line">	<span class="variable">__thiscall</span> <span class="variable">_Winit</span>();</span><br><span class="line">	<span class="variable">__thiscall</span> ~<span class="variable">_Winit</span>() <span class="variable">_NOEXCEPT</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="variable">__PURE_APPDOMAIN_GLOBAL</span> static int <span class="variable">_Init_cnt</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _M_CEE_PURE */</span></span></span><br><span class="line"><span class="variable">_STD_END</span></span><br><span class="line"> <span class="meta">#pragma pop_macro(<span class="meta-string">"new"</span>)</span></span><br><span class="line"> <span class="meta">#pragma warning(pop)</span></span><br><span class="line"> <span class="meta">#pragma pack(pop)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* RC_INVOKED */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _IOSTREAM_ */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) by P.J. Plauger. All rights reserved.</span></span><br><span class="line"><span class="comment"> * Consult your license regarding permissions and restrictions.</span></span><br><span class="line"><span class="comment">V6.50:0009 */</span></span><br></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/libing_zeng/article/details/81032978" target="_blank" rel="noopener">[C++]头文件(Header Files)和命名空间(Namespace)</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>头文件</tag>
        <tag>命名空间</tag>
      </tags>
  </entry>
  <entry>
    <title>一个万能算法压缩所有图片？</title>
    <url>/2017/06/06/how-to-compress-image/</url>
    <content><![CDATA[<p>图片越来越多，相素越来越高，导致越来越大的图片必然绕不开压缩。<br>作为基础功能的图片压缩，本身问题却很多。如：  </p>
<ul>
<li>android压缩下来比iOS大，质量却低  </li>
<li>h5压缩图片导致崩溃  </li>
<li>微信号每天上传图片限制10w张  </li>
<li>压缩后图片变形、不清晰<br>各路大神提供了诸多解决方案，<br>解决质量速度问题的<a href="https://github.com/libjpeg-turbo/libjpeg-turbo" target="_blank" rel="noopener">libjpeg-turbo</a>，android7.0之后也采用该库；<br>解决裁剪问题的<a href="https://github.com/Yalantis/uCrop" target="_blank" rel="noopener">uCrop</a>；<br>压缩策略<a href="https://github.com/Curzibn/Luban" target="_blank" rel="noopener">Luban</a>；<br>压缩质量、裁剪技术方案都是无需质疑选型使用就好。那么压缩策略呢？<br><strong>Luban（鲁班） —— Android图片压缩工具，仿微信朋友圈压缩策略。</strong>Luban可能是最接近微信朋友圈的图片压缩算法，有微信强大的用户量背书，我们是否可以在项目中直接使用该策略呢？<br>答案是NO<br>压缩策略其实与业务需求关系非常紧密。比如聊天时、展示文章等这个算法都特别合适，一般情况下该算法压缩出来的图片不大且可以被用户清晰辨识，如果看不清楚，可以点击下载查看原图。但是如果是拍证件，如身份证、银行卡这种就不需要。<br>废话太多，写不下去了。<font color="red"><strong>总之，没有万能算法，要做的是分析自己的业务应用场景。</strong></font></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>libjpeg-turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样使用DataX将HBase数据导入到MySQL</title>
    <url>/2023/08/04/how-to-hbase-to-mysql-on-datax/</url>
    <content><![CDATA[<p>有需求使用DataX将HBase表中数据迁移到MySQL中，有的表在Phoenix中定义，使用hbase20xsqlreader读取。有的没有在Phoenix中定义，数据是动态插入，列是不固定的。</p>
<ul>
<li>hbase20xsqlreader，读取Phoenix</li>
<li>hbase11xreader，读取HBase</li>
</ul>
<p>不管读取HBase还是Phoenix都要求填写column，但是可以写sql占位，传进来。</p>
<p>我这里由于业务原因就没有使用占位符的方式传递。</p>
<p>现在的业务需求是我HBase横表迁移到MySQL纵表中。</p>
<p>动态列中的列名有在MySQL表中记录，所以实现流程就是</p>
<ol>
<li>shell 脚本调用mysql读取出要在HBase中读取的列</li>
<li>循环生成hbase11xreader读取-写入txt的DataX json</li>
<li>调用DataX执行上面的json文件导出txt</li>
<li>循环txt为每行加入MySQL要插入的列key</li>
<li>生成读取txt，写入MySQL</li>
</ol>
<a id="more"></a>
<p>代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL连接信息</span></span><br><span class="line">DB_USER=""</span><br><span class="line">DB_PASS=""</span><br><span class="line">DB_HOST=""</span><br><span class="line">DB_NAME=""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行的SQL语句</span></span><br><span class="line">SQL_QUERY="SELECT columnKey,otherColumn FROM KV;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行SQL并将结果存储到关联数组</span></span><br><span class="line">result=($(mysql -u$&#123;DB_USER&#125; -p$&#123;DB_PASS&#125; -h$&#123;DB_HOST&#125; -D$&#123;DB_NAME&#125; -N -B -e "$&#123;SQL_QUERY&#125;"))</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历结果，生成文件</span></span><br><span class="line">for ((i=0; i&lt;$&#123;#result[@]&#125;; i+=2)); do</span><br><span class="line">    columnKey=$&#123;result[i]&#125;</span><br><span class="line">    otherColumn=$&#123;result[i+1]&#125;</span><br><span class="line">    </span><br><span class="line">    # 生成JSON内容</span><br><span class="line">    json_content="&#123;</span><br><span class="line">        \"job\": &#123;</span><br><span class="line">            \"setting\": &#123;</span><br><span class="line">                \"speed\": &#123;</span><br><span class="line">                    \"channel\": 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            \"content\": [</span><br><span class="line">                &#123;</span><br><span class="line">                    \"reader\": &#123;</span><br><span class="line">                        \"name\": \"hbase11xreader\",</span><br><span class="line">                        \"parameter\": &#123;</span><br><span class="line">                            \"hbaseConfig\": &#123;</span><br><span class="line">                                \"hbase.zookeeper.quorum\": \"localhost\"</span><br><span class="line">                            &#125;,</span><br><span class="line">                            \"table\": \"Table\",</span><br><span class="line">                            \"encoding\": \"utf-8\",</span><br><span class="line">                            \"mode\": \"normal\",</span><br><span class="line">                            \"column\": [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    \"name\": \"cf: column1\",</span><br><span class="line">                                    \"type\": \"string\"</span><br><span class="line">                                &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                    \"name\": \"cf: column2\",</span><br><span class="line">                                    \"type\": \"date\",</span><br><span class="line">                                    \"format\":\"yyyy-MM-dd HH:mm:ss\"</span><br><span class="line">                                &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                    \"name\": \"cf: $&#123;columnKey&#125;\",</span><br><span class="line">                                    \"type\": \"string\"</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            \"range\": &#123;</span><br><span class="line">                                \"startRowkey\": \"\",</span><br><span class="line">                                \"endRowkey\": \"\",</span><br><span class="line">                                \"isBinaryRowkey\": true</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    \"writer\": &#123;</span><br><span class="line">                        \"name\": \"txtfilewriter\",</span><br><span class="line">                        \"parameter\": &#123;</span><br><span class="line">                            \"path\": \"datax_trans_file/tmp\",</span><br><span class="line">                            \"fileName\": \"dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;\",</span><br><span class="line">                            \"writeMode\": \"truncate\",</span><br><span class="line">                            \"fieldDelimiter\": \"|\"</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;"</span><br><span class="line">    </span><br><span class="line">    # 将JSON内容写入文件</span><br><span class="line">    echo "$json_content" &gt; "datax_trans_file/dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;_2txt.json"</span><br><span class="line"></span><br><span class="line">    # 执行datax 生成txt文件</span><br><span class="line">    dataxtool/datax/bin/datax.py datax_trans_file/dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;_2txt.json</span><br><span class="line">    </span><br><span class="line">     # 读出对应txt 插入统计编码和名称</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出txt文件列表 插入数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历指定目录下的匹配文件，并处理文件内容</span></span><br><span class="line">for file in datax_trans_file/tmp/dataCustom_*; do</span><br><span class="line">    if [[ -f "$file" ]]; then</span><br><span class="line">        # 提取otherColumn和columnKey</span><br><span class="line">        filename=$(basename "$file")</span><br><span class="line">        IFS="_" read -ra parts &lt;&lt;&lt; "$filename"</span><br><span class="line">        columnKey="$&#123;parts[1]&#125;"</span><br><span class="line">        otherColumn="$&#123;parts[2]&#125;"</span><br><span class="line"></span><br><span class="line">          # 为每一行添加信息</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            echo "$line|$columnKey|$otherColumn|1"</span><br><span class="line">        done &lt; "$file" &gt; "$file.tmp"</span><br><span class="line"></span><br><span class="line">        # 将临时文件替换原文件</span><br><span class="line">        mv "$file.tmp" "$file"</span><br><span class="line"></span><br><span class="line">        echo "Added info to: $file"</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行写入mysql</span></span><br><span class="line">dataxtool/datax/bin/datax.py datax_trans_file/dataCustom2mysql.json</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>DataX</tag>
        <tag>HBase</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>不动态创建链接情况下在Firebase Dynamic Link获取动态参数</title>
    <url>/2023/03/05/how-to-custom-parameter-in-Dynamic-Link/</url>
    <content><![CDATA[<p>在使用Firebase的Dynamic Links做运营时，需要在链接中带去不同的参数，APP做不同的响应。如，在链接中带商品ID，用户点击不同链接进入不同商品详情页。Firebase中有两种方法可以实现。<br>1、创建动态链接<br><a href="https://firebase.google.com/docs/dynamic-links/create-links?hl=zh-cn" target="_blank" rel="noopener">创建动态链接-简介</a><br>2、通过<a href="https://firebase.google.com/docs/dynamic-links/create-manually?hl=zh-cn#parameters" target="_blank" rel="noopener">动态链接参数</a>来实现不创建动态链接APP接收自定义参数目的。缺点就是短链接变成了长链接。<br>下面看看做实验的demo<br>这是之前建立的链接<br><img src="/2023/03/05/how-to-custom-parameter-in-Dynamic-Link/deeplink_detail.png" alt="链接详情"><br><a id="more"></a><br>我们希望在APP中获取参数，如<br>title=How to custom parmeter the Dynamic Link<br>articleLink=<a href="https://console.firebase.google.com/project/test-c67b6/durablelinks/details/https:~2F~2Fcustomparmeter.page.link~2F6SuK" target="_blank" rel="noopener">https://console.firebase.google.com/project/test-c67b6/durablelinks/details/https:~2F~2Fcustomparmeter.page.link~2F6SuK</a><br>那我们需要在链接中给link添加想要加的参数<br><img src="/2023/03/05/how-to-custom-parameter-in-Dynamic-Link/link_parameter.png" alt="自定义参数规则"></p>
<p>效果<br>链接：<br><a href="https://customparmeter.page.link/?link=https://blog.520wa.com?title=How" target="_blank" rel="noopener">https://customparmeter.page.link/?link=https://blog.520wa.com?title=How</a> to custom parmeter the Dynamic Link%26articleLink%3Dhttps%3A%2F%2Fconsole.firebase.google.com%2Fproject%2Ftest-c67b6%2Fdurablelinks%2Fdetails%2Fhttps%3A~2F~2Fcustomparmeter.page.link~2F6SuK&amp;apn=com.example.deeplink<br>APP中获取结果：<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2023</span><span class="number">-03</span><span class="number">-04</span> <span class="number">22</span>:<span class="number">57</span>:<span class="number">32.532</span> <span class="number">12747</span><span class="number">-12747</span>/com.example.deeplink W/com.example.deeplink.ComicActivity: getDynamicLink:onSuccess:https:<span class="comment">//blog.520wa.com?title=How+to+custom+parmeter+the+Dynamic+Link&amp;articleLink=https://console.firebase.google.com/project/test-c67b6/durablelinks/details/https:~2F~2Fcustomparmeter.page.link~2F6SuK</span></span><br></pre></td></tr></table></figure></p>
<p>注：link后的参数需要通过URLEncode编码，否则不能正确获取参数。不能是另一个动态链接</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Dynamic Links</tag>
        <tag>动态参数</tag>
      </tags>
  </entry>
  <entry>
    <title>如何启动Phoenix Query Server</title>
    <url>/2023/08/03/how-to-start-phoenix-query-server/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>启动Phenix Query Server 6.0.0报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2023-08-03 15:20:01.672088 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf::/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类 org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure>
<p>HBase 2.4.15</p>
<p>Phoenix 5.1.3</p>
<h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>升级HBase 2.4.15后，之前的Phoenix 4.13.1就不能用了。从Phoenix官网看到Phoenix和HBase的版本对应。</p>
<blockquote>
<p>Current release 4.16.1 can run on Apache HBase 1.3, 1.4, 1.5 and 1.6.<br>Current release 5.1.3 can run on Apache HBase 2.1, 2.2, 2.3, 2.4 and 2.5.</p>
</blockquote>
<p>然后Phoenix 5.1.3中没有带query server，需要单独下载query server并启动，如图</p>
<p><img src="/2023/08/03/how-to-start-phoenix-query-server/query-server-installation.png" alt="Query Server Installation"></p>
<a id="more"></a>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>下载启动<a href="https://phoenix.apache.org/download.html" target="_blank" rel="noopener">Phonex Query 6.0.0</a>报了上面的错误</p>
<h4 id="找不到或无法加载主类"><a href="#找不到或无法加载主类" class="headerlink" title="找不到或无法加载主类"></a>找不到或无法加载主类</h4><p>报这种错，原因有可能是</p>
<ul>
<li><p>class path路径不对</p>
</li>
<li><p>子路径不匹配</p>
</li>
<li><p>class path缺少依赖</p>
<p>class-path需要你整个应用所有的依赖的class，也就是为了主类加载正确，JVM需要找到：</p>
<ul>
<li>主类本身；</li>
<li>所有父亲类以及接口；</li>
<li>所有声明变量的类以及调用的方法等</li>
</ul>
</li>
</ul>
<p>查看上面的错误日志phoenix-queryserver-6.0.0.jar中是有org.apache.phoenix.queryserver.server.QueryServer的，可能的问题是class path缺少依赖</p>
<h4 id="修改日志级别，查看详细错误信息"><a href="#修改日志级别，查看详细错误信息" class="headerlink" title="修改日志级别，查看详细错误信息"></a>修改日志级别，查看详细错误信息</h4><p>需要找到具体缺少了什么依赖，能否拿到详细报错信息辅助我们找到错误？</p>
<p>启动命令中有log4j.properties -Dpsql.root.logger=INFO,</p>
<p>我选择修改log3j.properties中的日志类型为DEBUG，再重新启动，查看日志，得到如下错误信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2023-08-03 15:28:01.024619 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf:/var/phoenix-queryserver-6.0.0/bin/../phoenix-client-hbase-2.4-5.1.3.jar:/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line">Exception in thread "Thread-20" java.lang.RuntimeException: java.io.FileNotFoundException: /var/phoenix-queryserver-6.0.0/phoenix-client-hbase-2.4-5.1.3.jar (没有那个文件或目录)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:3021)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResources(Configuration.java:2968)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getProps(Configuration.java:2848)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.get(Configuration.java:1200)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getTrimmed(Configuration.java:1254)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getBoolean(Configuration.java:1660)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.checkDefaultsVersion(HBaseConfiguration.java:69)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.addHbaseResources(HBaseConfiguration.java:83)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.create(HBaseConfiguration.java:97)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl$1.call(ConfigurationFactory.java:49)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl$1.call(ConfigurationFactory.java:46)</span><br><span class="line">        at org.apache.phoenix.util.PhoenixContextExecutor.call(PhoenixContextExecutor.java:76)</span><br><span class="line">        at org.apache.phoenix.util.PhoenixContextExecutor.callWithoutPropagation(PhoenixContextExecutor.java:90)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl.getConfiguration(ConfigurationFactory.java:46)</span><br><span class="line">        at org.apache.phoenix.jdbc.PhoenixDriver$1.run(PhoenixDriver.java:77)</span><br><span class="line">Caused by: java.io.FileNotFoundException: /var/phoenix-queryserver-6.0.0/phoenix-client-hbase-2.4-5.1.3.jar (没有那个文件或目录)</span><br><span class="line">        at java.util.zip.ZipFile.open(Native Method)</span><br><span class="line">        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:225)</span><br><span class="line">        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:155)</span><br><span class="line">        at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:166)</span><br><span class="line">        at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:103)</span><br><span class="line">        at sun.net.www.protocol.jar.URLJarFile.&lt;init&gt;(URLJarFile.java:93)</span><br><span class="line">        at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)</span><br><span class="line">        at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:99)</span><br><span class="line">        at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)</span><br><span class="line">        at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:152)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.parse(Configuration.java:2943)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getStreamReader(Configuration.java:3037)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:2995)</span><br><span class="line">        ... 14 more</span><br><span class="line">2023-08-03 17:44:55.845183 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf::/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line">错误: 找不到或无法加载主类 org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure>
<p>从上面日志，看到了错误问题，缺少phoenix-client-hbase-2.4-5.1.3.jar</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="复制phoenix-client-hbase-2-4-5-1-3-jar"><a href="#复制phoenix-client-hbase-2-4-5-1-3-jar" class="headerlink" title="复制phoenix-client-hbase-2.4-5.1.3.jar"></a>复制phoenix-client-hbase-2.4-5.1.3.jar</h4><p>从Phoenix 5.1.3目录下复制phoenix-client-hbase-2.4-5.1.3.jar到phoenix-queryserver-6.0.0的目录下</p>
<h4 id="启动Phoenix-Query-Server"><a href="#启动Phoenix-Query-Server" class="headerlink" title="启动Phoenix Query Server"></a>启动Phoenix Query Server</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/queryserver.py start</span><br></pre></td></tr></table></figure>
<p>启动成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ump225 phoenix-queryserver-6.0.0]# bin/queryserver.py start</span><br><span class="line">starting Query Server, logging to /tmp/phoenix/phoenix-root-queryserver.log</span><br><span class="line">[root@ump225 phoenix-queryserver-6.0.0]# tail -100f /tmp/phoenix/phoenix-root-queryserver.out</span><br><span class="line">2023-08-03 23:13:57.910434 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf:/var/phoenix-queryserver-6.0.0/bin/../phoenix-client-hbase-2.4-5.1.3.jar:/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如何启动Phoenix Query Server 6.0.0</p>
<ul>
<li>从Phoenix 5.1.3目录下复制phoenix-client-hbase-2.4-5.1.3.jar到phoenix-queryserver-6.0.0的目录下</li>
<li>在Phoenix Query Server 6.0.0目录下执行bin/queryserver.py start</li>
<li>查看日志/tmp/phoenix/phoenix-root-queryserver.out是否启动成功</li>
</ul>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>Phoenix Query Server 6.0.0</tag>
      </tags>
  </entry>
  <entry>
    <title>设置，你所不知道的权限</title>
    <url>/2019/05/09/how-to-request-other-permissions/</url>
    <content><![CDATA[<p>我们知道Android中权限分为 <a href="https://developer.android.google.cn/guide/topics/permissions/overview#normal_permissions" target="_blank" rel="noopener">normal</a>, <a href="https://developer.android.google.cn/guide/topics/permissions/overview#dangerous_permissions" target="_blank" rel="noopener">dangerous</a>，其实官方介绍中还有<a href="https://developer.android.google.cn/guide/topics/permissions/overview#signature_permissions" target="_blank" rel="noopener">signature</a> and <a href="https://developer.android.google.cn/guide/topics/permissions/overview#special_permissions" target="_blank" rel="noopener">special</a>   </p>
<p>正常权限，对用户风险小，声明后系统会在安装时自动授予该应用该权限。不提示用户授予正常权限，用户无法撤消这些权限。</p>
<p>危险权限，涉及用户隐私，需要用户授权。且用户授权后也可以再修改拒绝。所以每次使用危险权限时都得先检查用户是否赋予该权限。</p>
<p>签名权限则是相同签名的应用可以使用。</p>
<p>特殊权限，与正常、危险权限不同，特别敏感。<a href="https://developer.android.google.cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW" target="_blank" rel="noopener">SYSTEM_ALERT_WINDOW</a>、<a href="https://developer.android.google.cn/reference/android/Manifest.permission.html#WRITE_SETTINGS" target="_blank" rel="noopener">WRITE_SETTINGS</a></p>
<a id="more"></a>
<p>以上需要的权限都在权限列表内，声明，检查即可。</p>
<p>前几天gayhub群友贴了一张图问这个通知权限在哪里设置的</p>
<p><img src="/2019/05/09/how-to-request-other-permissions/notification_enable.jpg" alt="image"></p>
<p>WHAT，什么意思？如果拒绝用户就收不到应用的推送了吗？</p>
<p>必须收不到，或者说不会显示。但是官方权限列表中却没有对应允许通知的权限。从中发现部份不在权限列表中，仍然严重影响我们APP体验的<strong>设置</strong>。如：<strong>允许通知、省电优化</strong>等</p>
<p>这样的设置，官方为部份提供了API检测是否已设置。且只能引导用户设置，没有提供API让用户一键设置。</p>
<p><strong>允许通知</strong></p>
<p>检测是否开始允许通知权限</p>
<p>NotificationManagerCompat 中的 areNotificationsEnabled()</p>
<p>跳转允许通知设置界面</p>
<p>Settings.ACTION_APP_NOTIFICATION_SETTINGS</p>
<p>另外还有版本、机型兼容问题，需要自行研究和搜索</p>
<p>下面的后台运行则只能通过引导用户设置，而没有检测API</p>
<p><img src="/2019/05/09/how-to-request-other-permissions/back_op.jpg" alt="image"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Facebook广告中使用Deferred Deep Link</title>
    <url>/2023/04/06/how-to-use-Deferred-Deep-Link-in-Facebook/</url>
    <content><![CDATA[<p>在运营时，学习使用了App Link和Deep Link，之前也使用了Firebase中的Dynamic Links在用户未安装App时跳转至Google Play安装后再打开仍然能获取到链接内容，带用户到推荐的个性化页面。<br>后面由于运营需要在Facebook上做推广，需要接入Meta的<a href="https://developers.facebook.com/docs/app-ads/deep-linking" target="_blank" rel="noopener">Deep Link</a>。<br>运营时有3个场景，我们的App，以下简称A</p>
<ol>
<li>用户已安装A，点击Facebook广告链接，正常打开A并跳转至推广页面</li>
<li>用户未安装A，点击Facebook广告链接，打开Google play store，下载安装，并在Google play store中点击打开，正常打开A并跳转至推广页面</li>
<li>用户未安装A，点击Facebook广告链接，打开Google play store，下载安装，回到桌面点击A，正常打开A并跳转至推广页面<br>实现1，只需要实现Meta中的<a href="https://developers.facebook.com/docs/app-ads/deep-linking" target="_blank" rel="noopener">Deep Link</a><br>实现2、3则需要在实现Deep Link的基础外加上Deferred Deep Link<a id="more"></a>
<img src="/2023/04/06/how-to-use-Deferred-Deep-Link-in-Facebook/DeferredDeepLinkRequired.png" alt="Prerequisites"><br><strong>注意</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AppLinkData.fetchDeferredAppLinkData</span><br></pre></td></tr></table></figure>
需要在已启动的Activity中执行才能获得结果。<br>即<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name&#x3D;&quot;.SplashActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;activity&gt;</span><br><span class="line">&lt;activity</span><br><span class="line">    android:name&#x3D;&quot;.DeepLinkActivity&quot;</span><br><span class="line">    android:exported&#x3D;&quot;true&quot; &gt;</span><br><span class="line">    &lt;intent-filter android:autoVerify&#x3D;&quot;true&quot;&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;android.intent.action.VIEW&quot; &#x2F;&gt;</span><br><span class="line">        &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">        &lt;category android:name&#x3D;&quot;android.intent.category.BROWSABLE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;data android:scheme&#x3D;&quot;https&quot;</span><br><span class="line">            android:host&#x3D;&quot;blog.520wa.com&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;data</span><br><span class="line">            android:host&#x3D;&quot;520wa&quot;</span><br><span class="line">            android:scheme&#x3D;&quot;blog&quot;</span><br><span class="line">            android:pathPrefix&#x3D;&quot;&#x2F;lunch&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure>
在2、3的情况下，无法触达DeepLinkActivity，并执行DeepLinkActivity中的AppLinkData.fetchDeferredAppLinkData方法获取延迟深度链接。需要将AppLinkData.fetchDeferredAppLinkData放到SplashActivity中。<br>且AppLinkData.fetchDeferredAppLinkData只能调1次</li>
</ol>
<p>参考<br><a href="https://www.biaodianfu.com/deep-link-deferred-deeplink.html" target="_blank" rel="noopener">App深度链接与延迟深度链接</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Deferred Deep Link</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Redis keyspace notification</title>
    <url>/2023/10/06/keyspace-notifications/</url>
    <content><![CDATA[<p>Redis消息架构两种中的一种keyspace notification、  <a href="https://redis.io/docs/interact/pubsub/" target="_blank" rel="noopener">Pub/Sub</a></p>
<p>实时监控Rdis 键值改变。</p>
<p>Keyspace通知允许client订阅Pub/Sub channels，以便接收影响Redis数据的事件。</p>
<h4 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h4><p>键空间通知使得客户端可以通过订阅频道或模式， 来接收那些以某种方式改动了 Redis 数据集的事件。</p>
<p>以下是一些键空间通知发送的事件的例子：</p>
<ul>
<li>所有修改键的命令。</li>
<li>所有接收到 LPUSH 命令的键。</li>
<li>0 号数据库中所有已过期的键。</li>
</ul>
<p>事件通过 Redis 的订阅与发布功能（pub/sub）来进行分发， 因此所有支持订阅与发布功能的客户端都可以在无须做任何修改的情况下， 直接使用键空间通知功能。</p>
<p>因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略， 所以如果你的程序需要可靠事件通知（reliable notification of events）， 那么目前的键空间通知可能并不适合你： 当订阅事件的客户端断线时， 它会丢失所有在断线期间分发给它的事件。</p>
<p>未来将会支持更可靠的事件分发， 这种支持可能会通过让订阅与发布功能本身变得更可靠来实现， 也可能会在 Lua 脚本中对消息（message）的订阅与发布进行监听， 从而实现类似将事件推入到列表这样的操作。</p>
<a id="more"></a>
<h4 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h4><p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件。</p>
<p>比如说，对 0 号数据库的键 mykey 执行 DEL 命令时， 系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令：</p>
<p>PUBLISH __keyspace@0__:mykey del<br>PUBLISH __keyevent@0__:del mykey</p>
<p>订阅第一个频道 __keyspace@0__:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件， 而订阅第二个频道 __keyevent@0__:del 则可以接收 0 号数据库中所有执行 del 命令的键。</p>
<p>以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。</p>
<p>当 del mykey 命令执行时：</p>
<p>键空间频道的订阅者将接收到被执行的事件的名字，在这个例子中，就是 del 。<br>键事件频道的订阅者将接收到被执行事件的键的名字，在这个例子中，就是 mykey 。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>因为开启键空间通知功能需要消耗一些 CPU ， 所以在默认配置下， 该功能处于关闭状态。</p>
<p>可以通过修改 redis.conf 文件， 或者直接使用 CONFIG SET 命令来开启或关闭键空间通知功能：</p>
<p>当 notify-keyspace-events 选项的参数为空字符串时，功能关闭。<br>另一方面，当参数不是空字符串时，功能开启。<br>notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>发送的通知</th>
</tr>
</thead>
<tbody>
<tr>
<td>K</td>
<td>键空间通知，所有通知以 __keyspace@&lt;db&gt;__ 为前缀</td>
</tr>
<tr>
<td>E</td>
<td>键事件通知，所有通知以 __keyevent@&lt;db&gt;__ 为前缀</td>
</tr>
<tr>
<td>g</td>
<td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td>
</tr>
<tr>
<td>$</td>
<td>字符串命令的通知</td>
</tr>
<tr>
<td>l</td>
<td>列表命令的通知</td>
</tr>
<tr>
<td>s</td>
<td>集合命令的通知</td>
</tr>
<tr>
<td>h</td>
<td>哈希命令的通知</td>
</tr>
<tr>
<td>z</td>
<td>有序集合命令的通知</td>
</tr>
<tr>
<td>x</td>
<td>过期事件：每当有过期键被删除时发送</td>
</tr>
<tr>
<td>e</td>
<td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td>
</tr>
<tr>
<td>A</td>
<td>参数 g$lshzxe 的别名</td>
</tr>
</tbody>
</table>
<p>输入的参数中至少要有一个 K 或者 E ， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发。</p>
<p>举个例子， 如果只想订阅键空间中和列表相关的通知， 那么参数就应该设为 Kl ， 诸如此类。</p>
<p>将参数设为字符串 “AKE” 表示发送所有类型的通知。</p>
<h4 id="命令产生的通知"><a href="#命令产生的通知" class="headerlink" title="命令产生的通知"></a>命令产生的通知</h4><p>以下列表记录了不同命令所产生的不同通知：</p>
<ul>
<li>DEL 命令为每个被删除的键产生一个 del 通知。</li>
<li>RENAME 产生两个通知：为来源键（source key）产生一个 rename_from 通知，并为目标键（destination key）产生一个 rename_to 通知。</li>
<li>EXPIRE 和 EXPIREAT 在键被正确设置过期时间时产生一个 expire 通知。当 EXPIREAT 设置的时间已经过期，或者 - EXPIRE 传入的时间为负数值时，键被删除，并产生一个 del 通知。</li>
<li>SORT 在命令带有 STORE 参数时产生一个 sortstore 事件。如果 STORE 指示的用于保存排序结果的键已经存在，那么程序还会发送一个 del 事件。</li>
<li>SET 以及它的所有变种（SETEX 、 SETNX 和 GETSET）都产生 set 通知。其中 SETEX 还会产生 expire 通知。</li>
<li>MSET 为每个键产生一个 set 通知。</li>
<li>SETRANGE 产生一个 setrange 通知。</li>
<li>INCR 、 DECR 、 INCRBY 和 DECRBY 都产生 incrby 通知。</li>
<li>INCRBYFLOAT 产生 incrbyfloat 通知。</li>
<li>APPEND 产生 append 通知。</li>
<li>LPUSH 和 LPUSHX 都产生单个 lpush 通知，即使有多个输入元素时，也是如此。</li>
<li>RPUSH 和 RPUSHX 都产生单个 rpush 通知，即使有多个输入元素时，也是如此。</li>
<li>RPOP 产生 rpop 通知。如果被弹出的元素是列表的最后一个元素，那么还会产生一个 del 通知。</li>
<li>LPOP 产生 lpop 通知。如果被弹出的元素是列表的最后一个元素，那么还会产生一个 del 通知。</li>
<li>LINSERT 产生一个 linsert 通知。</li>
<li>LSET 产生一个 lset 通知。</li>
<li>LTRIM 产生一个 ltrim 通知。如果 LTRIM 执行之后，列表键被清空，那么还会产生一个 del 通知。</li>
<li>RPOPLPUSH 和 BRPOPLPUSH 产生一个 rpop 通知，以及一个 lpush 通知。两个命令都会保证 rpop 的通知在 lpush 的通知之前分发。如果从键弹出元素之后，被弹出的列表键被清空，那么还会产生一个 del 通知。</li>
<li>HSET 、 HSETNX 和 HMSET 都只产生一个 hset 通知。</li>
<li>HINCRBY 产生一个 hincrby 通知。</li>
<li>HINCRBYFLOAT 产生一个 hincrbyfloat 通知。</li>
<li>HDEL 产生一个 hdel 通知。如果执行 HDEL 之后，哈希键被清空，那么还会产生一个 del 通知。</li>
<li>SADD 产生一个 sadd 通知，即使有多个输入元素时，也是如此。</li>
<li>SREM 产生一个 srem 通知，如果执行 SREM 之后，集合键被清空，那么还会产生一个 del 通知。</li>
<li>SMOVE 为来源键（source key）产生一个 srem 通知，并为目标键（destination key）产生一个 sadd 事件。</li>
<li>SPOP 产生一个 spop 事件。如果执行 SPOP 之后，集合键被清空，那么还会产生一个 del 通知。</li>
<li>SINTERSTORE 、 SUNIONSTORE 和 SDIFFSTORE 分别产生 sinterstore 、 sunionostore 和 sdiffstore 三种通知。如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li>
<li>ZINCRBY 产生一个 zincr 通知。（译注：非对称，请注意。）</li>
<li>ZADD 产生一个 zadd 通知，即使有多个输入元素时，也是如此。</li>
<li>ZREM 产生一个 zrem 通知，即使有多个输入元素时，也是如此。如果执行 ZREM 之后，有序集合键被清空，那么还会产生一个 del 通知。</li>
<li>ZREMRANGEBYSCORE 产生一个 zrembyscore 通知。（译注：非对称，请注意。）如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li>
<li>ZREMRANGEBYRANK 产生一个 zrembyrank 通知。（译注：非对称，请注意。）如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li>
<li>ZINTERSTORE 和 ZUNIONSTORE 分别产生 zinterstore 和 zunionstore 两种通知。如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li>
<li>每当一个键因为过期而被删除时，产生一个 expired 通知。</li>
<li>每当一个键因为 maxmemory 政策而被删除以回收内存时，产生一个 evicted 通知。</li>
</ul>
<p><strong>Note</strong></p>
<p>所有命令都只在键真的被改动了之后，才会产生通知。</p>
<p>比如说，当 SREM 试图删除不存在于集合的元素时，删除操作会执行失败，因为没有真正的改动键，所以这一操作不会发送通知。</p>
<p>如果对命令所产生的通知有疑问， 最好还是使用以下命令， 自己来验证一下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ redis-cli<span class="built_in"> config </span><span class="builtin-name">set</span> notify-keyspace-events KEA</span><br><span class="line">$ redis-cli --csv psubscribe <span class="string">'__key*__:*'</span></span><br><span class="line">Reading messages<span class="built_in">..</span>. (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="string">"psubscribe"</span>,<span class="string">"__key*__:*"</span>,1</span><br></pre></td></tr></table></figure>
<p>然后， 只要在其他终端里用 Redis 客户端发送命令， 就可以看到产生的通知了：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="string">"pmessage"</span>,<span class="string">"__key*__:*"</span>,<span class="string">"__keyspace@0__:foo"</span>,<span class="string">"set"</span></span><br><span class="line"><span class="string">"pmessage"</span>,<span class="string">"__key*__:*"</span>,<span class="string">"__keyevent@0__:set"</span>,<span class="string">"foo"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="过期通知的发送时间"><a href="#过期通知的发送时间" class="headerlink" title="过期通知的发送时间"></a>过期通知的发送时间</h4><p>Redis 使用以下两种方式删除过期的键：</p>
<ul>
<li>当一个键被访问时，程序会对这个键进行检查，如果键已经过期，那么该键将被删除。</li>
<li>底层系统会在后台渐进地查找并删除那些过期的键，从而处理那些已经过期、但是不会被访问到的键。</li>
</ul>
<p>当过期键被以上两个程序的任意一个发现、 并且将键从数据库中删除时， Redis 会产生一个 expired 通知。</p>
<p>Redis 并不保证生存时间（TTL）变为 0 的键会立即被删除： 如果程序没有访问这个过期键， 或者带有生存时间的键非常多的话， 那么在键的生存时间变为 0 ， 直到键真正被删除这中间， 可能会有一段比较显著的时间间隔。</p>
<p>因此， Redis 产生 expired 通知的时间为过期键被删除的时候， 而不是键的生存时间变为 0 的时候。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://shouce.jb51.net/redis-chinese-doc/doc/1.html" target="_blank" rel="noopener">键空间通知（keyspace notification）)</a><br><a href="https://redis.io/docs/manual/keyspace-notifications/" target="_blank" rel="noopener">Redis keyspace notifications</a></p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据类型字段占用空间</title>
    <url>/2023/09/03/mysql-storage-requirements/</url>
    <content><![CDATA[<p>经常看到这种建表sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table1`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`fileProtocol`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>
<p>sql中为每个字段都加上了长度限制，能限制住吗？存储数据时占用的空间又是多少呢？</p>
<p>具体见<a href="https://dev.mysql.com/doc/refman/5.7/en/storage-requirements.html" target="_blank" rel="noopener">Data Type Storage Requirements</a></p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NDK Samples学习 [6-1] - camera之basic</title>
    <url>/2019/03/05/ndksamples-camera-basic/</url>
    <content><![CDATA[<p><a href="https://github.com/googlesamples/android-ndk/tree/master/camera/basic/" target="_blank" rel="noopener">camera-basic</a><br><a href="https://github.com/googlesamples/android-ndk/blob/master/camera/README.md" target="_blank" rel="noopener">README</a><br>该项目演示如何使用c创建camera拍照、预览。</p>
<hr>
<p>最低要求：</p>
<ol>
<li>Android Studio 2.3.0+ ,NDK r15+</li>
<li>Android-24+</li>
</ol>
<hr>
<p>项目主要流程：</p>
<ol>
<li>获取权限</li>
<li>初始化界面，NDKCamera、曝光度、感光度</li>
<li>操作相机，调整曝光度、感光度预览；拍照保存</li>
</ol>
<a id="more"></a>
<hr>
<p>CameraActivity.java</p>
<ol>
<li>CameraSeekBar 包装SeekBar用于调整相机预览的曝光度、感光度</li>
</ol>
<p>void setImmersiveSticky() {} //设置全屏显示<br>public void RequestCamera() {} //请求权限，由c++调用<br>public void EnableUI(final long[] params){}//由c++调用，并传入曝光度、感光度参数<br>public void OnPhotoTaken(String fileName) {}//由c++调用，传入拍照图片路径<br>native static void notifyCameraPermission(boolean granted);//权限变化后<br>native static void TakePhoto();//调用c++拍照<br>native void OnExposureChanged(long exposure);//调用c++调整曝光度<br>native void OnSensitivityChanged(long sensitivity);//调用c++调整感光度<br>native static void notifyCameraPermission(boolean granted);//通知c++权限变化</p>
<p>android_main.cpp c主入口<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SampleEngine global object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> CameraEngine* pEngineObj = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取CameraEngine单例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">CameraEngine* <span class="title">GetAppEngine</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  ASSERT(pEngineObj, <span class="string">"AppEngine has not initialized"</span>);</span><br><span class="line">  <span class="keyword">return</span> pEngineObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据收到INIT_WINDOW/TERM_WINDOW事件创建或删除camera对象，</span></span><br><span class="line"><span class="comment"> * 使用NativeActivity的应用才会收到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessAndroidCmd</span><span class="params">(struct android_app* app, <span class="keyword">int32_t</span> cmd)</span> </span>&#123;</span><br><span class="line">  CameraEngine* engine = <span class="keyword">reinterpret_cast</span>&lt;CameraEngine*&gt;(app-&gt;userData);</span><br><span class="line">  <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="comment">// 窗口初始化</span></span><br><span class="line">    <span class="keyword">case</span> APP_CMD_INIT_WINDOW:</span><br><span class="line">      <span class="keyword">if</span> (engine-&gt;AndroidApp()-&gt;window != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        engine-&gt;SaveNativeWinRes(ANativeWindow_getWidth(app-&gt;window),</span><br><span class="line">                                 ANativeWindow_getHeight(app-&gt;window),</span><br><span class="line">                                 ANativeWindow_getFormat(app-&gt;window));</span><br><span class="line">        <span class="comment">// 请求权限，创建camera</span></span><br><span class="line">        engine-&gt;OnAppInitWindow();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 窗口关闭</span></span><br><span class="line">    <span class="keyword">case</span> APP_CMD_TERM_WINDOW:</span><br><span class="line">      <span class="comment">// 删除camera</span></span><br><span class="line">      engine-&gt;OnAppTermWindow();</span><br><span class="line">      ANativeWindow_setBuffersGeometry(</span><br><span class="line">          app-&gt;window, engine-&gt;GetSavedNativeWinWidth(),</span><br><span class="line">          engine-&gt;GetSavedNativeWinHeight(), engine-&gt;GetSavedNativeWinFormat());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 窗口配改变</span></span><br><span class="line">    <span class="keyword">case</span> APP_CMD_CONFIG_CHANGED:</span><br><span class="line">      engine-&gt;OnAppConfigChange();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 失去焦点</span></span><br><span class="line">    <span class="keyword">case</span> APP_CMD_LOST_FOCUS:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">android_main</span><span class="params">(struct android_app* state)</span> </span>&#123;</span><br><span class="line">  <span class="function">CameraEngine <span class="title">engine</span><span class="params">(state)</span></span>;</span><br><span class="line">  pEngineObj = &amp;engine;</span><br><span class="line"></span><br><span class="line">  state-&gt;userData = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(&amp;engine);</span><br><span class="line">  state-&gt;onAppCmd = ProcessAndroidCmd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// loop waiting for stuff to do.</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Read all pending events.</span></span><br><span class="line">    <span class="keyword">int</span> events;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">android_poll_source</span>* <span class="title">source</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ALooper_pollAll(<span class="number">0</span>, <span class="literal">NULL</span>, &amp;events, (<span class="keyword">void</span>**)&amp;source) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Process this event.</span></span><br><span class="line">      <span class="keyword">if</span> (source != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        source-&gt;<span class="built_in">process</span>(state, source);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if we are exiting.</span></span><br><span class="line">      <span class="keyword">if</span> (state-&gt;destroyRequested != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGI(<span class="string">"CameraEngine thread destroy requested!"</span>);</span><br><span class="line">        engine.DeleteCamera();</span><br><span class="line">        pEngineObj = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pEngineObj-&gt;DrawFrame();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口初始化时调用，请求相机相关权限，并创建camera</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnAppInitWindow</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cameraGranted_) &#123;</span><br><span class="line">    <span class="comment">// 请求相机相关权限</span></span><br><span class="line">    RequestCameraPermission();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 旋转角度</span></span><br><span class="line">  rotation_ = GetDisplayRotation();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建camera</span></span><br><span class="line">  CreateCamera();</span><br><span class="line">  ASSERT(camera_, <span class="string">"CameraCreation Failed"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用曝光度UI</span></span><br><span class="line">  EnableUI();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预览</span></span><br><span class="line">  cameraReady_ = <span class="literal">true</span>;</span><br><span class="line">  camera_-&gt;StartPreview(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle APP_CMD_TEMR_WINDOW</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnAppTermWindow</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  cameraReady_ = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 销毁camera</span></span><br><span class="line">  DeleteCamera();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle APP_CMD_CONFIG_CHANGED</span></span><br><span class="line"><span class="comment"> * 获取旋转角度</span></span><br><span class="line"><span class="comment"> * 旋转角度有变化，销毁camera，再重新创建camera</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnAppConfigChange</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> newRotation = GetDisplayRotation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newRotation != rotation_) &#123;</span><br><span class="line">    OnAppTermWindow();</span><br><span class="line"></span><br><span class="line">    rotation_ = newRotation;</span><br><span class="line">    OnAppInitWindow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>camera_engine.cpp<br><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数，初始camera资源</span></span><br><span class="line"><span class="comment"> * @param app native_app_glue environment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CameraEngine::CameraEngine(android_app* app)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 析构造函数，释放camera资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CameraEngine::~CameraEngine() &#123;</span><br><span class="line">  cameraReady_ = <span class="literal">false</span>;</span><br><span class="line">  DeleteCamera();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建后台camera</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void CameraEngine::CreateCamera(void) &#123;</span><br><span class="line">  <span class="comment">// 没有权限直接返回</span></span><br><span class="line">  <span class="function"><span class="title">if</span> (!cameraGranted_ || !app_-&gt;</span>window) &#123;</span><br><span class="line">    LOGW(<span class="string">"Camera Sample requires Full Camera access"</span>);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  int32_t displayRotation = GetDisplayRotation();</span><br><span class="line">  rotation_ = displayRotation;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建NDKCamera</span></span><br><span class="line">  camera_ = new NDKCamera();</span><br><span class="line">  ASSERT(camera_, <span class="string">"Failed to Create CameraObject"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 旋转角度</span></span><br><span class="line">  int32_t facing = <span class="number">0</span>, angle = <span class="number">0</span>, imageRotation = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="title">if</span> (camera_-&gt;</span>GetSensorOrientation(&amp;facing, &amp;angle)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (facing == ACAMERA_LENS_FACING_FRONT) &#123;</span><br><span class="line">      imageRotation = (angle + rotation_) % <span class="number">360</span>;</span><br><span class="line">      imageRotation = (<span class="number">360</span> - imageRotation) % <span class="number">360</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      imageRotation = (angle - rotation_ + <span class="number">360</span>) % <span class="number">360</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  LOGI(<span class="string">"Phone Rotation: %d, Present Rotation Angle: %d"</span>, rotation_,</span><br><span class="line">       imageRotation);</span><br><span class="line">  ImageFormat view&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, capture&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="function"><span class="title">camera_</span>-&gt;</span>M<span class="function"><span class="title">atchCaptureSizeRequest</span>(app_-&gt;</span>window, &amp;view, &amp;capture);</span><br><span class="line"></span><br><span class="line">  ASSERT(view.width &amp;&amp; view.height, <span class="string">"Could not find supportable resolution"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Request the necessary nativeWindow to OS</span></span><br><span class="line">  bool portraitNativeWindow =</span><br><span class="line">      (savedNativeWinRes_.width &lt; savedNativeWinRes_.height);</span><br><span class="line">  ANativeWindow_setBuffersGeometry(</span><br><span class="line">      <span class="function"><span class="title">app_</span>-&gt;</span>window, portraitNativeWindow ? view.height : view.width,</span><br><span class="line">      portraitNativeWindow ? view.width : view.height, WINDOW_FORMAT_RGBA_8888);</span><br><span class="line"></span><br><span class="line">  yuvReader_ = new ImageReader(&amp;view, AIMAGE_FORMAT_YUV_420_888);</span><br><span class="line">  <span class="function"><span class="title">yuvReader_</span>-&gt;</span>SetPresentRotation(imageRotation);</span><br><span class="line">  jpgReader_ = new ImageReader(&amp;capture, AIMAGE_FORMAT_JPEG);</span><br><span class="line">  <span class="function"><span class="title">jpgReader_</span>-&gt;</span>SetPresentRotation(imageRotation);</span><br><span class="line">  <span class="function"><span class="title">jpgReader_</span>-&gt;</span>R<span class="function"><span class="title">egisterCallback</span>(this, [this](void* ctx, const char* str) -&gt;</span> void &#123;</span><br><span class="line">    <span class="function"><span class="title">reinterpret_cast</span>&lt;CameraEngine* &gt;(ctx)-&gt;</span>OnPhotoTaken(str);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now we could create session</span></span><br><span class="line">  <span class="function"><span class="title">camera_</span>-&gt;</span>C<span class="function"><span class="title">reateSession</span>(yuvReader_-&gt;</span>GetNativeWindow(),</span><br><span class="line">                         <span class="function"><span class="title">jpgReader_</span>-&gt;</span>GetNativeWindow(), imageRotation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放camera</span></span><br><span class="line">void CameraEngine::DeleteCamera(void) &#123;</span><br><span class="line">  cameraReady_ = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (camera_) &#123;</span><br><span class="line">    delete camera_;</span><br><span class="line">    camera_ = nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (yuvReader_) &#123;</span><br><span class="line">    delete yuvReader_;</span><br><span class="line">    yuvReader_ = nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (jpgReader_) &#123;</span><br><span class="line">    delete jpgReader_;</span><br><span class="line">    jpgReader_ = nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求camera相关权限</span></span><br><span class="line"><span class="comment"> *  通过调用CameraActivity.notifyCameraPermission,</span></span><br><span class="line"><span class="comment"> *  授权结果，调用native notifyCameraPermission()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void CameraEngine::RequestCameraPermission() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!app_) return;</span><br><span class="line"></span><br><span class="line">  JNIEnv* env;</span><br><span class="line">  AN<span class="function"><span class="title">ativeActivity</span>* activity = app_-&gt;</span>activity;</span><br><span class="line">  <span class="function"><span class="title">activity</span>-&gt;</span><span class="function"><span class="title">vm</span>-&gt;</span>GetEnv((void**)&amp;env, JNI_VERSION_1_6);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">activity</span>-&gt;</span><span class="function"><span class="title">vm</span>-&gt;</span>AttachCurrentThread(&amp;env, NULL);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">jobject</span> activityObj = env-&gt;</span>N<span class="function"><span class="title">ewGlobalRef</span>(activity-&gt;</span>clazz);</span><br><span class="line">  <span class="function"><span class="title">jclass</span> clz = env-&gt;</span>GetObjectClass(activityObj);</span><br><span class="line">  <span class="function"><span class="title">env</span>-&gt;</span>CallVoidMethod(activityObj,</span><br><span class="line">                      <span class="function"><span class="title">env</span>-&gt;</span>GetMethodID(clz, <span class="string">"RequestCamera"</span>, <span class="string">"()V"</span>));</span><br><span class="line">  <span class="function"><span class="title">env</span>-&gt;</span>DeleteGlobalRef(activityObj);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">activity</span>-&gt;</span><span class="function"><span class="title">vm</span>-&gt;</span>DetachCurrentThread();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整曝光度、感光度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void CameraEngine::OnCameraParameterChanged(int32_t code, int64_t val) &#123;</span><br><span class="line">  <span class="function"><span class="title">camera_</span>-&gt;</span>UpdateCameraRequestParameter(code, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The main function rendering a frame. In our case, it is yuv to RGBA8888</span></span><br><span class="line"><span class="comment"> * converter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void CameraEngine::DrawFrame(void) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!cameraReady_ || !yuvReader_) return;</span><br><span class="line">  AI<span class="function"><span class="title">mage</span>* image = yuvReader_-&gt;</span>GetNextImage();</span><br><span class="line">  <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  AN<span class="function"><span class="title">ativeWindow_acquire</span>(app_-&gt;</span>window);</span><br><span class="line">  ANativeWindow_Buffer buf;</span><br><span class="line">  <span class="function"><span class="title">if</span> (ANativeWindow_lock(app_-&gt;</span>window, &amp;buf, nullptr) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="function"><span class="title">yuvReader_</span>-&gt;</span>DeleteImage(image);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">yuvReader_</span>-&gt;</span>DisplayImage(&amp;buf, image);</span><br><span class="line">  AN<span class="function"><span class="title">ativeWindow_unlockAndPost</span>(app_-&gt;</span>window);</span><br><span class="line">  AN<span class="function"><span class="title">ativeWindow_release</span>(app_-&gt;</span>window);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>camera_ui.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取旋转角度Retrieve current rotation from Java side</span></span><br><span class="line"><span class="comment"> * 调用CameraActivity.getRotationDegree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CameraEngine::GetDisplayRotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置曝光度、感光度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::EnableUI</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 1. 获取曝光度，感光度NDKCamera::GetExposureRange\NDKCamera::GetSensitivityRange</span></span><br><span class="line">  <span class="comment">// 2. 调用CameraActivity.EnableUI设置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拍照</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnTakePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (camera_) &#123;</span><br><span class="line">    camera_-&gt;TakePhoto();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回传照片文件路径，CameraActivity.OnPhotoTaken</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnPhotoTaken</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * camera和文件写入权限回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CameraEngine::OnCameraPermission</span><span class="params">(jboolean granted)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//有权限则调用OnAppInitWindow初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  native响应权限变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_sample_camera_basic_CameraActivity_notifyCameraPermission(</span><br><span class="line">    JNIEnv *env, jclass type, jboolean permission) &#123;</span><br><span class="line">  <span class="comment">//CameraEngine::OnCameraPermission权限变化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  native拍照</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_sample_camera_basic_CameraActivity_TakePhoto(JNIEnv *env,</span><br><span class="line">                                                      jclass type) &#123;</span><br><span class="line">  <span class="comment">//CameraEngine::OnTakePhoto</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  native曝光度变化，调整预览</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_sample_camera_basic_CameraActivity_OnExposureChanged(</span><br><span class="line">    JNIEnv *env, jobject instance, jlong exposurePercent) &#123;</span><br><span class="line">  <span class="comment">//GetAppEngine()::OnCameraParameterChanged</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  native感光度变化，调整预览</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_sample_camera_basic_CameraActivity_OnSensitivityChanged(</span><br><span class="line">    JNIEnv *env, jobject instance, jlong sensitivity) &#123;</span><br><span class="line">  <span class="comment">//GetAppEngine()::OnCameraParameterChanged</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>camera_manager.cpp   </p>
<ol>
<li>初始化camera</li>
<li>更新属性</li>
<li>拍照</li>
</ol>
<p>image_reader.cpp   图片转换相关<br>camera_listeners.cpp camera manager相关Listener</p>
<hr>
<p>项目功能为：</p>
<ol>
<li>native监听窗口变化判断调用java请求camera相关权限</li>
<li>native创建NDKCamera，并获取曝光度、感光度属性回调到Java并展示</li>
<li>native预览</li>
<li>java调用native调整预览曝光度、感光度</li>
<li>java调用native拍照并回调java提示图片文件路径</li>
</ol>
<hr>
<h3 id="android-ndk-samples学习目录"><a href="#android-ndk-samples学习目录" class="headerlink" title="android-ndk-samples学习目录"></a>android-ndk-samples学习目录</h3><p>部份引用其他大牛的项目</p>
<ol>
<li><p><a href="https://www.jianshu.com/p/a5a6c3fdb622" target="_blank" rel="noopener">hello-jni</a> by 七零八落问号<br>演示如何从Java层调用C层代码。</p>
</li>
<li><p><a href="https://www.jianshu.com/p/499826cb97fc" target="_blank" rel="noopener">hello-jniCallback</a> by 七零八落问<br>演示如何在C层回调Java层方法。</p>
</li>
<li><p><a href="https://www.jianshu.com/p/b3be6b2ee87c" target="_blank" rel="noopener">hello-libs</a> by 七零八落问<br>演示如何在Android Studio上使用第三方的C / C++库。</p>
</li>
<li><p><a href="https://blog.csdn.net/foolish0421/article/details/78018926" target="_blank" rel="noopener">audio echo</a> by hunter800421<br>演示如何如何使用OpenSL ES创建播放器和录音。</p>
</li>
<li><p><a href="https://blog.csdn.net/foolish0421/article/details/78123165" target="_blank" rel="noopener">bitmap-plasma</a> by hunter800421<br>演示如何使用c代码在bitmap上绘制细胞质效果。</p>
</li>
</ol>
<p>6.1.  <a href="http://blog.520wa.com/2019/03/05/ndksamples-camera-basic/" target="_blank" rel="noopener">camera-basic</a> by  Tu<br>    演示如何使用c创建camera拍照、预览。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://tieba.baidu.com/p/2650541001?traceid=" target="_blank" rel="noopener">NatvieActivity事件</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>NDK</tag>
      </tags>
  </entry>
  <entry>
    <title>netlink</title>
    <url>/2023/10/07/netlink/</url>
    <content><![CDATA[<p>什么是Netlink通信机制</p>
<p>Netlink是linux提供的用于内核和用户态进程之间的通信方式。</p>
<p>但是注意虽然Netlink主要用于用户空间和内核空间的通信，但是也能用于用户空间的两个进程通信。只是进程间通信有其他很多方式，一般不用Netlink。除非需要用到Netlink的广播特性时。</p>
<p>那么Netlink有什么优势呢？</p>
<p>一般来说用户空间和内核空间的通信方式有三种：/proc、ioctl、Netlink。而前两种都是单向的，但是Netlink可以实现双工通信。</p>
<p>Netlink协议基于BSD socket和AF_NETLINK地址簇(address family)，使用32位的端口号寻址(以前称作PID)，每个Netlink协议(或称作总线，man手册中则称之为netlink family)，通常与一个或一组内核服务/组件相关联，如NETLINK_ROUTE用于获取和设置路由与链路信息、NETLINK_KOBJECT_UEVENT用于内核向用户空间的udev进程发送通知等。</p>
<p>netlink具有以下特点：</p>
<ul>
<li>支持全双工、异步通信(当然同步也支持)</li>
<li>用户空间可使用标准的BSD socket接口(但netlink并没有屏蔽掉协议包的构造与解析过程，推荐使用libnl等第三方库)</li>
<li>在内核空间使用专用的内核API接口</li>
<li>支持多播(因此支持“总线”式通信，可实现消息订阅)</li>
<li>在内核端可用于进程上下文与中断上下文</li>
</ul>
<p>没有Linux和C的基础是真看不懂这是啥玩意儿…</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 版本管理-本地多个版本切换使用</title>
    <url>/2023/02/17/node-version-manager/</url>
    <content><![CDATA[<p>在不同项目里依赖于不同Node.js版本，使用NVM（Node.js version manager）即可做到。</p>
<h3 id="NVM安装"><a href="#NVM安装" class="headerlink" title="NVM安装"></a>NVM安装</h3><p>下载地址<br><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">NVM for Windows</a><br><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a>  sh，支持Mac、Linux<br>下面介绍Windows安装方法<br>下载并安装<br><img src="/css/images/20230217_nvm-setup.png" alt="nvm-setup.exe"></p>
<h3 id="NVM使用"><a href="#NVM使用" class="headerlink" title="NVM使用"></a>NVM使用</h3><a id="more"></a>
<p>运行命令行窗口</p>
<h6 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;nvm -v</span><br><span class="line">1.1.10</span><br></pre></td></tr></table></figure>
<h6 id="查看Node-js版本"><a href="#查看Node-js版本" class="headerlink" title="查看Node.js版本"></a>查看Node.js版本</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;nvm list // 显示已安装Node.js版本，与nvm list installed相同</span><br><span class="line">D:\&gt;nvm list available // 显示可下载安装的Node.js版本</span><br></pre></td></tr></table></figure>
<h6 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h6><ul>
<li>shell 安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;nvm install 12.14.0 // 安装12.14.0版本Node.js</span><br></pre></td></tr></table></figure>
<p>有时候会安装不成功，此时可以手动下载</p>
<ul>
<li>手动安装</li>
</ul>
<p>下载需要的Node.js版本<br><a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">Node.js Releases</a><br>解压到nvm目录并改名为(v版本号)<br><img src="/css/images/20230217_npm-rename.png" alt="rename"><br>此时查看已安装Node.js版本就已经有以上安装的版本了</p>
<h6 id="当前使用Node-js版本查看及切换"><a href="#当前使用Node-js版本查看及切换" class="headerlink" title="当前使用Node.js版本查看及切换"></a>当前使用Node.js版本查看及切换</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;nvm current // 查看当前使用Node.js版本</span><br><span class="line">D:\&gt;nvm use 12.14.0 // 切换Node.js版本</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>Node.js版本</tag>
        <tag>hexo</tag>
        <tag>0kb</tag>
      </tags>
  </entry>
  <entry>
    <title>O2O收货地址管理——做一个有节操的码畜</title>
    <url>/2016/01/27/o2oAddress/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>O2O的收货地址与传统电商不同，前者自动带入地区属性，所以不需要传统B2C一样选择省市区、填写详细地址及邮编。应显示<strong>标志性位置</strong>如“新干线大厦”，不是“重庆市渝中区村55号”，也不是“重庆市渝中区两路口新干线大厦“。  </p>
<p>做产品时，通常会饱受各方质疑。这个功能不应该这样，那个功能应该那样，客户说、用户说、老板说、测试说、程序说。每个人说的都不一样，每个人都有道理。产品说好，那我改，我兼容，这样的产品永远不可能获得认可。每个人的出发点，使用场景不同，当然所要的就不同。我们所需要找的是产品的使用场景、切入点，找准这两个问题其它的一切问题自然不复存在。   </p>
<p>用户端中两个地方显示地址  </p>
<a id="more"></a>  
<h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p>  产品类型是社区O2O</p>
<h6 id="1、显示定位地址“重庆市渝中区村55号”"><a href="#1、显示定位地址“重庆市渝中区村55号”" class="headerlink" title="1、显示定位地址“重庆市渝中区村55号”"></a>1、显示定位地址“重庆市渝中区村55号”</h6><p>   问题：许多客户说，定位不准确，我都不知道这地方在哪儿。另外多个手机摆在同样的位置，显示的地址不一致。<br>   心路历程：程序猿心里飘过1w个草泥马，各手机GPS、性能不一致，采用第三方地图。<br>   我们开始提高定位精度，换各种SDK。甚至获取定位地址再统一采用WS获取地址。然并卵<br>   解决办法：定位采用推荐位置“新干线大厦”</p>
<h6 id="2、显示定位地址“新干线大厦”"><a href="#2、显示定位地址“新干线大厦”" class="headerlink" title="2、显示定位地址“新干线大厦”"></a>2、显示定位地址“新干线大厦”</h6><p>   问题：XG5客户说，这里应该显示离当前位置最近的小区，因为我们是做社区的。<br>   解决办法：社区不是小区。小区里面只是特定指了物业，其它的家政、维修、外卖、超市等任何产品都不只是局限在小区里面。首页展示了附近及平台推荐商家、商品，并未着重显示小区独有内容，定位为社区，不止小区。所以不予解决。  </p>
<h5 id="收货地址"><a href="#收货地址" class="headerlink" title="收货地址"></a>收货地址</h5><h6 id="1、显示定位地址“重庆市渝中区村55号”-1"><a href="#1、显示定位地址“重庆市渝中区村55号”-1" class="headerlink" title="1、显示定位地址“重庆市渝中区村55号”"></a>1、显示定位地址“重庆市渝中区村55号”</h6><p>与之前问题相同，但是我们可以改成与传统B2C一样由用户直接选择填写，不调用地图。<br>问题：这样我们商家端的导航功能就不好用了。而且要由用户手动来填写太麻烦<br>解决办法：展示附近推荐地址或搜索推荐地址，由用户选择<br><img src="/2016/01/27/o2oAddress/o2oAddressAdd.webp" alt><br><img src="/2016/01/27/o2oAddress/o2oAddressMap.webp" alt><br><img src="/2016/01/27/o2oAddress/o2oAddressSearch.webp" alt>  </p>
<h6 id="2、显示推荐地址“新干线大厦”"><a href="#2、显示推荐地址“新干线大厦”" class="headerlink" title="2、显示推荐地址“新干线大厦”"></a>2、显示推荐地址“新干线大厦”</h6><p>   问题：客户说，地址不够全面（重庆市渝中区两路口新干线大厦），商家不懂路不懂送。<br>   解决办法：社区O2O与传统B2C不同，每个商家无论超市、外卖、家政、维修等都设置了服务范围，具有区域性，所以订单中地址不需要显示地区。另外补救也可以查看导航与打客户电话沟通。 </p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>多思考，每一个步骤都是有依据有想法，然后根据实际市场需求做调整。别什么都是我改，我兼容。做一个有节操的动物。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>用户体验</tag>
      </tags>
  </entry>
  <entry>
    <title>支付是同步还是异步</title>
    <url>/2018/11/21/pay-syn-or-asyn/</url>
    <content><![CDATA[<p>我们一直认为支付是异步的，从未有过其它可能。最近却被收银员实力打脸。线下门店支付时，平台告诉收银员支付中，客人拿走商品后最终却支付失败，谁来买单？谁背锅？如何面对这样的声色俱厉？    </p>
<h4 id="异步支付"><a href="#异步支付" class="headerlink" title="异步支付"></a>异步支付</h4><p>异步双方不需要共同的时钟，也就是接收方不知道发送方什么时候发送，所以在发送的信息中就要有提示接收方开始接收的信息，如开始位，同时在结束时有停止位。<br>异步的另外一种含义是计算机多线程的异步处理。与同步处理相对，异步处理不用阻塞当前线程来等待处理完成，而是允许后续操作，直至其它线程将处理完成，并回调通知此线程。<br>以上是百度百科的概念。所以我们的<strong>支付服务一定是异步处理接收、查询支付最终结果</strong>，否则所有请求都处于等待支付状态，服务器资源不够，带宽不够，无法支撑大并发。<br>但是我们仍然无法如此回怒收银员。所以我们要告诉她我们是“<br><strong>同步支付</strong>”（对，就是这么没节操）。<br><a id="more"></a> </p>
<h4 id="同步支付"><a href="#同步支付" class="headerlink" title="同步支付"></a>同步支付</h4><p>显然未支付成功顾客不能拿走商品，不管是线上还是线下。<br>线上支付成功后，商品才会被邮寄，虚拟物品也才会发送；线下更是需要确保支付成功后才能拿走商品。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><strong>支付服务程序异步，支付场景同步</strong><br>为什么线上线下都是同步支付却会有严重的用户体验差异呢，是因为线上支付中，不会阻断用户，用户可以干些别的事情，不需要傻等。而线下结账完，用户没办法停留下来刷刷新闻，刷朋友圈,而是需要立即离开。<br>也就是支付程序是异步通知的，针对线下同步场景，需要由轮询或通知实现等待同步</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>支付</tag>
        <tag>异步支付</tag>
        <tag>同步支付</tag>
      </tags>
  </entry>
  <entry>
    <title>产品共享用户的疑问</title>
    <url>/2018/09/20/product-think-facepay-user/</url>
    <content><![CDATA[<p>最初接手”刷脸支付“项目时就有一个疑问，为什么这个项目的用户体系与公司已有的用户体系是隔离的？</p>
<h4 id="共有用户体系好处"><a href="#共有用户体系好处" class="headerlink" title="共有用户体系好处"></a>共有用户体系好处</h4><ol>
<li>有庞大用户基数</li>
<li>宣传导流用户转换更容易</li>
<li>降低新产品推广难度</li>
</ol>
<a id="more"></a>  
<h4 id="与公司用户体系共同点"><a href="#与公司用户体系共同点" class="headerlink" title="与公司用户体系共同点"></a>与公司用户体系共同点</h4><p>1.以用户手机号作为账号<br>2.实名认证</p>
<h4 id="与公司产品不同点"><a href="#与公司产品不同点" class="headerlink" title="与公司产品不同点"></a>与公司产品不同点</h4><ol>
<li>旧有用户绑定银行卡（代扣）或公司已有额度产品；刷脸支付目前有微信免密支付</li>
<li>刷脸支付有绑定用户脸部特征，公司已有用户也有做实名认证或活体识别，只是可能未转换特征信息</li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>微信、支付宝等都在做人脸支付，已有用户基数和用户习惯上可能不及他们。但是还有许多其它可做的，我们只需要把每一个问题做到极致。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>人脸支付</tag>
        <tag>引流</tag>
      </tags>
  </entry>
  <entry>
    <title>如何主动PUSH SDK更新给开发者</title>
    <url>/2017/12/01/push-update-info-2-stargazers-by-github/</url>
    <content><![CDATA[<p>之前苹果禁用jspatch时，涉及到的SDK全部需要更新。此时开发者得全面排查所使用SDK是否需要更新。怎么查？一个一个去SDK官网查看是否有更新解决方案。啰嗦，实现上就是想维护Github上面可怜的Star，所以想利用Github的开放api更新了SDK给他们发个邮件  </p>
<p>1、查询Star的api<br>文档：<a href="https://developer.github.com/v3/activity/starring/" target="_blank" rel="noopener">https://developer.github.com/v3/activity/starring/</a><br>调用：<a href="https://api.github.com/repos/2tu/fit/stargazers" target="_blank" rel="noopener">https://api.github.com/repos/2tu/fit/stargazers</a><br>发现只有user，没有其邮箱  </p>
<p>2、查询用户信息<br>文档：<a href="https://developer.github.com/v3/users/" target="_blank" rel="noopener">https://developer.github.com/v3/users/</a><br>调用：<a href="https://api.github.com/users/2tu" target="_blank" rel="noopener">https://api.github.com/users/2tu</a><br>发现并没有想要的email，提示如下：<br>Note: The returned email is the user’s publicly visible email address (or null if the user has not specified a public email address in their profile). The publicly visible email address only displays for authenticated API users.<br>只能显示用户自己的email，虽然可以通过爬虫直接爬取，但是不正当，该想法搁置</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>如何主动PUSH</tag>
        <tag>SDK更新给开发者</tag>
        <tag>SDK</tag>
        <tag>主动push</tag>
        <tag>github api</tag>
        <tag>fit</tag>
      </tags>
  </entry>
  <entry>
    <title>选择横表还是纵表</title>
    <url>/2023/06/01/row-or-column-table/</url>
    <content><![CDATA[<p>数据库：MySQL 5.7<br>业务上有<strong>25个维度共2000多个指标</strong>数据需要存储。对于这种可变字段的指标数据，第一想法是采用纵表存储。但是具体该如何选择还是得结合业务看优缺点才行。</p>
<h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><h5 id="数据量"><a href="#数据量" class="headerlink" title="数据量"></a>数据量</h5><p>1k台设备，每台设备每5分钟一次全量指标数据，存储60天</p>
<ul>
<li>纵表：60<em>24</em>60/5<em>1000</em>2000=<strong>345.6亿</strong></li>
<li>横表：345.6亿/2000=<strong>1728万</strong></li>
</ul>
<h5 id="查询场景"><a href="#查询场景" class="headerlink" title="查询场景"></a>查询场景</h5><ul>
<li>按指标维度+时间范围分页查</li>
<li><p>按同一时间上报的指标数据（时间+指标名称）</p>
<a id="more"></a>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><h5 id="纵表"><a href="#纵表" class="headerlink" title="纵表"></a>纵表</h5><p>从数据量来看纵表数据量非常大，需考虑分表来解决查询效率问题。<br>如果简单按查询数据量每表2kw来算(数据量不能简单按2kw算，需要计算字段长度，索引的页数大小)，纵表需要分17280张表。按时间分页查询时，需要全表联合查询。</p>
</li>
<li><p>按设备分<br>数据量：1k张表，每张3456万<br>7天分页查询：1k张表联合查询<br>缺点：数据量大；数据分布不均匀；分页查询慢</p>
</li>
<li><p>按维度分<br>数据量：25张表，138240万=13.824亿<br>缺点：数据量大</p>
</li>
<li><p>按维度+时间分<br>数据量：1500张表，2.304亿<br>7天分页查询：7张表关联查询<br>缺点：表数量太多；数据分布不均匀；</p>
</li>
</ul>
<h5 id="横表"><a href="#横表" class="headerlink" title="横表"></a>横表</h5><ul>
<li><p>不分表<br>缺点：字段列数多，MySQL是否支持呢？下面会列一下</p>
</li>
<li><p>按维度分<br>数据量：25张表，每张表约80个字段，70万条数据<br>7天分页查询：不需要联表查询<br>缺点：数据分布不均匀；表字段多；</p>
</li>
<li><p>按维度+细分维度分<br>细分指标只在计算时使用（同一时间上报的指标数据），分页查询时不使用<br>数据量：40张表，每张表约50个字段，44万条数据<br>7天分页查询：不需要联表查询<br>缺点：数据分布不均匀；字段相对减少；</p>
</li>
</ul>
<h4 id="MySQL规范"><a href="#MySQL规范" class="headerlink" title="MySQL规范"></a>MySQL规范</h4><h5 id="每张表支持最大列数"><a href="#每张表支持最大列数" class="headerlink" title="每张表支持最大列数"></a>每张表支持最大列数</h5><p><a href="https://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html" target="_blank" rel="noopener">Column Count Limits：1017</a></p>
<h5 id="每行字节数"><a href="#每行字节数" class="headerlink" title="每行字节数"></a>每行字节数</h5><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-limits.html" target="_blank" rel="noopener">Row Size Limits：65,535 bytes</a></p>
<p><img src="/2023/06/01/row-or-column-table/tablespace_size.png" alt="Table 14.25 InnoDB Maximum Tablespace Size"></p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>横表</tag>
        <tag>纵表</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中Bean的作用域与StepScope关系、疑问</title>
    <url>/2018/01/12/spring-bean-scope/</url>
    <content><![CDATA[<p>Spring Bean有5个作用域，但是最近有需求在多个地方获取同一个Bean，只修改其中一个参数。那么Bean只在一个地方注入，修改属性就好，名字能一样吗？一系列问题<br>这个StepScope是什么鬼，5个默认的Scope能满足需求吗？<br><a id="more"></a> </p>
<h5 id="Bean-scopes"><a href="#Bean-scopes" class="headerlink" title="Bean scopes"></a><a href="https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html" target="_blank" rel="noopener">Bean scopes</a></h5><table>
<thead>
<tr>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>singleton</td>
<td>Scopes a single bean definition to a single object instance per Spring IoC container.</td>
</tr>
<tr>
<td>prototype</td>
<td>Scopes a single bean definition to any number of object instances.</td>
</tr>
<tr>
<td>request</td>
<td>Scopes a single bean definition to the lifecycle of a single HTTP request; that is each and every HTTP request will have its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.</td>
</tr>
<tr>
<td>session</td>
<td>Scopes a single bean definition to the lifecycle of a HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.</td>
</tr>
<tr>
<td>global session</td>
<td>Scopes a single bean definition to the lifecycle of a global HTTP Session. Typically only valid when used in a portlet context. Only valid in the context of a web-aware Spring ApplicationContext.</td>
</tr>
</tbody>
</table>
<p>通常我们使用的是singleton，默认也是。在测试中发现提供相同类型的Bean，需要指定不同的name标识（@Bean(“three”)），使用时对应@Qualifier(“three”)。  </p>
<h5 id="疑问：经测试发现提供相同类型Bean，不指定Qualifier会出错，但是在SpringBatch中指定了-StepScope却没报错，那是如何来区分应该在哪个Step中有效的呢？"><a href="#疑问：经测试发现提供相同类型Bean，不指定Qualifier会出错，但是在SpringBatch中指定了-StepScope却没报错，那是如何来区分应该在哪个Step中有效的呢？" class="headerlink" title="疑问：经测试发现提供相同类型Bean，不指定Qualifier会出错，但是在SpringBatch中指定了@StepScope却没报错，那是如何来区分应该在哪个Step中有效的呢？"></a>疑问：经测试发现提供相同类型Bean，不指定Qualifier会出错，但是在SpringBatch中指定了@StepScope却没报错，那是如何来区分应该在哪个Step中有效的呢？</h5><p>通过查看<a href="https://docs.spring.io/spring-batch/4.0.x/api/org/springframework/batch/core/configuration/annotation/StepScope.html" target="_blank" rel="noopener">StepScope文档</a>可以发现应该还有自定义Scope的存在来实现个性化需求，见<a href="https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html" target="_blank" rel="noopener">Bean scopes</a>之4.4.5 Custom scopes。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/zhanglei93/p/6231882.html" target="_blank" rel="noopener">Spring中Bean的作用域、生命周期</a><br><a href="http://blog.csdn.net/u011468990/article/details/49995865" target="_blank" rel="noopener">Spring中Bean的五个作用域</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBatch</tag>
        <tag>Bean</tag>
        <tag>scope</tag>
        <tag>Qualifier</tag>
        <tag>StepScope</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学第一篇，均值、中位数、众数</title>
    <url>/2018/02/05/statistics-learn1-average/</url>
    <content><![CDATA[<p>均值、中位数、众数是表示一组数据集中趋势的量数，下面以“1,2,3,3,5,7,7,8,9,10”数据集为例</p>
<p>均值,中位数,众数  </p>
<table>
<thead>
<tr>
<th>Type</th>
<th>示例</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>均值(Mean)</td>
<td>(1+2+3+3+5+7+7+8+9+10)/10</td>
<td>5.5</td>
<td>算术平均数。求和，再除个数</td>
</tr>
<tr>
<td>中位数(Median)</td>
<td>(5+7)/2</td>
<td>6</td>
<td>选取平均数。从小到大排序;选取中间的数求算术平均数</td>
</tr>
<tr>
<td>众数(Mode)</td>
<td>3,7</td>
<td>3,7</td>
<td>数据集中出现次数最多的数</td>
</tr>
</tbody>
</table>
<h6 id="众数，有多个数出现的次数最多，则它们都是众数"><a href="#众数，有多个数出现的次数最多，则它们都是众数" class="headerlink" title="众数，有多个数出现的次数最多，则它们都是众数"></a>众数，有多个数出现的次数最多，则它们都是众数</h6><p><a href="2018/01/27/data-analysis-house-price/">使用Java、Excel数据分析如何有效投资房产</a>中在自己实际投资分析中，应该将房价清洗为以千或500为单位后用众数及中位数进行分析更为合理，否则异常值会误导分析</p>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>均值</tag>
        <tag>中位数</tag>
        <tag>众数</tag>
      </tags>
  </entry>
  <entry>
    <title>C++模板多类型形参</title>
    <url>/2019/01/23/template-multiple-typename/</url>
    <content><![CDATA[<p>C++模板与Java泛型有共通之处，为了参数化代码。所以也疑惑C++中的类模板是否与Java泛型相同只能指定一个类型？<br>C++模板格式<br>1、 函数模板格式<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, ...&gt; 返回类型 函数名(参数列表)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2、类模板格式<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, ...&gt; <span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>由此可见，无论函数模板、类模板都支持多类型。如：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt; <span class="class"><span class="keyword">class</span> <span class="title">MultipleTypename</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        T1 a;</span><br><span class="line">        T2 b;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(T1 a)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setB</span><span class="params">(T2 b)</span></span>;</span><br><span class="line">        <span class="function">T1 <span class="title">getA</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">T2 <span class="title">getB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>多形参</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学第二篇，极差、中程数</title>
    <url>/2018/02/09/statistics-learn2-range-mid-range/</url>
    <content><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="极差，数据分开有多远，值越大分开越远，越小数据越紧密"><a href="#极差，数据分开有多远，值越大分开越远，越小数据越紧密" class="headerlink" title="极差，数据分开有多远，值越大分开越远，越小数据越紧密"></a>极差，数据分开有多远，值越大分开越远，越小数据越紧密</h5><h5 id="中程数，考虑集中趋势的又一种方式"><a href="#中程数，考虑集中趋势的又一种方式" class="headerlink" title="中程数，考虑集中趋势的又一种方式"></a>中程数，考虑集中趋势的又一种方式</h5><p>仍然以“1,2,3,3,5,7,7,8,9,10”数据集为例</p>
<p>极差,中程数  </p>
<table>
<thead>
<tr>
<th>Type</th>
<th>示例</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>极差(range)</td>
<td>10-1</td>
<td>9</td>
<td>最大减去最小</td>
</tr>
<tr>
<td>中程数(midrange)</td>
<td>(10-1)/2</td>
<td>4.5</td>
<td>最大减最小，再求算术平均数</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>极差</tag>
        <tag>中程数</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类文件在JVM运行的生命周期</title>
    <url>/2024/02/27/the-class-file-lifecycle-of-jvm/</url>
    <content><![CDATA[<h4 id="java-Class文件结构"><a href="#java-Class文件结构" class="headerlink" title="java Class文件结构"></a>java Class文件结构</h4><p>Java .class 文件是 Java 编程语言的关键组件，遵循精确且定义的结构。 这种结构不仅对于 Java 虚拟机 (JVM) 正确加载和执行字节码至关重要，而且还提供了有关编译后的 Java 代码的大量信息。 下面，我们深入研究类文件结构的基本元素，详细说明每个组件及其在整体架构中的重要性。</p>
<h5 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h5><p>类文件由单个 ClassFile 结构组成。 该结构由 JVM 规范定义并遵循特定格式，其中包括以下主要部分：</p>
<ul>
<li>Magic Number魔数：固定值 (0xCAFEBABE)。 此唯一标识符验证该文件是否是 JVM 可读的有效类文件。</li>
<li>Version Information版本号：major_version、minor_version，java版本号</li>
<li>Constant Pool常量池</li>
<li>Access Flags访问标识</li>
<li>This Class, Super Class,and Interfaces类索引、父类索引与接口索引集合</li>
<li>Fields字段集合</li>
<li>Methods方法表集合</li>
<li>Attributes属性表集合</li>
</ul>
<p>以上信息如何查看？<br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">javap [options] classes...</span><br></pre></td></tr></table></figure></p>
<p>JVM需要使用上述信息来正确加载、验证和执行</p>
<p>其是常量池，它是一个集中的字典，经常被类文件中的其他部分引用，突出了它在整个架构中的重要性。</p>
<h4 id="Class文件在JVM中的生命周期"><a href="#Class文件在JVM中的生命周期" class="headerlink" title="Class文件在JVM中的生命周期"></a>Class文件在JVM中的生命周期</h4><p><img src="/2024/02/27/the-class-file-lifecycle-of-jvm/class-file-lifecycle-in-jvm.png" alt="The Class file Lifecycle of a Java Application"></p>
<h5 id="1-Loading加载"><a href="#1-Loading加载" class="headerlink" title="1. Loading加载"></a>1. Loading加载</h5><p>类加载过程执行以下三个功能：<br>从clas文件创建二进制数据流<br>根据内部数据结构解析二进制数据<br>创建 java.lang.Class 的实例<br>完成此操作后，类实例就可以进行链接了。</p>
<h5 id="2-Linking链接"><a href="#2-Linking链接" class="headerlink" title="2. Linking链接"></a>2. Linking链接</h5><h6 id="2-1-Verification验证"><a href="#2-1-Verification验证" class="headerlink" title="2.1 Verification验证"></a>2.1 Verification验证</h6><p>此步骤可确保安全性和完整性。JVM验证class文件的正确性，文件格式验证、语法是否有效、是否符合Java语言规范。</p>
<h6 id="2-2-Preparation准备"><a href="#2-2-Preparation准备" class="headerlink" title="2.2 Preparation准备"></a>2.2 Preparation准备</h6><p>在准备过程中，JVM 会为类静态变量分配内存，并将其初始化为默认值。</p>
<h6 id="2-3-Resolution解析"><a href="#2-3-Resolution解析" class="headerlink" title="2.3 Resolution解析"></a>2.3 Resolution解析</h6><p>解析阶段包括将类文件中的符号引用解析为直接引用。这就是 JVM 常量池发挥关键作用的地方。主要针对类或接口、字段、类方法、方法类型等。</p>
<h5 id="3-Initializes初始化"><a href="#3-Initializes初始化" class="headerlink" title="3. Initializes初始化"></a>3. Initializes初始化</h5><p>执行静态块： 这一阶段涉及执行静态初始化程序和静态块。JVM 会初始化静态字段，并按照它们在类文件中出现的顺序执行任何静态初始化块。<br>设置最终值： 为类的最终变量分配值，这些值在类的生命周期内不可更改。</p>
<h5 id="4-Usage使用"><a href="#4-Usage使用" class="headerlink" title="4. Usage使用"></a>4. Usage使用</h5><p>实例化： JVM 根据应用程序的需要创建类的实例。<br>执行： 根据运行程序的要求调用和执行方法，访问字段。JVM 会将字节码解释或即时编译为机器代码以便执行。</p>
<h5 id="5-Unloading卸载"><a href="#5-Unloading卸载" class="headerlink" title="5. Unloading卸载"></a>5. Unloading卸载</h5><p>垃圾回收： 当一个类不再需要，也没有对其实例的实时引用时，它就可以被卸载。JVM 的垃圾回收器会回收分配给类的内存。</p>
<p><a href="https://medium.com/@AlexanderObregon/the-anatomy-of-a-java-virtual-machine-class-file-e3773d23f3e3" target="_blank" rel="noopener">The Anatomy of a Java Virtual Machine Class File</a><br><a href="https://www.cesarsotovalero.net/blog/how-the-jvm-executes-java-code.html" target="_blank" rel="noopener">The Execution Lifecycle of a Java Application</a><br><a href="https://docs.oracle.com/en/java/javase/11/tools/javap.html" target="_blank" rel="noopener">javap</a><br><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html" target="_blank" rel="noopener">Chapter 4. The class File Format</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>TV Apps Checklist</title>
    <url>/2016/02/29/tvApplication/</url>
    <content><![CDATA[<p>最近开发一款定制运行于Letv的 TV应用（流云TV），主要用于数据报表展示及小部份交互。本文主要参考于电视猫、VST两款应用，适配小米电视及乐视。</p>
<h4 id="SDK版本及分辨率"><a href="#SDK版本及分辨率" class="headerlink" title="SDK版本及分辨率"></a>SDK版本及分辨率</h4><p>国内目前的电视都是从4.x的Phone SDK修改，所以我们的适配如下表</p>
<table>
<thead>
<tr>
<th>应用</th>
<th style="text-align:center">minSdkVersion</th>
<th style="text-align:center">targetVersion</th>
<th style="text-align:center">分辨率</th>
</tr>
</thead>
<tbody>
<tr>
<td>电视猫</td>
<td style="text-align:center">8</td>
<td style="text-align:center">16</td>
<td style="text-align:center">1280*720</td>
</tr>
<tr>
<td>VST</td>
<td style="text-align:center">15</td>
<td style="text-align:center">19</td>
<td style="text-align:center">1920*1080</td>
</tr>
<tr>
<td><font color="red">流云TV</font></td>
<td style="text-align:center"><font color="red">14</font></td>
<td style="text-align:center"><font color="red">19</font></td>
<td style="text-align:center"><font color="red">1920*1080</font>(xxhdpi)</td>
</tr>
</tbody>
</table>
<a id="more"></a>  
<h4 id="焦点状态显示"><a href="#焦点状态显示" class="headerlink" title="焦点状态显示"></a>焦点状态显示</h4><p>电视端因为缺少触摸操作，焦点处理尤为重要。normal、focus、press状态设计上要明显。  </p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>剩下的就是按键处理、内容显示设计及是否显示屏保等。<br>Manifest<br><code>&lt;uses-feature
        android:name=&quot;android.software.leanback&quot; android:required=&quot;true&quot; /&gt;</code><br><code>&lt;uses-feature
        android:name=&quot;android.hardware.type.television&quot;
        android:required=&quot;true&quot; /&gt;</code></p>
<p><code>&lt;category android:name=&quot;android.intent.category.LEANBACK_LAUNCHER&quot; /&gt;</code>  </p>
<p>参考：<br><a href="http://dev.xiaomi.com/doc/p=2212/index.html" target="_blank" rel="noopener">小米应用开发者文档</a><br><a href="http://bbs.le.com/thread-838866-1.html" target="_blank" rel="noopener">乐视遥控器按键对应表</a><br><a href="http://developer.android.com/intl/zh-cn/training/tv/index.html" target="_blank" rel="noopener">Building Apps for TV</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android TV</tag>
      </tags>
  </entry>
  <entry>
    <title>符合国际标准的城市编码</title>
    <url>/2023/08/03/the-international-standard-country-codes/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>fork的项目<a href="https://github.com/yihong0618/running_page" target="_blank" rel="noopener">running_page</a>有一个<a href="https://github.com/yihong0618/running_page/issues/292" target="_blank" rel="noopener">Issue</a>提到国家和地区识别不正确，看了数据样例较为复杂，有的是有国家省市区，有的只有部分，还有国外的。running_page中代码以逗号分隔取国家，然后根据<a href="http://www.stats.gov.cn/sj/tjbz/qhdm/" target="_blank" rel="noopener">统计用区划代码和城乡划分代码</a>对比取出城市。</p>
<p>问题是，数据是全球的用户是全球的，那全球各个国家和区域的标准应该是什么？中国有省市区，那其他国家有吗？有统一标准吗？</p>
<h3 id="国际标准-ISO-3166"><a href="#国际标准-ISO-3166" class="headerlink" title="国际标准 ISO 3166"></a>国际标准 ISO 3166</h3><p>全球化那就必然要找国际标准了，看这里<a href="https://en.wikipedia.org/wiki/ISO_3166" target="_blank" rel="noopener">ISO 3166</a>, <strong><em>Codes for the representation of names of countries and their subdivisions</em></strong></p>
<p>里面又包含了</p>
<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-1" target="_blank" rel="noopener">ISO 3166-1</a></strong> 国家代码</li>
<li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-2" target="_blank" rel="noopener">ISO 3166-2</a></strong> 国家分支机构代码</li>
<li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-3" target="_blank" rel="noopener">ISO 3166-3</a></strong> 国家曾用名代码</li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>我们拿到gps后做需要逆地址解析拿到ISO 3166标准的代码，有哪些方式可以呢，google map？</p>
<p>我调研了2个方式</p>
<a id="more"></a>
<h4 id="GeoNames"><a href="#GeoNames" class="headerlink" title="GeoNames"></a>GeoNames</h4><p>The GeoNames geographical database covers all countries and contains over eleven million placenames that are available for download free of charge.</p>
<p>免费全球地理数据库</p>
<p>注册账号，每个账号有免费调用接口额度，对于个人来说完全够了，接口不同占用额度不同，具体如下</p>
<p><a href="https://www.geonames.org/export/" target="_blank" rel="noopener">Terms and Conditions</a></p>
<p><img src="/2023/08/03/the-international-standard-country-codes/terms-and-conditions.png" alt="Terms and Conditions"></p>
<p><a href="https://www.geonames.org/export/credits.html" target="_blank" rel="noopener">GeoNames Webservice Credits</a></p>
<p><img src="/2023/08/03/the-international-standard-country-codes/webservice-credits.png" alt="GeoNames Webservice Credits"></p>
<h4 id="Nominatim"><a href="#Nominatim" class="headerlink" title="Nominatim"></a>Nominatim</h4><p><a href="https://nominatim.org/release-docs/develop/" target="_blank" rel="noopener">Nominatim</a></p>
<p>Nominatim 是一个开源的地理数据库，可通过 REST API 访问。它由 OpenStreetMap 社区维护，包含来自各种来源的数据，包括 OpenStreetMap 数据库、维基百科和其他开放数据集。</p>
<p>Nominatim 解析的地址是使用国际标准化组织 (ISO) 3166 标准。ISO 3166 标准定义了世界各国的名称和代码。Nominatim 还使用其他标准，如 ISO 6709 标准，该标准定义了地理坐标的格式。</p>
<p>有python库Nominatim</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMjU3MjUyMg==&amp;mid=2247484595&amp;idx=4&amp;sn=0cbe29b0051ac460b3bb7924dba62395&amp;chksm=e89397b6dfe41ea03322c234d5745812f144968e74034fc229b550bab65a1755a1fba446629b&amp;scene=27" target="_blank" rel="noopener">对ISO3166《国家和所属地区名称代码》国际标准的几点认识</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title>蓝牙和WIFI在智能硬件中的应用</title>
    <url>/2019/04/30/u-know-bluetooth-and-wireless/</url>
    <content><![CDATA[<p>某天加班后在一个苍蝇馆子吃完饭开发票。老板娘用手机将公司信息录入后一个黑暗的角落里付出了吱吱..吱吱吱的打印声，整个店里面没有电脑。好奇解决小店摆不下电脑，不会使用电脑，不愿多花钱买电脑的黑科技如何实现<strong>手机连接打印机打印发票</strong>。</p>
<p>手机无线传输有三种，蓝牙、WIFI，还有NFC。这种场景下可以排除NFC。  </p>
<p>在我古老认知中，蓝牙可以传照片、文件，还有蓝牙耳机。</p>
<p>WIFI可以上网，还有在换手机时备份数据也是用WIFI。  </p>
<a id="more"></a>
<p>这个打印发票是采用的哪一种呢？</p>
<p>一定不能是WIFI，从用户使用角度来看，手机连打印机的WIFI后，手机无法上网。打印机连接手机，打印机无法辨识连接哪个WIFI。</p>
<p>从硬件上来看，WIFI较蓝牙虽然传输距离长，但功耗高，价格更贵。</p>
<p>所以这款<strong>打印机与手机是采用的蓝牙传输</strong>。</p>
<p><img src="/css/images/adaptive-battery.png" alt="连接"></p>
<p>其实智能设备交互已经侵入我们生活，无线数据传输都逃不出这三种模式。</p>
<p>蓝牙：音响、耳机、手环、手机刷卡器</p>
<p>WIFI：扫地机器人、小米行车记录仪、摄像头、空调、洗衣机、窗帘，好多好多  </p>
<p>NFC：公交充值、门卡等</p>
<p>蓝牙都是直连（两个设备连接），而WIFI部份在不需要介入外网的情况下可以直连，另外还可以接入外网方便远程查看和操作。</p>
<p>智能硬件就这么简单，所以你有想好如何利用他们解决痛点吗？</p>
<p>未来已来，你来不来？</p>
<p>—  END  —<br>分享程序员所看、所想、所悟、所望</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>智能硬件</tag>
        <tag>WIFI</tag>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title>use RestTemplate in Spring</title>
    <url>/2017/03/13/use-RestTemplate-in-Spring/</url>
    <content><![CDATA[<p>Spring中提供RestTemplate方便访问Web服务，不再需要使用HttpClient、HttpComponents等</p>
<h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>使用方式详细见<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">api</a>，唯一注意区别参数uriVariables，遵循RESTful风格为uri变量，如：<a href="https://api.github.com/users/2tu" target="_blank" rel="noopener">https://api.github.com/users/2tu</a><br>可以写成</p>
<pre><code class="java">restTemplate.getForObject("https://api.github.com/users/{userName}", String.class, "2tu");  
Map&lt;String, String&gt; uriVariables = Collections.singletonMap(<span class="string">"userName"</span>, <span class="string">"2tu"</span>); 
restTemplate.getForObject(<span class="string">"https://api.github.com/users/{userName}"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">uriVariables</span>)</span>;
</code></pre>
<font color="red">注：SpringBoot默认采用jackson</font>

<p>参考：<br><a href="https://spring.io/guides/gs/consuming-rest/" target="_blank" rel="noopener">Consuming a RESTful Web Service</a><br><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">RestTemplate API</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>RestTemplate</tag>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE中使用Mock模拟数据请求</title>
    <url>/2020/04/08/use_mockjs_vue/</url>
    <content><![CDATA[<p>是<br><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a> 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试。提供了以下模拟功能：</p>
<ul>
<li>根据数据模板生成模拟数据</li>
<li>模拟 Ajax 请求，生成并返回模拟数据</li>
<li>基于 HTML 模板生成模拟数据</li>
</ul>
<p>记录一下在项目中的使用方法</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> mockjs</span><br></pre></td></tr></table></figure>
<p>当然通常在项目中会在package.json中添加mockjs依赖，再npm install所有项目中需要依赖的库</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"mockjs"</span>: <span class="string">"^1.1.0"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>src/mock/index.js<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mock</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configArray = []</span><br><span class="line"><span class="comment">// 使用webpack的require.context()遍历所有mock文件</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.context(<span class="string">'.'</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line">files.keys().forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">'./index.js'</span>) <span class="keyword">return</span></span><br><span class="line">  configArray = configArray.concat(files(key).default)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拦截ajax请求的相应时间</span></span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">  timeout: <span class="string">'200-600'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册所有的mock服务</span></span><br><span class="line">configArray.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [path, target] of <span class="built_in">Object</span>.entries(item)) &#123;</span><br><span class="line">    <span class="keyword">const</span> protocol = path.split(<span class="string">'|'</span>)</span><br><span class="line">    Mock.mock(protocol[<span class="number">1</span>], protocol[<span class="number">0</span>], target)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>main.js中引入</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发环境引入</span></span><br><span class="line"><span class="selector-tag">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="selector-tag">require</span>(<span class="string">'@/mock'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mock文件下建立personList.js<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">let personList = [&#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: <span class="string">'小丽'</span>,</span><br><span class="line">        age: <span class="string">'18'</span>,</span><br><span class="line">        number: <span class="string">'8'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: <span class="string">'小芳'</span>,</span><br><span class="line">        age: <span class="string">'20'</span>,</span><br><span class="line">        number: <span class="string">'6'</span></span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>&#123;</span><br><span class="line">    <span class="string">'get|/parameter/query'</span>:  option =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      status: 200,</span><br><span class="line">      message: <span class="string">'success'</span>,</span><br><span class="line">      data: personList</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来在网络请求时，发现如果是get请求路径是/parameter/query，就会返回我们mock定义好的数据。另外还有其它语法来生成随机数据。详细参考<a href="http://mockjs.com/0.1/#%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%9D%BF%E5%AE%9A%E4%B9%89%20DTD" target="_blank" rel="noopener">数据模板定义 DTD</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="http://mockjs.com" target="_blank" rel="noopener">Mock.js</a><br> <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Mock</tag>
        <tag>mockjs</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Manifest中找不到versionCode?</title>
    <url>/2018/01/09/versionCode-not-exist-in-manifest/</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>17年做的update（升级平台）交由其它团队维护后，发现解析Manifest后未找到versionCode、versionName信息。<br>大家都讲终极绝招，使用aapt来获取，但是这样耦合低，并且得在服务器上维护Android环境，显然不合理。所以要干他<br>此文都是解决思路，心急直接看最后的结论</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>Android Studio 3.0</li>
<li>Gradle 4.1</li>
<li>targetSdkVersion 26 minSdkVersion 8</li>
<li>apktool 2.3.1</li>
<li>AXMLPrinter2</li>
<li>APKParser</li>
</ul>
<a id="more"></a>
<h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><h5 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h5><p>第一想法，通过apktool反编译查看AndroidManifest中是否不存在version信息。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;?xml <span class="attribute">version</span>=<span class="string">"1.0"</span> <span class="attribute">encoding</span>=<span class="string">"utf-8"</span> <span class="attribute">standalone</span>=<span class="string">"no"</span>?&gt;</span><br><span class="line">&lt;manifest xmlns:<span class="attribute">android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attribute">package</span>=<span class="string">"com.tu.sample"</span> <span class="attribute">platformBuildVersionCode</span>=<span class="string">"26"</span> <span class="attribute">platformBuildVersionName</span>=<span class="string">"7.1.1"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>结果是不存在的，于是把怀疑指向是否google的锅，Android Studio?Gradle?targetVersion?</p>
<h5 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio?"></a>Android Studio?</h5><p><a href="https://stackoverflow.com/questions/44225780/android-studio-3-0-canary-2-attribute-androidversioncode-not-found" target="_blank" rel="noopener">Android Studio 3.0 Canary 2: attribute ‘android:versionCode’ not found</a><br>然后经过对比发现仍然不是这个问题，继续搞  </p>
<h5 id="Gradle-targetVersion"><a href="#Gradle-targetVersion" class="headerlink" title="Gradle?targetVersion?"></a>Gradle?targetVersion?</h5><p>安装在低版本的手机上仍然可以获取，即使Google要改这个规则至少得兼容旧版本。并且阅读Android官方文档后也没见有提及，所以这个原因也可以排除。见<a href="https://developer.android.google.cn/studio/publish/versioning.html?hl=zh-cn" target="_blank" rel="noopener">设置应用版本信息</a><br>程序猿要开始怀疑人生了</p>
<h5 id="Android-Studio-Analyze-APK"><a href="#Android-Studio-Analyze-APK" class="headerlink" title="Android Studio Analyze APK"></a>Android Studio Analyze APK</h5><p>无意间使用Analyze APK查看了一下，信息如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;?xml <span class="attribute">version</span>=<span class="string">"1.0"</span> <span class="attribute">encoding</span>=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;manifest</span><br><span class="line">    xmlns:<span class="attribute">android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">package</span>=<span class="string">"com.tu.sample"</span></span><br><span class="line">    <span class="attribute">platformBuildVersionCode</span>=<span class="string">"26"</span></span><br><span class="line">    <span class="attribute">platformBuildVersionName</span>=<span class="string">"7.1.1"</span></span><br><span class="line">    android:<span class="attribute">versionCode</span>=<span class="string">"24400"</span></span><br><span class="line">    android:<span class="attribute">versionName</span>=<span class="string">"2.4.4"</span>&gt;</span><br><span class="line">``` </span><br><span class="line">艹尼玛，居然是有的，因为官方解析，还是因为真的有？</span><br><span class="line"></span><br><span class="line"><span class="comment">#####  Build目录  </span></span><br><span class="line">查看build/intermediates/manifests/full/debug和release下的AndroidManifest均与Analyze APK查看的内容匹配。  </span><br><span class="line">开始怀疑自己</span><br><span class="line"></span><br><span class="line"><span class="comment">#####  apktool?</span></span><br><span class="line">再看apktool解析出来的内容，其中有一个文件apktool.yml，简要内容如下</span><br></pre></td></tr></table></figure>
<p>!!brut.androlib.meta.MetaInfo<br>apkFileName: sample.apk<br>compressionType: false<br>doNotCompress:</p>
<ul>
<li>arsc<br>isFrameworkApk: false<br>packageInfo:<br>forcedPackageId: ‘127’<br>renameManifestPackage: null<br>sdkInfo:<br>minSdkVersion: ‘8’<br>targetSdkVersion: ‘26’<br>usesFramework:<br>ids:<ul>
<li>1<br>tag: null<br>version: 3.0.1<br>versionInfo:<br>versionCode: ‘24400’<br>versionName: 2.4.4<br><code>`</code><br>居然也是有的，那么是解析方式变了，还是Manifest中没有？终极绝招读源码，但是由于我只是抽空（好奇）支持一把，没有时间耗（懒）。但总是舒了一口气，不用再使用aapt这种方式来解决了。<br>回到我们自己的解析程序中来</li>
</ul>
</li>
</ul>
<h5 id="AXMLPrinter2"><a href="#AXMLPrinter2" class="headerlink" title="AXMLPrinter2"></a>AXMLPrinter2</h5><p>update中采用<a href="https://code.google.com/archive/p/android4me/downloads" target="_blank" rel="noopener">AXMLPrinter2</a>库来解析。这个库早已没维护并衍生了很多其它版本，如<a href="https://code.google.com/archive/p/xml-apk-parser/" target="_blank" rel="noopener">APKParser</a><br>发现通过这个库解析出来的Manifest是含有version信息的，内容与Analyze APK一致。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>Manifest中仍然有版本信息，规则不变。由于AXMLPrinter2解析库问题导致。具体原因不分析，留给目前的团队和有兴趣的人解决。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.google.cn/studio/publish/versioning.html?hl=zh-cn" target="_blank" rel="noopener">设置应用版本信息</a><br><a href="https://code.google.com/archive/p/android4me/downloads" target="_blank" rel="noopener">AXMLPrinter2</a><br><a href="https://code.google.com/archive/p/xml-apk-parser/" target="_blank" rel="noopener">APKParser</a><br><a href="https://stackoverflow.com/questions/44225780/android-studio-3-0-canary-2-attribute-androidversioncode-not-found" target="_blank" rel="noopener">Android Studio 3.0 Canary 2: attribute ‘android:versionCode’ not found</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>versionCode</tag>
        <tag>manifest</tag>
        <tag>APKParser</tag>
        <tag>AXMLPrinter2</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中添加背景水印，含WebView</title>
    <url>/2020/04/19/watermark-by-android/</url>
    <content><![CDATA[<p>绝密资料，必须加上水印背景以免外传，在Android中如何实现呢？分为普通背景水印和加载网页中添加水印。当然网页本身可以直接加，WebView加载下来直接就有了，这种方案我们不讨论，只讨论在WebView中追加。<br>先上效果图：<br>普通背景水印<br><img src="/2020/04/19/watermark-by-android/bg.jpeg" alt="普通背景水印"><br>网页水印<br><a id="more"></a><br><img src="/2020/04/19/watermark-by-android/webview.jpeg" alt="网页水印"></p>
<h4 id="普通背景水印"><a href="#普通背景水印" class="headerlink" title="普通背景水印"></a>普通背景水印</h4><p>创建一个水印Bitmap，为rootView设置背景。so easy,直接上代码 </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void on<span class="constructor">Create(Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">  super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">  set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_watermark</span>)</span>;</span><br><span class="line">  <span class="keyword">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">    find<span class="constructor">ViewById(<span class="params">android</span>.R.<span class="params">id</span>.<span class="params">content</span>)</span>.set<span class="constructor">Background(<span class="params">background</span>(<span class="string">"水印"</span>)</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    find<span class="constructor">ViewById(<span class="params">android</span>.R.<span class="params">id</span>.<span class="params">content</span>)</span>.set<span class="constructor">BackgroundDrawable(<span class="params">background</span>(<span class="string">"水印"</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">BitmapDrawable background(String watermark)&#123;</span><br><span class="line">  Bitmap bitmap = <span class="module-access"><span class="module"><span class="identifier">Bitmap</span>.</span></span>create<span class="constructor">Bitmap(240, 240, Bitmap.Config.ARGB_8888)</span>;</span><br><span class="line">  Canvas canvas = <span class="keyword">new</span> <span class="constructor">Canvas(<span class="params">bitmap</span>)</span>;</span><br><span class="line">  canvas.draw<span class="constructor">Color(Color.WHITE)</span>;</span><br><span class="line">  Paint paint = <span class="keyword">new</span> <span class="constructor">Paint()</span>;</span><br><span class="line">  paint.set<span class="constructor">Color(Color.GRAY)</span>;</span><br><span class="line">  paint.set<span class="constructor">Alpha(80)</span>;</span><br><span class="line">  paint.set<span class="constructor">AntiAlias(<span class="params">true</span>)</span>;</span><br><span class="line">  paint.set<span class="constructor">TextAlign(Paint.Align.LEFT)</span>;</span><br><span class="line">  paint.set<span class="constructor">TextSize(40)</span>;</span><br><span class="line">  Path path = <span class="keyword">new</span> <span class="constructor">Path()</span>;</span><br><span class="line">  path.move<span class="constructor">To(30, 150)</span>;</span><br><span class="line">  path.line<span class="constructor">To(300, 0)</span>;</span><br><span class="line">  canvas.draw<span class="constructor">TextOnPath(<span class="params">watermark</span>, <span class="params">path</span>, 0, 30, <span class="params">paint</span>)</span>;</span><br><span class="line"></span><br><span class="line">  BitmapDrawable bitmapDrawable = <span class="keyword">new</span> <span class="constructor">BitmapDrawable(<span class="params">bitmap</span>)</span>;</span><br><span class="line">  bitmapDrawable.set<span class="constructor">TileModeXY(Shader.TileMode.REPEAT, Shader.TileMode.REPEAT)</span>;</span><br><span class="line">  bitmapDrawable.set<span class="constructor">Dither(<span class="params">true</span>)</span>;</span><br><span class="line">  return  bitmapDrawable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="网页水印"><a href="#网页水印" class="headerlink" title="网页水印"></a>网页水印</h4><p>网页背景水印<br>在网页加载完成后插入javascript添加div水印<br><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line">String addWaterMarker(String watermark) &#123;</span><br><span class="line">    String js = <span class="string">"var newscript = document.createElement(\"</span>script\<span class="string">");"</span>;</span><br><span class="line">    js += <span class="string">"var bbTextNode = document.createTextNode(\"</span><span class="string">";</span></span><br><span class="line"><span class="string">    js += "</span><span class="keyword">var</span> can = document.createElement(<span class="string">'canvas'</span>);<span class="string">";</span></span><br><span class="line"><span class="string">    js +=</span></span><br><span class="line"><span class="string">        "</span><span class="keyword">var</span> body = document.body;body.appendChild(can);can.width=<span class="number">400</span>; can.height=<span class="number">200</span>;can.style.display=<span class="string">'none'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span><span class="keyword">var</span> cans = can.getContext(<span class="string">'2d'</span>);cans.rotate(-<span class="number">20</span>*Math.PI/<span class="number">180</span>);cans.font = <span class="string">'16px Microsoft JhengHei'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>cans.fillStyle = <span class="string">'rgba(17, 17, 17, 0.50)'</span>;cans.textAlign = <span class="string">'left'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>cans.textBaseline = <span class="string">'Middle'</span>;cans.fillText(<span class="string">'watermark'</span>,can.width/<span class="number">3</span>,can.height/<span class="number">2</span>);<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>body.style.backgroundImage=<span class="string">'url('</span>+can.toDataURL(<span class="string">'image/png'</span>)+<span class="string">')'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string">    js += "</span>\<span class="string">");"</span>;</span><br><span class="line">    js += <span class="string">"newscript.appendChild(bbTextNode);"</span>;</span><br><span class="line">    js += <span class="string">"var t = document.createTextNode(\"</span>alert(<span class="string">'action'</span>);\<span class="string">");"</span>;</span><br><span class="line">    js += <span class="string">"newscript.appendChild(t);"</span>;</span><br><span class="line">    //js += <span class="string">"newscript.onload=function()&#123;xxx();&#125;;"</span>;  //xxx()代表js中某方法</span><br><span class="line">    js += <span class="string">"document.body.appendChild(newscript);"</span>;</span><br><span class="line"></span><br><span class="line">    return js;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String addWaterMarkerDiv(String watermark) &#123;</span><br><span class="line">    String js = <span class="string">"var newscript = document.createElement(\"</span>script\<span class="string">");"</span>;</span><br><span class="line"></span><br><span class="line">    js += <span class="string">"var waterMarkDiv = document.createTextNode(\"</span><span class="string">"</span></span><br><span class="line"><span class="string">        //+"</span><span class="keyword">if</span>(document.getElementById(<span class="string">'waterMark'</span>) != null) return;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span><span class="keyword">var</span> m = <span class="string">'waterMark'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span><span class="keyword">var</span> newMark = document.createElement(<span class="string">'div'</span>);<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.id = m;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.position = <span class="string">'absolute'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.zIndex = <span class="string">'9527'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.top = <span class="string">'0px'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.left = <span class="string">'0px'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.width = <span class="string">'800px'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>newMark.style.height = <span class="string">'400px'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>alert(<span class="string">'newmark'</span>);<span class="string">"</span></span><br><span class="line"><span class="string">        + "</span>\<span class="string">");"</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    js += <span class="string">"newscript.appendChild(waterMarkDiv);"</span>;</span><br><span class="line">    js += <span class="string">"var bbTextNode = document.createTextNode(\"</span><span class="string">";</span></span><br><span class="line"><span class="string">    js += "</span><span class="keyword">var</span> can = document.createElement(<span class="string">'canvas'</span>);<span class="string">";</span></span><br><span class="line"><span class="string">    js +=</span></span><br><span class="line"><span class="string">        "</span><span class="keyword">var</span> body = document.body;body.appendChild(can);can.width=<span class="number">400</span>; can.height=<span class="number">200</span>;can.style.display=<span class="string">'none'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span><span class="keyword">var</span> cans = can.getContext(<span class="string">'2d'</span>);cans.rotate(-<span class="number">20</span>*Math.PI/<span class="number">180</span>);cans.font = <span class="string">'16px Microsoft JhengHei'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>cans.fillStyle = <span class="string">'rgba(17, 17, 17, 0.50)'</span>;cans.textAlign = <span class="string">'left'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>cans.textBaseline = <span class="string">'Middle'</span>;cans.fillText(<span class="string">'watermark'</span>,can.width/<span class="number">3</span>,can.height/<span class="number">2</span>);<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>newMark.style.backgroundImage=<span class="string">'url('</span>+can.toDataURL(<span class="string">'image/png'</span>)+<span class="string">')'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>newMark.style.filter = <span class="string">'alpha(opacity=50)'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">            + "</span>document.body.appendChild(newMark);<span class="string">"</span></span><br><span class="line"><span class="string">    ;</span></span><br><span class="line"><span class="string">    js += "</span>\<span class="string">");"</span>;</span><br><span class="line">    js += <span class="string">"newscript.appendChild(bbTextNode);"</span>;</span><br><span class="line">    js += <span class="string">"document.body.appendChild(newscript);"</span>;</span><br><span class="line"></span><br><span class="line">    return js;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/2tu/Demos/tree/master/app/src/main/java/com/tu/example/watermark" target="_blank" rel="noopener">完整demo例子</a></p>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p><a href="https://www.cnblogs.com/rayray/p/3680500.html" target="_blank" rel="noopener">【Android】webview javascript 注入方法</a><br><a href="https://m.jb51.net/article/22279.htm" target="_blank" rel="noopener">Javascript 网页水印(非图片水印)实现代码</a><br><a href="https://segmentfault.com/q/1010000011817297" target="_blank" rel="noopener">html如何添加水印？</a> </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>水印</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AndroidStudio开发JNI并开启Native Debugger</title>
    <url>/2016/03/24/welcomeJNI/</url>
    <content><![CDATA[<p>不使用eclipse开发JNI，使用谷歌亲儿子AndroidStudio，并开启Native Debugger  </p>
<h3 id="一、创建JNI工程"><a href="#一、创建JNI工程" class="headerlink" title="一、创建JNI工程"></a>一、创建JNI工程</h3><h4 id="1、android-useDeprecatedNdk-true"><a href="#1、android-useDeprecatedNdk-true" class="headerlink" title="1、android.useDeprecatedNdk=true"></a>1、android.useDeprecatedNdk=true</h4><p>在gradle.properties中添加“android.useDeprecatedNdk=true”，否则会报<br>”Error: NDK integration is deprecated in the current plugin.  Consider trying the new experimental plugin.“  </p>
<h4 id="2、创建CLog类"><a href="#2、创建CLog类" class="headerlink" title="2、创建CLog类"></a>2、创建CLog类</h4><p>添加native方法<br><code>public static native void i();</code>  </p>
<h4 id="3、采用javah使用生成头文件"><a href="#3、采用javah使用生成头文件" class="headerlink" title="3、采用javah使用生成头文件"></a>3、采用javah使用生成头文件</h4><p>创建JNI目录</p>
<a id="more"></a>
<p><img src="/2016/03/24/welcomeJNI/welcomeJNI01.webp" alt><br>创建后实际的jni目录为app/src/main/jni，与java同级<br>打开Terminal,执行javah -d ../jni/ -jni com.tu.jnilog.clog.CLog命令生成头文件至jni目录  </p>
<h4 id="4、实现头文件"><a href="#4、实现头文件" class="headerlink" title="4、实现头文件"></a>4、实现头文件</h4><figure class="highlight plain"><figcaption><span>"com_tu_jnilog_clog_CLog.h"  </span></figcaption><table><tr><td class="code"><pre><span class="line">#include &lt;android&#x2F;log.h&gt;  </span><br><span class="line">#define LOG_TAG &quot;CLOG&quot;  </span><br><span class="line">#define LOGI(...)    </span><br><span class="line">__android_log_print(ANDROID_LOG_INFO, LOG_TAG,  __VA_ARGS__)</span><br><span class="line"></span><br><span class="line">void Java_com_tu_jnilog_clog_CLog_i</span><br><span class="line">        (JNIEnv *env, jclass)&#123;</span><br><span class="line">        LOGI(&quot;c++ call android log api&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、添加moduleName及支持平台"><a href="#5、添加moduleName及支持平台" class="headerlink" title="5、添加moduleName及支持平台"></a>5、添加moduleName及支持平台</h4><p>接下来将c编译成so，引用并调用。<br>在AndroidStudio中在defaultConfig配置中添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moduleName &quot;CLog&quot;  </span><br><span class="line">ldLibs &quot;log&quot;&#x2F;&#x2F;实现__android_log_print  </span><br><span class="line">abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot;&#x2F;&#x2F;如果不添加，测试发现是全部平台  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6、loadLibrary"><a href="#6、loadLibrary" class="headerlink" title="6、loadLibrary"></a>6、loadLibrary</h4><p>在CLog类中添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	System.loadLibrary(&quot;CLog&quot;);&#x2F;&#x2F;与指定的module</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="二、开启Native-Debugger"><a href="#二、开启Native-Debugger" class="headerlink" title="二、开启Native Debugger"></a>二、开启Native Debugger</h3><h4 id="1、激活Native代码调试"><a href="#1、激活Native代码调试" class="headerlink" title="1、激活Native代码调试"></a>1、激活Native代码调试</h4><p>在module下build.gradle中buildTypes添加</p>
<pre><code class="debug{">  jniDebuggable true
}
</code></pre>
<p>否则会报Error: Build type isn’s JNI debuggable</p>
<h4 id="2、Edit-Configurations"><a href="#2、Edit-Configurations" class="headerlink" title="2、Edit Configurations"></a>2、Edit Configurations</h4><p> Run-&gt;Edit Configurations-&gt;开启Hybrid调试<br> <img src="/2016/03/24/welcomeJNI/welcomeJNI02.webp" alt></p>
<p>打上断点，选择创建的Native运行即可</p>
<p>示例工程参见 <a href="https://github.com/2tu/JNILog" target="_blank" rel="noopener">JNILog</a></p>
<p>参考：<br><a href="http://toutiao.com/a6265272977680924930" target="_blank" rel="noopener">Android Studio 1.5+ 中混合调试</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>JNI</tag>
        <tag>AndroidStudio</tag>
        <tag>Debugger</tag>
        <tag>Native</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器时间错误导致MySQL证书错误问题</title>
    <url>/2023/06/24/what-cause-hibernate-dialect-not-set/</url>
    <content><![CDATA[<h3 id="HibernateException-‘hibernate-dialect’-not-set"><a href="#HibernateException-‘hibernate-dialect’-not-set" class="headerlink" title="HibernateException ‘hibernate.dialect’ not set"></a>HibernateException ‘hibernate.dialect’ not set</h3><p><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/hibernate-dialect-not-set.png" alt><br>同一个jar包，在某个环境下启动应用报错，另一个环境可以正常启动。报上面的错误<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be <span class="keyword">null</span> when <span class="string">'hibernate.dialect'</span> not set</span><br></pre></td></tr></table></figure></p>
<h3 id="MySQL证书错误"><a href="#MySQL证书错误" class="headerlink" title="MySQL证书错误"></a>MySQL证书错误</h3><p>查看MySQL日志mysql/mysqld.log其中有<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-05</span>T02:<span class="number">19</span>:<span class="number">10.762462</span>Z <span class="number">0</span> [Note] Found ca.pem, server-cert.pem <span class="keyword">and</span> server-key.pem <span class="keyword">in</span> data directory. Trying to enable SSL support using them.</span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-05</span>T02:<span class="number">19</span>:<span class="number">10.762482</span>Z <span class="number">0</span> [Note] Skipping generation of SSL certificates as certificate files are present <span class="keyword">in</span> data directory.</span><br></pre></td></tr></table></figure><br><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/mysqld-log-cert.png" alt="MySQL cert error"><br><a id="more"></a><br><strong>服务器安装时服务器时间为2000年，在这个时间下安装启动了MySQL，现在将服务器时间正常同步为2023年，服务器时间差异大，MySQL证书过期导致无法访问</strong></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol>
<li>删除旧证书</li>
<li>重启MySQL<br><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/rm-pem.png" alt="rm pem"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><a href="https://dev.mysql.com/doc/mysql-security-excerpt/5.7/en/creating-ssl-rsa-files-using-mysql.html" target="_blank" rel="noopener">Creating SSL and RSA Certificates and Keys using MySQL</a></li>
</ol>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++参数中的_In_和_Out_代表什么</title>
    <url>/2023/09/28/what-is-In-Out-on-cpp/</url>
    <content><![CDATA[<p>最近看方法参数中的疑惑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sai_status_t</span> <span class="title">sai_api_query</span><span class="params">(_In_ <span class="keyword">sai_api_t</span> sai_api_id, _Out_ <span class="keyword">void</span>** api_method_table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>_In_和_Out_是用于标记参数的传递方式的注解。它们并不是C\C++语言的关键字，而是一种约定俗成的注释方式，用于提示函数的调用者和阅读者关于参数的特性。</p>
<p>_In_表示该参数是输入参数，即函数内部会读取参数的值，但不会修改它。通过这个标记，我们可以清楚地知道该参数在函数内部只被用于读取数据。</p>
<p>_Out_表示该参数是输出参数，即函数内部会修改参数的值，并将修改后的结果返回给调用者。通过这个标记，我们可以清楚地知道该参数在函数内部会被修改，我们在调用函数时需要确认传入的参数具备存储修改后结果的能力。</p>
<a id="more"></a>
<p>总结起来，_In_和_Out_这两个标记主要用于提供参数的传递方式的额外信息，帮助理解函数的行为和外部变量的使用。</p>
<p>上面的**又是什么意思呢？</p>
<p>&amp;&amp; 和 &amp; 是 C++ 中的运算符，<strong> 和 * 是 C++ 中的指针。&amp;&amp; 和 &amp; 表示引用和取地址，</strong> 和 * 表示指针的指针和指针。</p>
<p><strong>&amp;&amp; 和 &amp; 的区别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">&amp;&amp;</th>
<th style="text-align:left">&amp;</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">定义</td>
<td style="text-align:left">引用</td>
<td style="text-align:left">取地址</td>
</tr>
<tr>
<td style="text-align:left">用途</td>
<td style="text-align:left">指向变量</td>
<td style="text-align:left">获取变量的地址</td>
</tr>
<tr>
<td style="text-align:left">实现</td>
<td style="text-align:left">可以用来避免值传递造成的副本开销</td>
<td style="text-align:left">可以用来访问变量的值</td>
</tr>
</tbody>
</table>
<p><strong>*<em> 和 </em> 的区别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">**</th>
<th style="text-align:left">*</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">定义</td>
<td style="text-align:left">指针的指针</td>
<td style="text-align:left">指针</td>
</tr>
<tr>
<td style="text-align:left">用途</td>
<td style="text-align:left">存储另一个指针的地址</td>
<td style="text-align:left">存储变量的地址</td>
</tr>
<tr>
<td style="text-align:left">实现</td>
<td style="text-align:left">可以用来实现链表、树等数据结构</td>
<td style="text-align:left">可以用来访问变量的值</td>
</tr>
</tbody>
</table>
<p><strong>示例</strong></p>
<p>C++</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &amp;&amp; 和 &amp;</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;y = x;</span><br><span class="line"><span class="built_in">int</span> *p = &amp;x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ** 和 *</span></span><br><span class="line"><span class="built_in">int</span> *p1 = new <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">int</span> **pp = &amp;p1;</span><br></pre></td></tr></table></figure>
<p>请谨慎使用代码。<a href="https://bard.google.com/faq#coding" target="_blank" rel="noopener">了解详情</a></p>
<p>content_copy</p>
<p>在这种情况下，<code>y</code> 是一个引用，它指向变量 <code>x</code>。<code>p</code> 是一个指针，它指向变量 <code>x</code> 的地址。<code>p1</code> 是一个指针，它指向一个整数。<code>pp</code> 是一个指针，它指向一个指针，该指针指向一个整数。</p>
<p><strong>结论</strong></p>
<p>&amp;&amp; 和 &amp; 表示引用和取地址，*<em> 和 </em> 表示指针的指针和指针。</p>
<p><strong>总结</strong></p>
<p>*<em> 和 </em> 在 C 和 C++ 中的区别在于：</p>
<ul>
<li>** 在 C 中表示指针的指针，在 C++ 中表示指针。</li>
<li>** 在 C 中可以用来存储另一个指针的地址，在 C++ 中可以用来存储变量的地址。</li>
</ul>
<p>因此，&amp;&amp; 和 &amp; 在 C 和 C++ 中都是可用的，意思也完全相同。*<em> 和 </em> 在 C 中也可以使用，但意思与 C++ 中的意思有所不同。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>_In_</tag>
        <tag>_Out_</tag>
      </tags>
  </entry>
  <entry>
    <title>宽表、窄表、横表、纵表有什么不同</title>
    <url>/2023/05/28/what-diffrence-table-structure/</url>
    <content><![CDATA[<p>宽表、窄表是大数据中的概念</p>
<p>宽表，字段比较多的数据库表。将业务主题相关的多个维度的字段关联在一起的一张数据库表。<br>宽表的本质：以空间换时间<br>好处：</p>
<ul>
<li>统一口径</li>
<li>降低统计难度，减少表之间的关联</li>
<li>节省跑数时间</li>
<li>节省资源</li>
</ul>
<p>窄表，符合三范式，相同维度的字段组成一张表。表和表之间关联查询。</p>
<p>横表、纵表<br>横表：也称为行表，将数据按照行进行排列。<br>纵表：也称为列式表或属性表，将数据按照列进行排列。<br><a id="more"></a><br>横表</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>英语</th>
<th>数学</th>
<th>体育</th>
<th>物理</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>99</td>
<td>100</td>
<td>100</td>
<td>99</td>
</tr>
</tbody>
</table>
<ul>
<li>优点：结构清晰，业务逻辑描述清楚；数据量小</li>
<li>缺点：字段固定，不便于存储；增加字段要改表结构</li>
</ul>
<p>纵表</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>科目/datatype</th>
<th>成绩/value</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>英语</td>
<td>99</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>100</td>
</tr>
<tr>
<td>3</td>
<td>体育</td>
<td>100</td>
</tr>
<tr>
<td>4</td>
<td>物理</td>
<td>99</td>
</tr>
</tbody>
</table>
<ul>
<li>优点：可变字段存储容易</li>
<li>缺点：数据量大；表结构对业务描述不清晰</li>
</ul>
]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>横表</tag>
        <tag>纵表</tag>
        <tag>宽表</tag>
        <tag>窄表</tag>
        <tag>竖表</tag>
      </tags>
  </entry>
  <entry>
    <title>如何找出so依赖来源</title>
    <url>/2023/03/01/which-lib-refernce-so/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上架Google Play时提示引用了有缺陷的OpenSSL版本<br><img src="/css/images/20230301_so_error_openssl.png" alt="缺陷的库"></p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul>
<li>找出该so属于哪个库</li>
<li>升级或如何排除该so</li>
</ul>
<h3 id="找出so属于哪个库"><a href="#找出so属于哪个库" class="headerlink" title="找出so属于哪个库"></a>找出so属于哪个库</h3><p>在app下的build.gradle中添加如下代码<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//列出所有包含有so文件的库信息</span><br><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    if (task.name.contains("DebugNativeLibs")) &#123;</span><br><span class="line">        task.doFirst &#123;</span><br><span class="line">            println("------------------- find so files start -------------------")</span><br><span class="line"></span><br><span class="line">            it.inputs.files.each &#123; file -&gt;</span><br><span class="line">                printDir(new File(file.absolutePath))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            println("------------------- find so files end -------------------")</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def printDir(File file) &#123;</span><br><span class="line">    if (file != null) &#123;</span><br><span class="line">        if (file.isDirectory()) &#123;</span><br><span class="line">            file.listFiles().each &#123;</span><br><span class="line">                printDir(it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (file.absolutePath.endsWith(".so")) &#123;</span><br><span class="line">            println "find so file: $file.absolutePath"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>在build执行mergeFlavorDebugNativeLibs时即会打印出引用的所so库<br><img src="/css/images/20230301_so_error_libavformat-58.png" alt="缺陷的库"><br>Github中搜索该库是否有修正新的OpenSSL版本<br><img src="/css/images/20230301_so_error_wlmedia.png" alt="wlmedia"><br>发现该库最新版仍然引用错误的OpenSSL版本，且没有再维护。</p>
<h3 id="排除三方库中的so"><a href="#排除三方库中的so" class="headerlink" title="排除三方库中的so"></a>排除三方库中的so</h3><p>我们知道在packagingOptions中可以排除库以及同名库时选择采用哪个库<br>exclude、pickFirst、doNotStrip、merge<br>查看发现exclude并不能排除aar、lib中的so，所以只能看引用的库是否能升级，否则考虑是否引用该库。另外在保证功能正常使用的情况下，加入同名so，采用pickFirst的方式引用我们想引用的so<br><img src="/css/images/20230301_so_error_packagingOptions.png" alt="packagingOptions"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/liuzehn/article/details/103587571" target="_blank" rel="noopener">gradle配置项packagingOptions使用说明</a><br><a href="https://developer.android.google.cn/studio/build/gradle-tips?hl=zh-cn" target="_blank" rel="noopener">Gradle 提示与诀窍</a><br><a href="https://juejin.cn/post/6983931827480166414" target="_blank" rel="noopener">【Gradle实战】利用Gradle查找项目里的so库来源</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>so</tag>
        <tag>有缺陷的OpenSSL版本</tag>
        <tag>DebugNativeLibs</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP传输到底用的哪个端口</title>
    <url>/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>最近使用Docker搭建FTP后，<strong>客户端可以连接无法列出目录，无法上传</strong>。通常我们认为FTP占用端口21用于传输控制命令，20传输数据。而我的21、20端口都有映射、开放。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> (24.0.2, build cb74dfc)</li>
<li><a href="https://mina.apache.org/ftpserver-project/index.html" target="_blank" rel="noopener">Apache FtpServer</a> (1.0.0)</li>
</ul>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>FileZilla连接效果如下</p>
<p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/log-FileZilla-pasv-port-not-open.png" alt></p>
<a id="more"></a>
<p>对应FtpServer的日志如下</p>
<p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/log-ftpserver-pasv-port-not-open.png" alt></p>
<p>根据上面信息看到前面的控制命令都正常工作，直到FtpServer收到”MLSD”时，出现异常</p>
<p>MLSD：获取远程服务器上的文件和目录列表（Machine List Directory）</p>
<p>此时，连接为PASV（被动模式），FtpServer使用端口26037与客户端连接传输数据</p>
<p>而26037端口并未对外开放，我们以为的只有21、20，26037又是怎么来的，在哪里配置的呢？</p>
<p>原来FTP分为PORT(主动模式)和PASV(被动模式)</p>
<h3 id="FTP主动模式和被动模式"><a href="#FTP主动模式和被动模式" class="headerlink" title="FTP主动模式和被动模式"></a>FTP主动模式和被动模式</h3><p>以下内容来源于ChatGPT</p>
<ol>
<li><p><strong>主动模式</strong></p>
<p>在主动模式中，客户端首先建立一个控制连接（Control Connection）到服务器的FTP控制端口（默认为21）。当需要进行数据传输时，客户端会随机选择一个高位端口（大于1023）作为数据端口，并将该端口号发送给服务器。服务器会通过控制连接告知客户端它将使用的数据端口（服务器端口）。然后，客户端会主动连接服务器的数据端口，以进行数据传输。</p>
</li>
<li><p><strong>被动模式</strong></p>
<p>在被动模式中，客户端首先建立一个控制连接到服务器的FTP控制端口（默认为21）。当需要进行数据传输时，服务器会随机选择一个高位端口（1024-65535）作为数据端口，并将该端口号发送给客户端。然后，客户端会通过控制连接告知服务器它将使用的数据端口（客户端端口）。服务器会主动连接客户端的数据端口，以进行数据传输。</p>
</li>
</ol>
<p>主动模式和被动模式的区别在于数据连接的建立方式。在主动模式中，客户端主动连接服务器的数据端口，而在被动模式中，服务器主动连接客户端的数据端口。</p>
<p>使用主动模式时，客户端需要打开一个高位端口用于数据连接，这可能会导致防火墙或网络设备的配置问题。而使用被动模式时，服务器打开一个高位端口用于数据连接，这样更容易通过防火墙和网络设备。</p>
<p>需要注意的是，FTP协议已经有一些安全性和性能问题，因此在实际应用中，往往会使用更安全和高效的替代协议，如SFTP（SSH File Transfer Protocol）或FTPS（FTP over SSL/TLS）。</p>
<p>附图</p>
<p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/PORT.jpg" alt></p>
<p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/PASV.jpg" alt></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>了解到FTP主动模式、被动模式后，我们选择的是修改被动模式，因为我们无法干涉客户端的环境，客户端随机端口被防火墙拦截，我们无法处理。但被动模式下1024-65535的端口范围太大，我们不希望FtpServer开放这么多端口，那如何自定义修改呢？</p>
<h4 id="修改FtpServer被动模式端口"><a href="#修改FtpServer被动模式端口" class="headerlink" title="修改FtpServer被动模式端口"></a>修改FtpServer被动模式端口</h4><p>修改FtpServer的ftpd-typical.xml</p>
<p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/passive-port.png" alt></p>
<p>修改后端口范围为12200-12202，再开放映射端口后，就可以正常工作了</p>
<p><strong>Notice：</strong></p>
<p>When the client wants to use a passive data connection, the server should provide the port to use.<br> By default, FtpServer will choose any available port. However this can be overridden using the configuration for the passive data connection.<br> When the server has used up all passive ports (one per client doing passive data transfer), t<strong>he next clients will have to wait for an available port</strong>.<br> It is therefore advised to provide multiple passive ports.</p>
<p><a href="https://mina.apache.org/ftpserver-project/configuration_passive_ports.html" target="_blank" rel="noopener">Configure passive ports</a></p>
<p>是否需要根据并发来考虑端口范围呢？</p>
<p>其中tcpdump作用太大，得精研一下</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/ct_bao/article/details/110162301" target="_blank" rel="noopener">FTP的主动模式和被动模式详解</a></p>
<p><a href="https://datatracker.ietf.org/doc/html/rfc959" target="_blank" rel="noopener">FILE TRANSFER PROTOCOL</a></p>
<p><a href="https://datatracker.ietf.org/doc/html/rfc1579" target="_blank" rel="noopener">Firewall-Friendly FTP</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>FTP</tag>
        <tag>EPASV</tag>
      </tags>
  </entry>
  <entry>
    <title>内存没满但是频繁fullgc，是不是ReservedCodeCacheSize的锅</title>
    <url>/2023/09/03/why-the-memory-not-full-but-frequently-fullgc/</url>
    <content><![CDATA[<h5 id="业务中的现象表现"><a href="#业务中的现象表现" class="headerlink" title="业务中的现象表现"></a>业务中的现象表现</h5><p>运行一段时间后，频繁fullgc，2s10几次fullgc，无法对外提供服务</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><h5 id="gc日志"><a href="#gc日志" class="headerlink" title="gc日志"></a>gc日志</h5><p>内存还有非常多的情况下就开始了fullgc</p>
<h5 id="dump分析"><a href="#dump分析" class="headerlink" title="dump分析"></a>dump分析</h5><p>只看到class loader的一直重新加载？内存指向java.security.Permission，没有其他大对象？没有搞懂重新改好了也是这样，需要再搞懂</p>
<h5 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Xms128m -Xmx256m -XX:ReservedCodeCacheSize=50m -XX:MetaspaceSize=96m -XX:MaxMetaspaceSize=96m -Xss256k -XX:MaxDirectMemorySize=16m</span><br><span class="line">-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSClassUnloadingEnabled</span><br><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:GCLogFileSize=10M -XX:NumberOfGCLogFiles=3 -Xloggc:/var/logs/gc1.log</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:NativeMemoryTracking=summary</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/var/logs/dump1-$(date +%Y%m%d%H%M%S).hprof"</span><br></pre></td></tr></table></figure>
<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>怀疑是-XX:ReservedCodeCacheSize=50m导致Meta不生效，导致重新加载fullgc?</p>
<p>修改为jvm参数，后好使了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Xms128m -Xmx256m -XX:PermSize=128m -XX:-UseGCOverheadLimit -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80</span><br><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:GCLogFileSize=10M -XX:NumberOfGCLogFiles=3 -Xloggc:/var/logs/gc1.log</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:NativeMemoryTracking=summary</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/var/logs/dump1-$(date +%Y%m%d%H%M%S).hprof"</span><br></pre></td></tr></table></figure>
<p>需要再研究，怎么来指向这个问题。</p>
<p>另外火焰图必不可少</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>fullgc</tag>
      </tags>
  </entry>
</search>
