<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序猜想</title>
  
  <subtitle>瞎写的程序员</subtitle>
  <link href="https://2tu.github.io/atom.xml" rel="self"/>
  
  <link href="https://2tu.github.io/"/>
  <updated>2024-02-27T11:35:39.207Z</updated>
  <id>https://2tu.github.io/</id>
  
  <author>
    <name>2Tu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java类文件在JVM运行的生命周期</title>
    <link href="https://2tu.github.io/2024/02/27/the-class-file-lifecycle-of-jvm/"/>
    <id>https://2tu.github.io/2024/02/27/the-class-file-lifecycle-of-jvm/</id>
    <published>2024-02-27T11:30:08.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<h4 id="java-Class文件结构"><a href="#java-Class文件结构" class="headerlink" title="java Class文件结构"></a>java Class文件结构</h4><p>Java .class 文件是 Java 编程语言的关键组件，遵循精确且定义的结构。 这种结构不仅对于 Java 虚拟机 (JVM) 正确加载和执行字节码至关重要，而且还提供了有关编译后的 Java 代码的大量信息。 下面，我们深入研究类文件结构的基本元素，详细说明每个组件及其在整体架构中的重要性。</p><h5 id="class文件格式"><a href="#class文件格式" class="headerlink" title="class文件格式"></a>class文件格式</h5><p>类文件由单个 ClassFile 结构组成。 该结构由 JVM 规范定义并遵循特定格式，其中包括以下主要部分：</p><ul><li>Magic Number魔数：固定值 (0xCAFEBABE)。 此唯一标识符验证该文件是否是 JVM 可读的有效类文件。</li><li>Version Information版本号：major_version、minor_version，java版本号</li><li>Constant Pool常量池</li><li>Access Flags访问标识</li><li>This Class, Super Class,and Interfaces类索引、父类索引与接口索引集合</li><li>Fields字段集合</li><li>Methods方法表集合</li><li>Attributes属性表集合</li></ul><p>以上信息如何查看？<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap [options] classes...</span><br></pre></td></tr></table></figure></p><p>JVM需要使用上述信息来正确加载、验证和执行</p><p>其是常量池，它是一个集中的字典，经常被类文件中的其他部分引用，突出了它在整个架构中的重要性。</p><h4 id="Class文件在JVM中的生命周期"><a href="#Class文件在JVM中的生命周期" class="headerlink" title="Class文件在JVM中的生命周期"></a>Class文件在JVM中的生命周期</h4><p><img src="/2024/02/27/the-class-file-lifecycle-of-jvm/class-file-lifecycle-in-jvm.png" alt="The Class file Lifecycle of a Java Application"></p><h5 id="1-Loading加载"><a href="#1-Loading加载" class="headerlink" title="1. Loading加载"></a>1. Loading加载</h5><p>类加载过程执行以下三个功能：<br>从clas文件创建二进制数据流<br>根据内部数据结构解析二进制数据<br>创建 java.lang.Class 的实例<br>完成此操作后，类实例就可以进行链接了。</p><h5 id="2-Linking链接"><a href="#2-Linking链接" class="headerlink" title="2. Linking链接"></a>2. Linking链接</h5><h6 id="2-1-Verification验证"><a href="#2-1-Verification验证" class="headerlink" title="2.1 Verification验证"></a>2.1 Verification验证</h6><p>此步骤可确保安全性和完整性。JVM验证class文件的正确性，文件格式验证、语法是否有效、是否符合Java语言规范。</p><h6 id="2-2-Preparation准备"><a href="#2-2-Preparation准备" class="headerlink" title="2.2 Preparation准备"></a>2.2 Preparation准备</h6><p>在准备过程中，JVM 会为类静态变量分配内存，并将其初始化为默认值。</p><h6 id="2-3-Resolution解析"><a href="#2-3-Resolution解析" class="headerlink" title="2.3 Resolution解析"></a>2.3 Resolution解析</h6><p>解析阶段包括将类文件中的符号引用解析为直接引用。这就是 JVM 常量池发挥关键作用的地方。主要针对类或接口、字段、类方法、方法类型等。</p><h5 id="3-Initializes初始化"><a href="#3-Initializes初始化" class="headerlink" title="3. Initializes初始化"></a>3. Initializes初始化</h5><p>执行静态块： 这一阶段涉及执行静态初始化程序和静态块。JVM 会初始化静态字段，并按照它们在类文件中出现的顺序执行任何静态初始化块。<br>设置最终值： 为类的最终变量分配值，这些值在类的生命周期内不可更改。</p><h5 id="4-Usage使用"><a href="#4-Usage使用" class="headerlink" title="4. Usage使用"></a>4. Usage使用</h5><p>实例化： JVM 根据应用程序的需要创建类的实例。<br>执行： 根据运行程序的要求调用和执行方法，访问字段。JVM 会将字节码解释或即时编译为机器代码以便执行。</p><h5 id="5-Unloading卸载"><a href="#5-Unloading卸载" class="headerlink" title="5. Unloading卸载"></a>5. Unloading卸载</h5><p>垃圾回收： 当一个类不再需要，也没有对其实例的实时引用时，它就可以被卸载。JVM 的垃圾回收器会回收分配给类的内存。</p><p><a href="https://medium.com/@AlexanderObregon/the-anatomy-of-a-java-virtual-machine-class-file-e3773d23f3e3" target="_blank" rel="noopener">The Anatomy of a Java Virtual Machine Class File</a><br><a href="https://www.cesarsotovalero.net/blog/how-the-jvm-executes-java-code.html" target="_blank" rel="noopener">The Execution Lifecycle of a Java Application</a><br><a href="https://docs.oracle.com/en/java/javase/11/tools/javap.html" target="_blank" rel="noopener">javap</a><br><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html" target="_blank" rel="noopener">Chapter 4. The class File Format</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;java-Class文件结构&quot;&gt;&lt;a href=&quot;#java-Class文件结构&quot; class=&quot;headerlink&quot; title=&quot;java Class文件结构&quot;&gt;&lt;/a&gt;java Class文件结构&lt;/h4&gt;&lt;p&gt;Java .class 文件是 Java 编</summary>
      
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="Interview" scheme="https://2tu.github.io/tags/Interview/"/>
    
    <category term="JVM" scheme="https://2tu.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Makefile如何使用</title>
    <link href="https://2tu.github.io/2024/02/06/What-is-Makefile/"/>
    <id>https://2tu.github.io/2024/02/06/What-is-Makefile/</id>
    <published>2024-02-06T11:54:21.000Z</published>
    <updated>2024-02-27T11:35:39.171Z</updated>
    
    <content type="html"><![CDATA[<p>工程化编译项目时，Java用Maven\Gradle，前端用npm，C/C++用Make<br>使用Make命令编译C/C++时，是通过Make工具实现。推荐使用<a href="https://www.mingw-w64.org/downloads/#w64devkit" target="_blank" rel="noopener">w64devkit</a><br>w64devkit支持Linux命令</p><ul><li>根据更改的源文件，自动确定需要更新哪些文件。它还自动确定更新文件的正确顺序，以防一个非源文件依赖于另一个非来源文件。<br>因此，如果您更改一些源文件，然后运行Make，则不需要重新编译所有程序。它只更新那些直接或间接依赖于您更改的源文件的非源文件。<br>如何确定依赖的呢，来源与我们在Makefile中指定的dependencies</li><li>Make不限于任何特定的语言。所有能在命令行运行的编程语言都能处理（Java\Golang\Python…）。另外基于文件的改变然后更新另外的文件也可以。</li></ul><p>Makefile中的一条规则告诉Make如何执行一系列命令，以便从源文件构建目标文件。它还指定了目标文件的依赖项列表。此列表应包括用作规则中命令输入的所有文件（无论是源文件还是其他目标文件）。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target:   dependencies ...</span><br><span class="line">          commands</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hello</span>: <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br><span class="line"><span class="selector-tag">g</span>++ <span class="selector-tag">-o</span> <span class="selector-tag">hello</span> <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br><span class="line"><span class="selector-tag">hello</span><span class="selector-class">.o</span>: <span class="selector-tag">hello</span><span class="selector-class">.cpp</span></span><br><span class="line"><span class="selector-tag">g</span>++ <span class="selector-tag">-c</span> <span class="selector-tag">hello</span><span class="selector-class">.cpp</span></span><br></pre></td></tr></table></figure><h4 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h4><p>运行Make时，可以指定要更新的特定目标；否则，Make会更新makefile中列出的第一个目标。当然，必须首先更新生成这些目标所需的任何其他目标文件作为输入。<br>Make使用makefile来确定哪些目标文件应该更新，然后确定哪些文件实际上需要更新。如果目标文件比其所有依赖项都新，那么它已经是最新的，不需要重新生成。其他目标文件确实需要更新，但顺序正确：每个目标文件都必须重新生成，然后才能用于重新生成其他目标。</p><h4 id="Makefile文件命名"><a href="#Makefile文件命名" class="headerlink" title="Makefile文件命名"></a>Makefile文件命名</h4><p>Make自动查找makefile文件，顺序为GNUmakefile&gt;makefile&gt;Makefile<br>GUNmakefile:不建议使用，只能支持GUN make<br>makefile:所有版本都能识别<br>Makefile:推荐，最常用</p><p>运行make时没有找到上述文件会报错，但可以手动指定文件名<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">make</span> -<span class="keyword">f</span> <span class="symbol">&lt;filename&gt;</span></span><br><span class="line"><span class="keyword">make</span> --<span class="keyword">file</span>=<span class="symbol">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工程化编译项目时，Java用Maven\Gradle，前端用npm，C/C++用Make&lt;br&gt;使用Make命令编译C/C++时，是通过Make工具实现。推荐使用&lt;a href=&quot;https://www.mingw-w64.org/downloads/#w64devkit&quot;</summary>
      
    
    
    
    <category term="C/C++" scheme="https://2tu.github.io/categories/C-C/"/>
    
    
    <category term="Makefile" scheme="https://2tu.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>香港卡全攻略</title>
    <link href="https://2tu.github.io/2023/11/19/bankcard-hongkong/"/>
    <id>https://2tu.github.io/2023/11/19/bankcard-hongkong/</id>
    <published>2023-11-19T04:55:15.000Z</published>
    <updated>2024-02-27T11:35:39.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要办香港卡？"><a href="#为什么要办香港卡？" class="headerlink" title="为什么要办香港卡？"></a>为什么要办香港卡？</h3><p>保险？参与港美股？参与加密货币？OpenAI付费？公司股票不转回？对于我来说，听着牛逼想要但又不是必须的理由。最后决定办理是因为觉得港股券商入金有奖励，家人可以顺便去玩一圈。</p><h3 id="选择哪个银行？"><a href="#选择哪个银行？" class="headerlink" title="选择哪个银行？"></a>选择哪个银行？</h3><p>有那么多银行，我们可以办哪些，哪些又比较好呢？<br>从发币行角度考虑</p><ul><li>香港上海汇丰银行</li><li>渣打银行（香港）</li><li>中国银行（香港）<br>三家银行都是在全球开展业务。从网上的信息来看汇丰和中国银行很好办，渣打不太好办。<br>另外虚拟银行众安银行、天星银行、蚂蚁银行等，没有考虑和办理就不列了。</li></ul><table><thead><tr><th></th><th>香港上海汇丰银行</th><th>中国银行</th></tr></thead><tbody><tr><td>总部</td><td>伦敦</td><td>中国</td></tr><tr><td>办理难度</td><td>容易</td><td>容易</td></tr><tr><td>转汇费用</td><td>据说同名内地香港互转不要手续费</td><td>同名内地香港互转不要手续费</td></tr></tbody></table><p>听说汇丰和中国银行从内地卡转入香港卡不要手续费。我办了汇丰之后就飘了不想再办就出去玩了。回来内地后去汇丰银行办理内地卡，没想到她直接告诉我只接待Premier客户，有存款要求不然有管理费。</p><h3 id="怎么办理？"><a href="#怎么办理？" class="headerlink" title="怎么办理？"></a>怎么办理？</h3><p>两种方式</p><ul><li><p>直接到营业网点线下排队办理</p><p>  如果人多去晚了可能无法办理，或者预约的人数多也可能被拒绝</p></li><li><p>网上预约，再到网点办理</p><p>  网上预约后无需再早去现场排队拿号，直接告诉接待人员，然后就给你安排了</p></li></ul><a id="more"></a><h4 id="怎么预约"><a href="#怎么预约" class="headerlink" title="怎么预约"></a>怎么预约</h4><h5 id="汇丰银行"><a href="#汇丰银行" class="headerlink" title="汇丰银行"></a>汇丰银行</h5><p>多久开始提前预约？<br>公众号上写提前2个工作日，预约后，会有香港电话打过来问你是哪天要去，去哪个分行，她登记后会将信息转至分行<br>分行的人会再次打电话给你，确认上门时间</p><ol><li>关注微信公众号汇丰香港，微信号：hsbc-hongkong</li><li><p>预约开户<br>点击“预约开户”按钮<br><img src="/2023/11/19/bankcard-hongkong/hsbc-app-open1.jpg" alt="预约开户"><br>进入页面后，填写相关信息<br><img src="/2023/11/19/bankcard-hongkong/hsbc-app-open-form.jpg" alt="预约会面"><br>联络电话，填写你内地的，要改成+86<br>产品及服务，选择汇丰ONE<br>选择会面日期，香港银行周一到周五营业时间为上午9点到下午4点，周六营业时间为上午9点到下午1点，我是周六去的<br>选择会面地区，我选择的网红网点<strong>葵芳分行</strong>，新界-》葵涌及荃湾</p></li><li><p>银行登记<br>提交完后，第二天晚上17:59银行电话我<br>询问我具体办理日期和时间<br>确认我们选择的区域的分行，或者你也可以讲自己想要的分行<br>告知开户时需要提供的资料<br>分行同事会再电话告知需要提供的资料</p></li><li><p>分行电话<br>隔天18：:01分行电话，<br>告知几点<br>带上身份证、港澳通行证、过关小票</p></li></ol><h5 id="中国银行"><a href="#中国银行" class="headerlink" title="中国银行"></a>中国银行</h5><p>可以提前7个工作日预约，不能约当天，工作日包含周六<br>中国银行预约时，公众号里面只能选择还能预约的分行，不会打电话给你确认，所以公众号预约成什么地方就是什么地方</p><ol><li>关注微信公众号中银香港微服务，微信号：BOCHK_Banking</li><li>预约开户<br>点击”银行服务”-》“我要预约”按钮<br><img src="/2023/11/19/bankcard-hongkong/boc-app-open1.jpg" alt="预约开户"><br>进入页面后，点击“预约开户”<br><img src="/2023/11/19/bankcard-hongkong/boc-app-form1.jpg" alt="预约开户"><br><img src="/2023/11/19/bankcard-hongkong/boc-app-form2.jpg" alt="预约开户"><br><img src="/2023/11/19/bankcard-hongkong/boc-app-form3.jpg" alt="预约开户"></li></ol><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p>总结一下要带哪些资料</p><ul><li>身份证</li><li>港澳通行证（有效期不低于3个月）</li><li>过关小票</li><li>地址证明（不一定需要，看客户经理）</li><li>收入来源（不一定需要，看客户经理）</li><li>存款（不一定需要，看客户经理）<br>我在葵芳分行只要了身份证、港澳通行证、过关小票</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;为什么要办香港卡？&quot;&gt;&lt;a href=&quot;#为什么要办香港卡？&quot; class=&quot;headerlink&quot; title=&quot;为什么要办香港卡？&quot;&gt;&lt;/a&gt;为什么要办香港卡？&lt;/h3&gt;&lt;p&gt;保险？参与港美股？参与加密货币？OpenAI付费？公司股票不转回？对于我来说，听着牛逼想要但又不是必须的理由。最后决定办理是因为觉得港股券商入金有奖励，家人可以顺便去玩一圈。&lt;/p&gt;
&lt;h3 id=&quot;选择哪个银行？&quot;&gt;&lt;a href=&quot;#选择哪个银行？&quot; class=&quot;headerlink&quot; title=&quot;选择哪个银行？&quot;&gt;&lt;/a&gt;选择哪个银行？&lt;/h3&gt;&lt;p&gt;有那么多银行，我们可以办哪些，哪些又比较好呢？&lt;br&gt;从发币行角度考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;香港上海汇丰银行&lt;/li&gt;
&lt;li&gt;渣打银行（香港）&lt;/li&gt;
&lt;li&gt;中国银行（香港）&lt;br&gt;三家银行都是在全球开展业务。从网上的信息来看汇丰和中国银行很好办，渣打不太好办。&lt;br&gt;另外虚拟银行众安银行、天星银行、蚂蚁银行等，没有考虑和办理就不列了。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;香港上海汇丰银行&lt;/th&gt;
&lt;th&gt;中国银行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;总部&lt;/td&gt;
&lt;td&gt;伦敦&lt;/td&gt;
&lt;td&gt;中国&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;办理难度&lt;/td&gt;
&lt;td&gt;容易&lt;/td&gt;
&lt;td&gt;容易&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转汇费用&lt;/td&gt;
&lt;td&gt;据说同名内地香港互转不要手续费&lt;/td&gt;
&lt;td&gt;同名内地香港互转不要手续费&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;听说汇丰和中国银行从内地卡转入香港卡不要手续费。我办了汇丰之后就飘了不想再办就出去玩了。回来内地后去汇丰银行办理内地卡，没想到她直接告诉我只接待Premier客户，有存款要求不然有管理费。&lt;/p&gt;
&lt;h3 id=&quot;怎么办理？&quot;&gt;&lt;a href=&quot;#怎么办理？&quot; class=&quot;headerlink&quot; title=&quot;怎么办理？&quot;&gt;&lt;/a&gt;怎么办理？&lt;/h3&gt;&lt;p&gt;两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接到营业网点线下排队办理&lt;/p&gt;
&lt;p&gt;  如果人多去晚了可能无法办理，或者预约的人数多也可能被拒绝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网上预约，再到网点办理&lt;/p&gt;
&lt;p&gt;  网上预约后无需再早去现场排队拿号，直接告诉接待人员，然后就给你安排了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Other" scheme="https://2tu.github.io/categories/Other/"/>
    
    
    <category term="香港卡" scheme="https://2tu.github.io/tags/%E9%A6%99%E6%B8%AF%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>C++编译器有哪些</title>
    <link href="https://2tu.github.io/2023/10/21/cpp-compiler/"/>
    <id>https://2tu.github.io/2023/10/21/cpp-compiler/</id>
    <published>2023-10-21T01:57:53.000Z</published>
    <updated>2024-02-27T11:35:39.191Z</updated>
    
    <content type="html"><![CDATA[<p>没想到C++环境搭建都这么麻烦，编译器有很多种。</p><ul><li><a href="https://code.visualstudio.com/docs/cpp/config-msvc" target="_blank" rel="noopener">MSVC</a></li><li><a href="https://github.com/skeeto/w64devkit" target="_blank" rel="noopener">w64devkit</a></li><li>Clang</li></ul><p>没有研究是觉得有些复杂。</p><p>在编译时会将我们include，#define等合并成一个文件。那如何看到这个编译的中间文件呢？<br>在Visual Studio中设置<br><img src="/2023/10/21/cpp-compiler/preprocess-to-a-file.png" alt="Preprocess to a File"></p><p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ctrl + F7编译后，可以从Debug目录下看到FileName.i文件中已经包含了include的 iostream代码</p><p><strong>注意：Visual Studio和Visual Studio Code是不同的工具</strong></p><p>下一个看看C++如何建立link，为什么C++中不像java一样需要导入包，就可以link，然后引用呢？如果有两个同名的函数，那link的时候会报错吗？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没想到C++环境搭建都这么麻烦，编译器有很多种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/cpp/config-msvc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MSVC&lt;/a</summary>
      
    
    
    
    <category term="C/C++" scheme="https://2tu.github.io/categories/C-C/"/>
    
    
    <category term="Compiler" scheme="https://2tu.github.io/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>netlink</title>
    <link href="https://2tu.github.io/2023/10/07/netlink/"/>
    <id>https://2tu.github.io/2023/10/07/netlink/</id>
    <published>2023-10-07T10:07:29.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Netlink通信机制</p><p>Netlink是linux提供的用于内核和用户态进程之间的通信方式。</p><p>但是注意虽然Netlink主要用于用户空间和内核空间的通信，但是也能用于用户空间的两个进程通信。只是进程间通信有其他很多方式，一般不用Netlink。除非需要用到Netlink的广播特性时。</p><p>那么Netlink有什么优势呢？</p><p>一般来说用户空间和内核空间的通信方式有三种：/proc、ioctl、Netlink。而前两种都是单向的，但是Netlink可以实现双工通信。</p><p>Netlink协议基于BSD socket和AF_NETLINK地址簇(address family)，使用32位的端口号寻址(以前称作PID)，每个Netlink协议(或称作总线，man手册中则称之为netlink family)，通常与一个或一组内核服务/组件相关联，如NETLINK_ROUTE用于获取和设置路由与链路信息、NETLINK_KOBJECT_UEVENT用于内核向用户空间的udev进程发送通知等。</p><p>netlink具有以下特点：</p><ul><li>支持全双工、异步通信(当然同步也支持)</li><li>用户空间可使用标准的BSD socket接口(但netlink并没有屏蔽掉协议包的构造与解析过程，推荐使用libnl等第三方库)</li><li>在内核空间使用专用的内核API接口</li><li>支持多播(因此支持“总线”式通信，可实现消息订阅)</li><li>在内核端可用于进程上下文与中断上下文</li></ul><p>没有Linux和C的基础是真看不懂这是啥玩意儿…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是Netlink通信机制&lt;/p&gt;
&lt;p&gt;Netlink是linux提供的用于内核和用户态进程之间的通信方式。&lt;/p&gt;
&lt;p&gt;但是注意虽然Netlink主要用于用户空间和内核空间的通信，但是也能用于用户空间的两个进程通信。只是进程间通信有其他很多方式，一般不用Netlin</summary>
      
    
    
    
    <category term="Other" scheme="https://2tu.github.io/categories/Other/"/>
    
    
    <category term="Linux" scheme="https://2tu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>什么是Redis keyspace notification</title>
    <link href="https://2tu.github.io/2023/10/06/keyspace-notifications/"/>
    <id>https://2tu.github.io/2023/10/06/keyspace-notifications/</id>
    <published>2023-10-06T11:44:22.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<p>Redis消息架构两种中的一种keyspace notification、  <a href="https://redis.io/docs/interact/pubsub/" target="_blank" rel="noopener">Pub/Sub</a></p><p>实时监控Rdis 键值改变。</p><p>Keyspace通知允许client订阅Pub/Sub channels，以便接收影响Redis数据的事件。</p><h4 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h4><p>键空间通知使得客户端可以通过订阅频道或模式， 来接收那些以某种方式改动了 Redis 数据集的事件。</p><p>以下是一些键空间通知发送的事件的例子：</p><ul><li>所有修改键的命令。</li><li>所有接收到 LPUSH 命令的键。</li><li>0 号数据库中所有已过期的键。</li></ul><p>事件通过 Redis 的订阅与发布功能（pub/sub）来进行分发， 因此所有支持订阅与发布功能的客户端都可以在无须做任何修改的情况下， 直接使用键空间通知功能。</p><p>因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略， 所以如果你的程序需要可靠事件通知（reliable notification of events）， 那么目前的键空间通知可能并不适合你： 当订阅事件的客户端断线时， 它会丢失所有在断线期间分发给它的事件。</p><p>未来将会支持更可靠的事件分发， 这种支持可能会通过让订阅与发布功能本身变得更可靠来实现， 也可能会在 Lua 脚本中对消息（message）的订阅与发布进行监听， 从而实现类似将事件推入到列表这样的操作。</p><a id="more"></a><h4 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h4><p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件。</p><p>比如说，对 0 号数据库的键 mykey 执行 DEL 命令时， 系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令：</p><p>PUBLISH __keyspace@0__:mykey del<br>PUBLISH __keyevent@0__:del mykey</p><p>订阅第一个频道 __keyspace@0__:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件， 而订阅第二个频道 __keyevent@0__:del 则可以接收 0 号数据库中所有执行 del 命令的键。</p><p>以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。</p><p>当 del mykey 命令执行时：</p><p>键空间频道的订阅者将接收到被执行的事件的名字，在这个例子中，就是 del 。<br>键事件频道的订阅者将接收到被执行事件的键的名字，在这个例子中，就是 mykey 。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>因为开启键空间通知功能需要消耗一些 CPU ， 所以在默认配置下， 该功能处于关闭状态。</p><p>可以通过修改 redis.conf 文件， 或者直接使用 CONFIG SET 命令来开启或关闭键空间通知功能：</p><p>当 notify-keyspace-events 选项的参数为空字符串时，功能关闭。<br>另一方面，当参数不是空字符串时，功能开启。<br>notify-keyspace-events 的参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知：</p><table><thead><tr><th>字符</th><th>发送的通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，所有通知以 __keyspace@&lt;db&gt;__ 为前缀</td></tr><tr><td>E</td><td>键事件通知，所有通知以 __keyevent@&lt;db&gt;__ 为前缀</td></tr><tr><td>g</td><td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td></tr><tr><td>$</td><td>字符串命令的通知</td></tr><tr><td>l</td><td>列表命令的通知</td></tr><tr><td>s</td><td>集合命令的通知</td></tr><tr><td>h</td><td>哈希命令的通知</td></tr><tr><td>z</td><td>有序集合命令的通知</td></tr><tr><td>x</td><td>过期事件：每当有过期键被删除时发送</td></tr><tr><td>e</td><td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名</td></tr></tbody></table><p>输入的参数中至少要有一个 K 或者 E ， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发。</p><p>举个例子， 如果只想订阅键空间中和列表相关的通知， 那么参数就应该设为 Kl ， 诸如此类。</p><p>将参数设为字符串 “AKE” 表示发送所有类型的通知。</p><h4 id="命令产生的通知"><a href="#命令产生的通知" class="headerlink" title="命令产生的通知"></a>命令产生的通知</h4><p>以下列表记录了不同命令所产生的不同通知：</p><ul><li>DEL 命令为每个被删除的键产生一个 del 通知。</li><li>RENAME 产生两个通知：为来源键（source key）产生一个 rename_from 通知，并为目标键（destination key）产生一个 rename_to 通知。</li><li>EXPIRE 和 EXPIREAT 在键被正确设置过期时间时产生一个 expire 通知。当 EXPIREAT 设置的时间已经过期，或者 - EXPIRE 传入的时间为负数值时，键被删除，并产生一个 del 通知。</li><li>SORT 在命令带有 STORE 参数时产生一个 sortstore 事件。如果 STORE 指示的用于保存排序结果的键已经存在，那么程序还会发送一个 del 事件。</li><li>SET 以及它的所有变种（SETEX 、 SETNX 和 GETSET）都产生 set 通知。其中 SETEX 还会产生 expire 通知。</li><li>MSET 为每个键产生一个 set 通知。</li><li>SETRANGE 产生一个 setrange 通知。</li><li>INCR 、 DECR 、 INCRBY 和 DECRBY 都产生 incrby 通知。</li><li>INCRBYFLOAT 产生 incrbyfloat 通知。</li><li>APPEND 产生 append 通知。</li><li>LPUSH 和 LPUSHX 都产生单个 lpush 通知，即使有多个输入元素时，也是如此。</li><li>RPUSH 和 RPUSHX 都产生单个 rpush 通知，即使有多个输入元素时，也是如此。</li><li>RPOP 产生 rpop 通知。如果被弹出的元素是列表的最后一个元素，那么还会产生一个 del 通知。</li><li>LPOP 产生 lpop 通知。如果被弹出的元素是列表的最后一个元素，那么还会产生一个 del 通知。</li><li>LINSERT 产生一个 linsert 通知。</li><li>LSET 产生一个 lset 通知。</li><li>LTRIM 产生一个 ltrim 通知。如果 LTRIM 执行之后，列表键被清空，那么还会产生一个 del 通知。</li><li>RPOPLPUSH 和 BRPOPLPUSH 产生一个 rpop 通知，以及一个 lpush 通知。两个命令都会保证 rpop 的通知在 lpush 的通知之前分发。如果从键弹出元素之后，被弹出的列表键被清空，那么还会产生一个 del 通知。</li><li>HSET 、 HSETNX 和 HMSET 都只产生一个 hset 通知。</li><li>HINCRBY 产生一个 hincrby 通知。</li><li>HINCRBYFLOAT 产生一个 hincrbyfloat 通知。</li><li>HDEL 产生一个 hdel 通知。如果执行 HDEL 之后，哈希键被清空，那么还会产生一个 del 通知。</li><li>SADD 产生一个 sadd 通知，即使有多个输入元素时，也是如此。</li><li>SREM 产生一个 srem 通知，如果执行 SREM 之后，集合键被清空，那么还会产生一个 del 通知。</li><li>SMOVE 为来源键（source key）产生一个 srem 通知，并为目标键（destination key）产生一个 sadd 事件。</li><li>SPOP 产生一个 spop 事件。如果执行 SPOP 之后，集合键被清空，那么还会产生一个 del 通知。</li><li>SINTERSTORE 、 SUNIONSTORE 和 SDIFFSTORE 分别产生 sinterstore 、 sunionostore 和 sdiffstore 三种通知。如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li><li>ZINCRBY 产生一个 zincr 通知。（译注：非对称，请注意。）</li><li>ZADD 产生一个 zadd 通知，即使有多个输入元素时，也是如此。</li><li>ZREM 产生一个 zrem 通知，即使有多个输入元素时，也是如此。如果执行 ZREM 之后，有序集合键被清空，那么还会产生一个 del 通知。</li><li>ZREMRANGEBYSCORE 产生一个 zrembyscore 通知。（译注：非对称，请注意。）如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li><li>ZREMRANGEBYRANK 产生一个 zrembyrank 通知。（译注：非对称，请注意。）如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li><li>ZINTERSTORE 和 ZUNIONSTORE 分别产生 zinterstore 和 zunionstore 两种通知。如果用于保存结果的键已经存在，那么还会产生一个 del 通知。</li><li>每当一个键因为过期而被删除时，产生一个 expired 通知。</li><li>每当一个键因为 maxmemory 政策而被删除以回收内存时，产生一个 evicted 通知。</li></ul><p><strong>Note</strong></p><p>所有命令都只在键真的被改动了之后，才会产生通知。</p><p>比如说，当 SREM 试图删除不存在于集合的元素时，删除操作会执行失败，因为没有真正的改动键，所以这一操作不会发送通知。</p><p>如果对命令所产生的通知有疑问， 最好还是使用以下命令， 自己来验证一下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli<span class="built_in"> config </span><span class="builtin-name">set</span> notify-keyspace-events KEA</span><br><span class="line">$ redis-cli --csv psubscribe <span class="string">'__key*__:*'</span></span><br><span class="line">Reading messages<span class="built_in">..</span>. (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="string">"psubscribe"</span>,<span class="string">"__key*__:*"</span>,1</span><br></pre></td></tr></table></figure><p>然后， 只要在其他终端里用 Redis 客户端发送命令， 就可以看到产生的通知了：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"pmessage"</span>,<span class="string">"__key*__:*"</span>,<span class="string">"__keyspace@0__:foo"</span>,<span class="string">"set"</span></span><br><span class="line"><span class="string">"pmessage"</span>,<span class="string">"__key*__:*"</span>,<span class="string">"__keyevent@0__:set"</span>,<span class="string">"foo"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="过期通知的发送时间"><a href="#过期通知的发送时间" class="headerlink" title="过期通知的发送时间"></a>过期通知的发送时间</h4><p>Redis 使用以下两种方式删除过期的键：</p><ul><li>当一个键被访问时，程序会对这个键进行检查，如果键已经过期，那么该键将被删除。</li><li>底层系统会在后台渐进地查找并删除那些过期的键，从而处理那些已经过期、但是不会被访问到的键。</li></ul><p>当过期键被以上两个程序的任意一个发现、 并且将键从数据库中删除时， Redis 会产生一个 expired 通知。</p><p>Redis 并不保证生存时间（TTL）变为 0 的键会立即被删除： 如果程序没有访问这个过期键， 或者带有生存时间的键非常多的话， 那么在键的生存时间变为 0 ， 直到键真正被删除这中间， 可能会有一段比较显著的时间间隔。</p><p>因此， Redis 产生 expired 通知的时间为过期键被删除的时候， 而不是键的生存时间变为 0 的时候。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://shouce.jb51.net/redis-chinese-doc/doc/1.html" target="_blank" rel="noopener">键空间通知（keyspace notification）)</a><br><a href="https://redis.io/docs/manual/keyspace-notifications/" target="_blank" rel="noopener">Redis keyspace notifications</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis消息架构两种中的一种keyspace notification、  &lt;a href=&quot;https://redis.io/docs/interact/pubsub/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pub/Sub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实时监控Rdis 键值改变。&lt;/p&gt;
&lt;p&gt;Keyspace通知允许client订阅Pub/Sub channels，以便接收影响Redis数据的事件。&lt;/p&gt;
&lt;h4 id=&quot;功能概览&quot;&gt;&lt;a href=&quot;#功能概览&quot; class=&quot;headerlink&quot; title=&quot;功能概览&quot;&gt;&lt;/a&gt;功能概览&lt;/h4&gt;&lt;p&gt;键空间通知使得客户端可以通过订阅频道或模式， 来接收那些以某种方式改动了 Redis 数据集的事件。&lt;/p&gt;
&lt;p&gt;以下是一些键空间通知发送的事件的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有修改键的命令。&lt;/li&gt;
&lt;li&gt;所有接收到 LPUSH 命令的键。&lt;/li&gt;
&lt;li&gt;0 号数据库中所有已过期的键。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事件通过 Redis 的订阅与发布功能（pub/sub）来进行分发， 因此所有支持订阅与发布功能的客户端都可以在无须做任何修改的情况下， 直接使用键空间通知功能。&lt;/p&gt;
&lt;p&gt;因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略， 所以如果你的程序需要可靠事件通知（reliable notification of events）， 那么目前的键空间通知可能并不适合你： 当订阅事件的客户端断线时， 它会丢失所有在断线期间分发给它的事件。&lt;/p&gt;
&lt;p&gt;未来将会支持更可靠的事件分发， 这种支持可能会通过让订阅与发布功能本身变得更可靠来实现， 也可能会在 Lua 脚本中对消息（message）的订阅与发布进行监听， 从而实现类似将事件推入到列表这样的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="Redis" scheme="https://2tu.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>C/C++参数中的_In_和_Out_代表什么</title>
    <link href="https://2tu.github.io/2023/09/28/what-is-In-Out-on-cpp/"/>
    <id>https://2tu.github.io/2023/09/28/what-is-In-Out-on-cpp/</id>
    <published>2023-09-28T13:21:14.000Z</published>
    <updated>2024-02-27T11:35:39.215Z</updated>
    
    <content type="html"><![CDATA[<p>最近看方法参数中的疑惑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sai_status_t</span> <span class="title">sai_api_query</span><span class="params">(_In_ <span class="keyword">sai_api_t</span> sai_api_id, _Out_ <span class="keyword">void</span>** api_method_table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_In_和_Out_是用于标记参数的传递方式的注解。它们并不是C\C++语言的关键字，而是一种约定俗成的注释方式，用于提示函数的调用者和阅读者关于参数的特性。</p><p>_In_表示该参数是输入参数，即函数内部会读取参数的值，但不会修改它。通过这个标记，我们可以清楚地知道该参数在函数内部只被用于读取数据。</p><p>_Out_表示该参数是输出参数，即函数内部会修改参数的值，并将修改后的结果返回给调用者。通过这个标记，我们可以清楚地知道该参数在函数内部会被修改，我们在调用函数时需要确认传入的参数具备存储修改后结果的能力。</p><a id="more"></a><p>总结起来，_In_和_Out_这两个标记主要用于提供参数的传递方式的额外信息，帮助理解函数的行为和外部变量的使用。</p><p>上面的**又是什么意思呢？</p><p>&amp;&amp; 和 &amp; 是 C++ 中的运算符，<strong> 和 * 是 C++ 中的指针。&amp;&amp; 和 &amp; 表示引用和取地址，</strong> 和 * 表示指针的指针和指针。</p><p><strong>&amp;&amp; 和 &amp; 的区别</strong></p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">&amp;&amp;</th><th style="text-align:left">&amp;</th></tr></thead><tbody><tr><td style="text-align:left">定义</td><td style="text-align:left">引用</td><td style="text-align:left">取地址</td></tr><tr><td style="text-align:left">用途</td><td style="text-align:left">指向变量</td><td style="text-align:left">获取变量的地址</td></tr><tr><td style="text-align:left">实现</td><td style="text-align:left">可以用来避免值传递造成的副本开销</td><td style="text-align:left">可以用来访问变量的值</td></tr></tbody></table><p><strong>*<em> 和 </em> 的区别</strong></p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">**</th><th style="text-align:left">*</th></tr></thead><tbody><tr><td style="text-align:left">定义</td><td style="text-align:left">指针的指针</td><td style="text-align:left">指针</td></tr><tr><td style="text-align:left">用途</td><td style="text-align:left">存储另一个指针的地址</td><td style="text-align:left">存储变量的地址</td></tr><tr><td style="text-align:left">实现</td><td style="text-align:left">可以用来实现链表、树等数据结构</td><td style="text-align:left">可以用来访问变量的值</td></tr></tbody></table><p><strong>示例</strong></p><p>C++</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp;&amp; 和 &amp;</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;y = x;</span><br><span class="line"><span class="built_in">int</span> *p = &amp;x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ** 和 *</span></span><br><span class="line"><span class="built_in">int</span> *p1 = new <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">int</span> **pp = &amp;p1;</span><br></pre></td></tr></table></figure><p>请谨慎使用代码。<a href="https://bard.google.com/faq#coding" target="_blank" rel="noopener">了解详情</a></p><p>content_copy</p><p>在这种情况下，<code>y</code> 是一个引用，它指向变量 <code>x</code>。<code>p</code> 是一个指针，它指向变量 <code>x</code> 的地址。<code>p1</code> 是一个指针，它指向一个整数。<code>pp</code> 是一个指针，它指向一个指针，该指针指向一个整数。</p><p><strong>结论</strong></p><p>&amp;&amp; 和 &amp; 表示引用和取地址，*<em> 和 </em> 表示指针的指针和指针。</p><p><strong>总结</strong></p><p>*<em> 和 </em> 在 C 和 C++ 中的区别在于：</p><ul><li>** 在 C 中表示指针的指针，在 C++ 中表示指针。</li><li>** 在 C 中可以用来存储另一个指针的地址，在 C++ 中可以用来存储变量的地址。</li></ul><p>因此，&amp;&amp; 和 &amp; 在 C 和 C++ 中都是可用的，意思也完全相同。*<em> 和 </em> 在 C 中也可以使用，但意思与 C++ 中的意思有所不同。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看方法参数中的疑惑&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sai_status_t&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sai_api_query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(_In_ &lt;span class=&quot;keyword&quot;&gt;sai_api_t&lt;/span&gt; sai_api_id, _Out_ &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;** api_method_table)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;_In_和_Out_是用于标记参数的传递方式的注解。它们并不是C\C++语言的关键字，而是一种约定俗成的注释方式，用于提示函数的调用者和阅读者关于参数的特性。&lt;/p&gt;
&lt;p&gt;_In_表示该参数是输入参数，即函数内部会读取参数的值，但不会修改它。通过这个标记，我们可以清楚地知道该参数在函数内部只被用于读取数据。&lt;/p&gt;
&lt;p&gt;_Out_表示该参数是输出参数，即函数内部会修改参数的值，并将修改后的结果返回给调用者。通过这个标记，我们可以清楚地知道该参数在函数内部会被修改，我们在调用函数时需要确认传入的参数具备存储修改后结果的能力。&lt;/p&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://2tu.github.io/categories/C-C/"/>
    
    
    <category term="_In_" scheme="https://2tu.github.io/tags/In/"/>
    
    <category term="_Out_" scheme="https://2tu.github.io/tags/Out/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据类型字段占用空间</title>
    <link href="https://2tu.github.io/2023/09/03/mysql-storage-requirements/"/>
    <id>https://2tu.github.io/2023/09/03/mysql-storage-requirements/</id>
    <published>2023-09-03T03:41:25.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<p>经常看到这种建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table1`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`fileProtocol`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><p>sql中为每个字段都加上了长度限制，能限制住吗？存储数据时占用的空间又是多少呢？</p><p>具体见<a href="https://dev.mysql.com/doc/refman/5.7/en/storage-requirements.html" target="_blank" rel="noopener">Data Type Storage Requirements</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经常看到这种建表sql&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="MySQL" scheme="https://2tu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>内存没满但是频繁fullgc，是不是ReservedCodeCacheSize的锅</title>
    <link href="https://2tu.github.io/2023/09/03/why-the-memory-not-full-but-frequently-fullgc/"/>
    <id>https://2tu.github.io/2023/09/03/why-the-memory-not-full-but-frequently-fullgc/</id>
    <published>2023-09-03T02:38:35.000Z</published>
    <updated>2024-02-27T11:35:39.219Z</updated>
    
    <content type="html"><![CDATA[<h5 id="业务中的现象表现"><a href="#业务中的现象表现" class="headerlink" title="业务中的现象表现"></a>业务中的现象表现</h5><p>运行一段时间后，频繁fullgc，2s10几次fullgc，无法对外提供服务</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><h5 id="gc日志"><a href="#gc日志" class="headerlink" title="gc日志"></a>gc日志</h5><p>内存还有非常多的情况下就开始了fullgc</p><h5 id="dump分析"><a href="#dump分析" class="headerlink" title="dump分析"></a>dump分析</h5><p>只看到class loader的一直重新加载？内存指向java.security.Permission，没有其他大对象？没有搞懂重新改好了也是这样，需要再搞懂</p><h5 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m -Xmx256m -XX:ReservedCodeCacheSize=50m -XX:MetaspaceSize=96m -XX:MaxMetaspaceSize=96m -Xss256k -XX:MaxDirectMemorySize=16m</span><br><span class="line">-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSClassUnloadingEnabled</span><br><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:GCLogFileSize=10M -XX:NumberOfGCLogFiles=3 -Xloggc:/var/logs/gc1.log</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:NativeMemoryTracking=summary</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/var/logs/dump1-$(date +%Y%m%d%H%M%S).hprof"</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>怀疑是-XX:ReservedCodeCacheSize=50m导致Meta不生效，导致重新加载fullgc?</p><p>修改为jvm参数，后好使了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m -Xmx256m -XX:PermSize=128m -XX:-UseGCOverheadLimit -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80</span><br><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:GCLogFileSize=10M -XX:NumberOfGCLogFiles=3 -Xloggc:/var/logs/gc1.log</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:NativeMemoryTracking=summary</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/var/logs/dump1-$(date +%Y%m%d%H%M%S).hprof"</span><br></pre></td></tr></table></figure><p>需要再研究，怎么来指向这个问题。</p><p>另外火焰图必不可少</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;业务中的现象表现&quot;&gt;&lt;a href=&quot;#业务中的现象表现&quot; class=&quot;headerlink&quot; title=&quot;业务中的现象表现&quot;&gt;&lt;/a&gt;业务中的现象表现&lt;/h5&gt;&lt;p&gt;运行一段时间后，频繁fullgc，2s10几次fullgc，无法对外提供服务&lt;/p&gt;
&lt;h4</summary>
      
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="fullgc" scheme="https://2tu.github.io/tags/fullgc/"/>
    
  </entry>
  
  <entry>
    <title>怎样使用DataX将HBase数据导入到MySQL</title>
    <link href="https://2tu.github.io/2023/08/04/how-to-hbase-to-mysql-on-datax/"/>
    <id>https://2tu.github.io/2023/08/04/how-to-hbase-to-mysql-on-datax/</id>
    <published>2023-08-04T10:03:44.000Z</published>
    <updated>2024-02-27T11:35:39.203Z</updated>
    
    <content type="html"><![CDATA[<p>有需求使用DataX将HBase表中数据迁移到MySQL中，有的表在Phoenix中定义，使用hbase20xsqlreader读取。有的没有在Phoenix中定义，数据是动态插入，列是不固定的。</p><ul><li>hbase20xsqlreader，读取Phoenix</li><li>hbase11xreader，读取HBase</li></ul><p>不管读取HBase还是Phoenix都要求填写column，但是可以写sql占位，传进来。</p><p>我这里由于业务原因就没有使用占位符的方式传递。</p><p>现在的业务需求是我HBase横表迁移到MySQL纵表中。</p><p>动态列中的列名有在MySQL表中记录，所以实现流程就是</p><ol><li>shell 脚本调用mysql读取出要在HBase中读取的列</li><li>循环生成hbase11xreader读取-写入txt的DataX json</li><li>调用DataX执行上面的json文件导出txt</li><li>循环txt为每行加入MySQL要插入的列key</li><li>生成读取txt，写入MySQL</li></ol><a id="more"></a><p>代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL连接信息</span></span><br><span class="line">DB_USER=""</span><br><span class="line">DB_PASS=""</span><br><span class="line">DB_HOST=""</span><br><span class="line">DB_NAME=""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行的SQL语句</span></span><br><span class="line">SQL_QUERY="SELECT columnKey,otherColumn FROM KV;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行SQL并将结果存储到关联数组</span></span><br><span class="line">result=($(mysql -u$&#123;DB_USER&#125; -p$&#123;DB_PASS&#125; -h$&#123;DB_HOST&#125; -D$&#123;DB_NAME&#125; -N -B -e "$&#123;SQL_QUERY&#125;"))</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历结果，生成文件</span></span><br><span class="line">for ((i=0; i&lt;$&#123;#result[@]&#125;; i+=2)); do</span><br><span class="line">    columnKey=$&#123;result[i]&#125;</span><br><span class="line">    otherColumn=$&#123;result[i+1]&#125;</span><br><span class="line">    </span><br><span class="line">    # 生成JSON内容</span><br><span class="line">    json_content="&#123;</span><br><span class="line">        \"job\": &#123;</span><br><span class="line">            \"setting\": &#123;</span><br><span class="line">                \"speed\": &#123;</span><br><span class="line">                    \"channel\": 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            \"content\": [</span><br><span class="line">                &#123;</span><br><span class="line">                    \"reader\": &#123;</span><br><span class="line">                        \"name\": \"hbase11xreader\",</span><br><span class="line">                        \"parameter\": &#123;</span><br><span class="line">                            \"hbaseConfig\": &#123;</span><br><span class="line">                                \"hbase.zookeeper.quorum\": \"localhost\"</span><br><span class="line">                            &#125;,</span><br><span class="line">                            \"table\": \"Table\",</span><br><span class="line">                            \"encoding\": \"utf-8\",</span><br><span class="line">                            \"mode\": \"normal\",</span><br><span class="line">                            \"column\": [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    \"name\": \"cf: column1\",</span><br><span class="line">                                    \"type\": \"string\"</span><br><span class="line">                                &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                    \"name\": \"cf: column2\",</span><br><span class="line">                                    \"type\": \"date\",</span><br><span class="line">                                    \"format\":\"yyyy-MM-dd HH:mm:ss\"</span><br><span class="line">                                &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                    \"name\": \"cf: $&#123;columnKey&#125;\",</span><br><span class="line">                                    \"type\": \"string\"</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            \"range\": &#123;</span><br><span class="line">                                \"startRowkey\": \"\",</span><br><span class="line">                                \"endRowkey\": \"\",</span><br><span class="line">                                \"isBinaryRowkey\": true</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    \"writer\": &#123;</span><br><span class="line">                        \"name\": \"txtfilewriter\",</span><br><span class="line">                        \"parameter\": &#123;</span><br><span class="line">                            \"path\": \"datax_trans_file/tmp\",</span><br><span class="line">                            \"fileName\": \"dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;\",</span><br><span class="line">                            \"writeMode\": \"truncate\",</span><br><span class="line">                            \"fieldDelimiter\": \"|\"</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;"</span><br><span class="line">    </span><br><span class="line">    # 将JSON内容写入文件</span><br><span class="line">    echo "$json_content" &gt; "datax_trans_file/dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;_2txt.json"</span><br><span class="line"></span><br><span class="line">    # 执行datax 生成txt文件</span><br><span class="line">    dataxtool/datax/bin/datax.py datax_trans_file/dataCustom_$&#123;columnKey&#125;_$&#123;otherColumn&#125;_2txt.json</span><br><span class="line">    </span><br><span class="line">     # 读出对应txt 插入统计编码和名称</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出txt文件列表 插入数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历指定目录下的匹配文件，并处理文件内容</span></span><br><span class="line">for file in datax_trans_file/tmp/dataCustom_*; do</span><br><span class="line">    if [[ -f "$file" ]]; then</span><br><span class="line">        # 提取otherColumn和columnKey</span><br><span class="line">        filename=$(basename "$file")</span><br><span class="line">        IFS="_" read -ra parts &lt;&lt;&lt; "$filename"</span><br><span class="line">        columnKey="$&#123;parts[1]&#125;"</span><br><span class="line">        otherColumn="$&#123;parts[2]&#125;"</span><br><span class="line"></span><br><span class="line">          # 为每一行添加信息</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            echo "$line|$columnKey|$otherColumn|1"</span><br><span class="line">        done &lt; "$file" &gt; "$file.tmp"</span><br><span class="line"></span><br><span class="line">        # 将临时文件替换原文件</span><br><span class="line">        mv "$file.tmp" "$file"</span><br><span class="line"></span><br><span class="line">        echo "Added info to: $file"</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行写入mysql</span></span><br><span class="line">dataxtool/datax/bin/datax.py datax_trans_file/dataCustom2mysql.json</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有需求使用DataX将HBase表中数据迁移到MySQL中，有的表在Phoenix中定义，使用hbase20xsqlreader读取。有的没有在Phoenix中定义，数据是动态插入，列是不固定的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hbase20xsqlreader，读取Phoenix&lt;/li&gt;
&lt;li&gt;hbase11xreader，读取HBase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管读取HBase还是Phoenix都要求填写column，但是可以写sql占位，传进来。&lt;/p&gt;
&lt;p&gt;我这里由于业务原因就没有使用占位符的方式传递。&lt;/p&gt;
&lt;p&gt;现在的业务需求是我HBase横表迁移到MySQL纵表中。&lt;/p&gt;
&lt;p&gt;动态列中的列名有在MySQL表中记录，所以实现流程就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shell 脚本调用mysql读取出要在HBase中读取的列&lt;/li&gt;
&lt;li&gt;循环生成hbase11xreader读取-写入txt的DataX json&lt;/li&gt;
&lt;li&gt;调用DataX执行上面的json文件导出txt&lt;/li&gt;
&lt;li&gt;循环txt为每行加入MySQL要插入的列key&lt;/li&gt;
&lt;li&gt;生成读取txt，写入MySQL&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="DataX" scheme="https://2tu.github.io/tags/DataX/"/>
    
    <category term="HBase" scheme="https://2tu.github.io/tags/HBase/"/>
    
    <category term="MySQL" scheme="https://2tu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>符合国际标准的城市编码</title>
    <link href="https://2tu.github.io/2023/08/03/the-international-standard-country-codes/"/>
    <id>https://2tu.github.io/2023/08/03/the-international-standard-country-codes/</id>
    <published>2023-08-03T23:53:00.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>fork的项目<a href="https://github.com/yihong0618/running_page" target="_blank" rel="noopener">running_page</a>有一个<a href="https://github.com/yihong0618/running_page/issues/292" target="_blank" rel="noopener">Issue</a>提到国家和地区识别不正确，看了数据样例较为复杂，有的是有国家省市区，有的只有部分，还有国外的。running_page中代码以逗号分隔取国家，然后根据<a href="http://www.stats.gov.cn/sj/tjbz/qhdm/" target="_blank" rel="noopener">统计用区划代码和城乡划分代码</a>对比取出城市。</p><p>问题是，数据是全球的用户是全球的，那全球各个国家和区域的标准应该是什么？中国有省市区，那其他国家有吗？有统一标准吗？</p><h3 id="国际标准-ISO-3166"><a href="#国际标准-ISO-3166" class="headerlink" title="国际标准 ISO 3166"></a>国际标准 ISO 3166</h3><p>全球化那就必然要找国际标准了，看这里<a href="https://en.wikipedia.org/wiki/ISO_3166" target="_blank" rel="noopener">ISO 3166</a>, <strong><em>Codes for the representation of names of countries and their subdivisions</em></strong></p><p>里面又包含了</p><ul><li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-1" target="_blank" rel="noopener">ISO 3166-1</a></strong> 国家代码</li><li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-2" target="_blank" rel="noopener">ISO 3166-2</a></strong> 国家分支机构代码</li><li><strong><a href="https://en.wikipedia.org/wiki/ISO_3166-3" target="_blank" rel="noopener">ISO 3166-3</a></strong> 国家曾用名代码</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>我们拿到gps后做需要逆地址解析拿到ISO 3166标准的代码，有哪些方式可以呢，google map？</p><p>我调研了2个方式</p><a id="more"></a><h4 id="GeoNames"><a href="#GeoNames" class="headerlink" title="GeoNames"></a>GeoNames</h4><p>The GeoNames geographical database covers all countries and contains over eleven million placenames that are available for download free of charge.</p><p>免费全球地理数据库</p><p>注册账号，每个账号有免费调用接口额度，对于个人来说完全够了，接口不同占用额度不同，具体如下</p><p><a href="https://www.geonames.org/export/" target="_blank" rel="noopener">Terms and Conditions</a></p><p><img src="/2023/08/03/the-international-standard-country-codes/terms-and-conditions.png" alt="Terms and Conditions"></p><p><a href="https://www.geonames.org/export/credits.html" target="_blank" rel="noopener">GeoNames Webservice Credits</a></p><p><img src="/2023/08/03/the-international-standard-country-codes/webservice-credits.png" alt="GeoNames Webservice Credits"></p><h4 id="Nominatim"><a href="#Nominatim" class="headerlink" title="Nominatim"></a>Nominatim</h4><p><a href="https://nominatim.org/release-docs/develop/" target="_blank" rel="noopener">Nominatim</a></p><p>Nominatim 是一个开源的地理数据库，可通过 REST API 访问。它由 OpenStreetMap 社区维护，包含来自各种来源的数据，包括 OpenStreetMap 数据库、维基百科和其他开放数据集。</p><p>Nominatim 解析的地址是使用国际标准化组织 (ISO) 3166 标准。ISO 3166 标准定义了世界各国的名称和代码。Nominatim 还使用其他标准，如 ISO 6709 标准，该标准定义了地理坐标的格式。</p><p>有python库Nominatim</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMjU3MjUyMg==&amp;mid=2247484595&amp;idx=4&amp;sn=0cbe29b0051ac460b3bb7924dba62395&amp;chksm=e89397b6dfe41ea03322c234d5745812f144968e74034fc229b550bab65a1755a1fba446629b&amp;scene=27" target="_blank" rel="noopener">对ISO3166《国家和所属地区名称代码》国际标准的几点认识</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;fork的项目&lt;a href=&quot;https://github.com/yihong0618/running_page&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;running_page&lt;/a&gt;有一个&lt;a href=&quot;https://github.com/yihong0618/running_page/issues/292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Issue&lt;/a&gt;提到国家和地区识别不正确，看了数据样例较为复杂，有的是有国家省市区，有的只有部分，还有国外的。running_page中代码以逗号分隔取国家，然后根据&lt;a href=&quot;http://www.stats.gov.cn/sj/tjbz/qhdm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;统计用区划代码和城乡划分代码&lt;/a&gt;对比取出城市。&lt;/p&gt;
&lt;p&gt;问题是，数据是全球的用户是全球的，那全球各个国家和区域的标准应该是什么？中国有省市区，那其他国家有吗？有统一标准吗？&lt;/p&gt;
&lt;h3 id=&quot;国际标准-ISO-3166&quot;&gt;&lt;a href=&quot;#国际标准-ISO-3166&quot; class=&quot;headerlink&quot; title=&quot;国际标准 ISO 3166&quot;&gt;&lt;/a&gt;国际标准 ISO 3166&lt;/h3&gt;&lt;p&gt;全球化那就必然要找国际标准了，看这里&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ISO 3166&lt;/a&gt;, &lt;strong&gt;&lt;em&gt;Codes for the representation of names of countries and their subdivisions&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;里面又包含了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ISO 3166-1&lt;/a&gt;&lt;/strong&gt; 国家代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ISO 3166-2&lt;/a&gt;&lt;/strong&gt; 国家分支机构代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ISO 3166-3&lt;/a&gt;&lt;/strong&gt; 国家曾用名代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h3&gt;&lt;p&gt;我们拿到gps后做需要逆地址解析拿到ISO 3166标准的代码，有哪些方式可以呢，google map？&lt;/p&gt;
&lt;p&gt;我调研了2个方式&lt;/p&gt;</summary>
    
    
    
    <category term="Other" scheme="https://2tu.github.io/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>如何启动Phoenix Query Server</title>
    <link href="https://2tu.github.io/2023/08/03/how-to-start-phoenix-query-server/"/>
    <id>https://2tu.github.io/2023/08/03/how-to-start-phoenix-query-server/</id>
    <published>2023-08-03T13:57:55.000Z</published>
    <updated>2024-02-27T11:35:39.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>启动Phenix Query Server 6.0.0报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2023-08-03 15:20:01.672088 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf::/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类 org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure><p>HBase 2.4.15</p><p>Phoenix 5.1.3</p><h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>升级HBase 2.4.15后，之前的Phoenix 4.13.1就不能用了。从Phoenix官网看到Phoenix和HBase的版本对应。</p><blockquote><p>Current release 4.16.1 can run on Apache HBase 1.3, 1.4, 1.5 and 1.6.<br>Current release 5.1.3 can run on Apache HBase 2.1, 2.2, 2.3, 2.4 and 2.5.</p></blockquote><p>然后Phoenix 5.1.3中没有带query server，需要单独下载query server并启动，如图</p><p><img src="/2023/08/03/how-to-start-phoenix-query-server/query-server-installation.png" alt="Query Server Installation"></p><a id="more"></a><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>下载启动<a href="https://phoenix.apache.org/download.html" target="_blank" rel="noopener">Phonex Query 6.0.0</a>报了上面的错误</p><h4 id="找不到或无法加载主类"><a href="#找不到或无法加载主类" class="headerlink" title="找不到或无法加载主类"></a>找不到或无法加载主类</h4><p>报这种错，原因有可能是</p><ul><li><p>class path路径不对</p></li><li><p>子路径不匹配</p></li><li><p>class path缺少依赖</p><p>class-path需要你整个应用所有的依赖的class，也就是为了主类加载正确，JVM需要找到：</p><ul><li>主类本身；</li><li>所有父亲类以及接口；</li><li>所有声明变量的类以及调用的方法等</li></ul></li></ul><p>查看上面的错误日志phoenix-queryserver-6.0.0.jar中是有org.apache.phoenix.queryserver.server.QueryServer的，可能的问题是class path缺少依赖</p><h4 id="修改日志级别，查看详细错误信息"><a href="#修改日志级别，查看详细错误信息" class="headerlink" title="修改日志级别，查看详细错误信息"></a>修改日志级别，查看详细错误信息</h4><p>需要找到具体缺少了什么依赖，能否拿到详细报错信息辅助我们找到错误？</p><p>启动命令中有log4j.properties -Dpsql.root.logger=INFO,</p><p>我选择修改log3j.properties中的日志类型为DEBUG，再重新启动，查看日志，得到如下错误信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">2023-08-03 15:28:01.024619 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf:/var/phoenix-queryserver-6.0.0/bin/../phoenix-client-hbase-2.4-5.1.3.jar:/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line">Exception in thread "Thread-20" java.lang.RuntimeException: java.io.FileNotFoundException: /var/phoenix-queryserver-6.0.0/phoenix-client-hbase-2.4-5.1.3.jar (没有那个文件或目录)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:3021)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResources(Configuration.java:2968)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getProps(Configuration.java:2848)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.get(Configuration.java:1200)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getTrimmed(Configuration.java:1254)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getBoolean(Configuration.java:1660)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.checkDefaultsVersion(HBaseConfiguration.java:69)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.addHbaseResources(HBaseConfiguration.java:83)</span><br><span class="line">        at org.apache.hadoop.hbase.HBaseConfiguration.create(HBaseConfiguration.java:97)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl$1.call(ConfigurationFactory.java:49)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl$1.call(ConfigurationFactory.java:46)</span><br><span class="line">        at org.apache.phoenix.util.PhoenixContextExecutor.call(PhoenixContextExecutor.java:76)</span><br><span class="line">        at org.apache.phoenix.util.PhoenixContextExecutor.callWithoutPropagation(PhoenixContextExecutor.java:90)</span><br><span class="line">        at org.apache.phoenix.query.ConfigurationFactory$ConfigurationFactoryImpl.getConfiguration(ConfigurationFactory.java:46)</span><br><span class="line">        at org.apache.phoenix.jdbc.PhoenixDriver$1.run(PhoenixDriver.java:77)</span><br><span class="line">Caused by: java.io.FileNotFoundException: /var/phoenix-queryserver-6.0.0/phoenix-client-hbase-2.4-5.1.3.jar (没有那个文件或目录)</span><br><span class="line">        at java.util.zip.ZipFile.open(Native Method)</span><br><span class="line">        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:225)</span><br><span class="line">        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:155)</span><br><span class="line">        at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:166)</span><br><span class="line">        at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:103)</span><br><span class="line">        at sun.net.www.protocol.jar.URLJarFile.&lt;init&gt;(URLJarFile.java:93)</span><br><span class="line">        at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)</span><br><span class="line">        at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:99)</span><br><span class="line">        at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)</span><br><span class="line">        at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:152)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.parse(Configuration.java:2943)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.getStreamReader(Configuration.java:3037)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:2995)</span><br><span class="line">        ... 14 more</span><br><span class="line">2023-08-03 17:44:55.845183 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf::/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br><span class="line">错误: 找不到或无法加载主类 org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure><p>从上面日志，看到了错误问题，缺少phoenix-client-hbase-2.4-5.1.3.jar</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="复制phoenix-client-hbase-2-4-5-1-3-jar"><a href="#复制phoenix-client-hbase-2-4-5-1-3-jar" class="headerlink" title="复制phoenix-client-hbase-2.4-5.1.3.jar"></a>复制phoenix-client-hbase-2.4-5.1.3.jar</h4><p>从Phoenix 5.1.3目录下复制phoenix-client-hbase-2.4-5.1.3.jar到phoenix-queryserver-6.0.0的目录下</p><h4 id="启动Phoenix-Query-Server"><a href="#启动Phoenix-Query-Server" class="headerlink" title="启动Phoenix Query Server"></a>启动Phoenix Query Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/queryserver.py start</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ump225 phoenix-queryserver-6.0.0]# bin/queryserver.py start</span><br><span class="line">starting Query Server, logging to /tmp/phoenix/phoenix-root-queryserver.log</span><br><span class="line">[root@ump225 phoenix-queryserver-6.0.0]# tail -100f /tmp/phoenix/phoenix-root-queryserver.out</span><br><span class="line">2023-08-03 23:13:57.910434 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf:/var/phoenix-queryserver-6.0.0/bin/../phoenix-client-hbase-2.4-5.1.3.jar:/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log  org.apache.phoenix.queryserver.server.QueryServer</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如何启动Phoenix Query Server 6.0.0</p><ul><li>从Phoenix 5.1.3目录下复制phoenix-client-hbase-2.4-5.1.3.jar到phoenix-queryserver-6.0.0的目录下</li><li>在Phoenix Query Server 6.0.0目录下执行bin/queryserver.py start</li><li>查看日志/tmp/phoenix/phoenix-root-queryserver.out是否启动成功</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;启动Phenix Query Server 6.0.0报错&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2023-08-03 15:20:01.672088 launching /var/jdk/bin/java -cp /etc/hbase/conf:/etc/hadoop/conf::/var/phoenix-queryserver-6.0.0/bin/../phoenix-queryserver-6.0.0.jar: -Dproc_phoenixserver -Dlog4j.configuration=file:/var/phoenix-queryserver-6.0.0/bin/log4j.properties -Dpsql.root.logger=INFO,DRFA -Dpsql.log.dir=/tmp/phoenix -Dpsql.log.file=phoenix-root-queryserver.log org.apache.phoenix.queryserver.server.QueryServer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;错误: 找不到或无法加载主类 org.apache.phoenix.queryserver.server.QueryServer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HBase 2.4.15&lt;/p&gt;
&lt;p&gt;Phoenix 5.1.3&lt;/p&gt;
&lt;h3 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h3&gt;&lt;p&gt;升级HBase 2.4.15后，之前的Phoenix 4.13.1就不能用了。从Phoenix官网看到Phoenix和HBase的版本对应。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Current release 4.16.1 can run on Apache HBase 1.3, 1.4, 1.5 and 1.6.&lt;br&gt;Current release 5.1.3 can run on Apache HBase 2.1, 2.2, 2.3, 2.4 and 2.5.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后Phoenix 5.1.3中没有带query server，需要单独下载query server并启动，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/03/how-to-start-phoenix-query-server/query-server-installation.png&quot; alt=&quot;Query Server Installation&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="Phoenix Query Server 6.0.0" scheme="https://2tu.github.io/tags/Phoenix-Query-Server-6-0-0/"/>
    
  </entry>
  
  <entry>
    <title>FTP传输到底用的哪个端口</title>
    <link href="https://2tu.github.io/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/"/>
    <id>https://2tu.github.io/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/</id>
    <published>2023-06-30T11:38:35.000Z</published>
    <updated>2024-02-27T11:35:39.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>最近使用Docker搭建FTP后，<strong>客户端可以连接无法列出目录，无法上传</strong>。通常我们认为FTP占用端口21用于传输控制命令，20传输数据。而我的21、20端口都有映射、开放。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> (24.0.2, build cb74dfc)</li><li><a href="https://mina.apache.org/ftpserver-project/index.html" target="_blank" rel="noopener">Apache FtpServer</a> (1.0.0)</li></ul><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>FileZilla连接效果如下</p><p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/log-FileZilla-pasv-port-not-open.png" alt></p><a id="more"></a><p>对应FtpServer的日志如下</p><p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/log-ftpserver-pasv-port-not-open.png" alt></p><p>根据上面信息看到前面的控制命令都正常工作，直到FtpServer收到”MLSD”时，出现异常</p><p>MLSD：获取远程服务器上的文件和目录列表（Machine List Directory）</p><p>此时，连接为PASV（被动模式），FtpServer使用端口26037与客户端连接传输数据</p><p>而26037端口并未对外开放，我们以为的只有21、20，26037又是怎么来的，在哪里配置的呢？</p><p>原来FTP分为PORT(主动模式)和PASV(被动模式)</p><h3 id="FTP主动模式和被动模式"><a href="#FTP主动模式和被动模式" class="headerlink" title="FTP主动模式和被动模式"></a>FTP主动模式和被动模式</h3><p>以下内容来源于ChatGPT</p><ol><li><p><strong>主动模式</strong></p><p>在主动模式中，客户端首先建立一个控制连接（Control Connection）到服务器的FTP控制端口（默认为21）。当需要进行数据传输时，客户端会随机选择一个高位端口（大于1023）作为数据端口，并将该端口号发送给服务器。服务器会通过控制连接告知客户端它将使用的数据端口（服务器端口）。然后，客户端会主动连接服务器的数据端口，以进行数据传输。</p></li><li><p><strong>被动模式</strong></p><p>在被动模式中，客户端首先建立一个控制连接到服务器的FTP控制端口（默认为21）。当需要进行数据传输时，服务器会随机选择一个高位端口（1024-65535）作为数据端口，并将该端口号发送给客户端。然后，客户端会通过控制连接告知服务器它将使用的数据端口（客户端端口）。服务器会主动连接客户端的数据端口，以进行数据传输。</p></li></ol><p>主动模式和被动模式的区别在于数据连接的建立方式。在主动模式中，客户端主动连接服务器的数据端口，而在被动模式中，服务器主动连接客户端的数据端口。</p><p>使用主动模式时，客户端需要打开一个高位端口用于数据连接，这可能会导致防火墙或网络设备的配置问题。而使用被动模式时，服务器打开一个高位端口用于数据连接，这样更容易通过防火墙和网络设备。</p><p>需要注意的是，FTP协议已经有一些安全性和性能问题，因此在实际应用中，往往会使用更安全和高效的替代协议，如SFTP（SSH File Transfer Protocol）或FTPS（FTP over SSL/TLS）。</p><p>附图</p><p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/PORT.jpg" alt></p><p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/PASV.jpg" alt></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>了解到FTP主动模式、被动模式后，我们选择的是修改被动模式，因为我们无法干涉客户端的环境，客户端随机端口被防火墙拦截，我们无法处理。但被动模式下1024-65535的端口范围太大，我们不希望FtpServer开放这么多端口，那如何自定义修改呢？</p><h4 id="修改FtpServer被动模式端口"><a href="#修改FtpServer被动模式端口" class="headerlink" title="修改FtpServer被动模式端口"></a>修改FtpServer被动模式端口</h4><p>修改FtpServer的ftpd-typical.xml</p><p><img src="/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/passive-port.png" alt></p><p>修改后端口范围为12200-12202，再开放映射端口后，就可以正常工作了</p><p><strong>Notice：</strong></p><p>When the client wants to use a passive data connection, the server should provide the port to use.<br> By default, FtpServer will choose any available port. However this can be overridden using the configuration for the passive data connection.<br> When the server has used up all passive ports (one per client doing passive data transfer), t<strong>he next clients will have to wait for an available port</strong>.<br> It is therefore advised to provide multiple passive ports.</p><p><a href="https://mina.apache.org/ftpserver-project/configuration_passive_ports.html" target="_blank" rel="noopener">Configure passive ports</a></p><p>是否需要根据并发来考虑端口范围呢？</p><p>其中tcpdump作用太大，得精研一下</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/ct_bao/article/details/110162301" target="_blank" rel="noopener">FTP的主动模式和被动模式详解</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc959" target="_blank" rel="noopener">FILE TRANSFER PROTOCOL</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc1579" target="_blank" rel="noopener">Firewall-Friendly FTP</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;最近使用Docker搭建FTP后，&lt;strong&gt;客户端可以连接无法列出目录，无法上传&lt;/strong&gt;。通常我们认为FTP占用端口21用于传输控制命令，20传输数据。而我的21、20端口都有映射、开放。&lt;/p&gt;
&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; (24.0.2, build cb74dfc)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mina.apache.org/ftpserver-project/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache FtpServer&lt;/a&gt; (1.0.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; class=&quot;headerlink&quot; title=&quot;原因分析&quot;&gt;&lt;/a&gt;原因分析&lt;/h3&gt;&lt;p&gt;FileZilla连接效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/06/30/which-port-is-used-to-data-transmission-by-ftp/log-FileZilla-pasv-port-not-open.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="FTP" scheme="https://2tu.github.io/tags/FTP/"/>
    
    <category term="EPASV" scheme="https://2tu.github.io/tags/EPASV/"/>
    
  </entry>
  
  <entry>
    <title>服务器时间错误导致MySQL证书错误问题</title>
    <link href="https://2tu.github.io/2023/06/24/what-cause-hibernate-dialect-not-set/"/>
    <id>https://2tu.github.io/2023/06/24/what-cause-hibernate-dialect-not-set/</id>
    <published>2023-06-24T08:16:41.000Z</published>
    <updated>2024-02-27T11:35:39.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HibernateException-‘hibernate-dialect’-not-set"><a href="#HibernateException-‘hibernate-dialect’-not-set" class="headerlink" title="HibernateException ‘hibernate.dialect’ not set"></a>HibernateException ‘hibernate.dialect’ not set</h3><p><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/hibernate-dialect-not-set.png" alt><br>同一个jar包，在某个环境下启动应用报错，另一个环境可以正常启动。报上面的错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be <span class="keyword">null</span> when <span class="string">'hibernate.dialect'</span> not set</span><br></pre></td></tr></table></figure></p><h3 id="MySQL证书错误"><a href="#MySQL证书错误" class="headerlink" title="MySQL证书错误"></a>MySQL证书错误</h3><p>查看MySQL日志mysql/mysqld.log其中有<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-05</span>T02:<span class="number">19</span>:<span class="number">10.762462</span>Z <span class="number">0</span> [Note] Found ca.pem, server-cert.pem <span class="keyword">and</span> server-key.pem <span class="keyword">in</span> data directory. Trying to enable SSL support using them.</span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-05</span>T02:<span class="number">19</span>:<span class="number">10.762482</span>Z <span class="number">0</span> [Note] Skipping generation of SSL certificates as certificate files are present <span class="keyword">in</span> data directory.</span><br></pre></td></tr></table></figure><br><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/mysqld-log-cert.png" alt="MySQL cert error"><br><a id="more"></a><br><strong>服务器安装时服务器时间为2000年，在这个时间下安装启动了MySQL，现在将服务器时间正常同步为2023年，服务器时间差异大，MySQL证书过期导致无法访问</strong></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>删除旧证书</li><li>重启MySQL<br><img src="/2023/06/24/what-cause-hibernate-dialect-not-set/rm-pem.png" alt="rm pem"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><a href="https://dev.mysql.com/doc/mysql-security-excerpt/5.7/en/creating-ssl-rsa-files-using-mysql.html" target="_blank" rel="noopener">Creating SSL and RSA Certificates and Keys using MySQL</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;HibernateException-‘hibernate-dialect’-not-set&quot;&gt;&lt;a href=&quot;#HibernateException-‘hibernate-dialect’-not-set&quot; class=&quot;headerlink&quot; title=&quot;HibernateException ‘hibernate.dialect’ not set&quot;&gt;&lt;/a&gt;HibernateException ‘hibernate.dialect’ not set&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2023/06/24/what-cause-hibernate-dialect-not-set/hibernate-dialect-not-set.png&quot; alt&gt;&lt;br&gt;同一个jar包，在某个环境下启动应用报错，另一个环境可以正常启动。报上面的错误&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; when &lt;span class=&quot;string&quot;&gt;&#39;hibernate.dialect&#39;&lt;/span&gt; not set&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;MySQL证书错误&quot;&gt;&lt;a href=&quot;#MySQL证书错误&quot; class=&quot;headerlink&quot; title=&quot;MySQL证书错误&quot;&gt;&lt;/a&gt;MySQL证书错误&lt;/h3&gt;&lt;p&gt;查看MySQL日志mysql/mysqld.log其中有&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-02&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;T02:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10.762462&lt;/span&gt;Z &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [Note] Found ca.pem, server-cert.pem &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; server-key.pem &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data directory. Trying to enable SSL support using them.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-02&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;T02:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10.762482&lt;/span&gt;Z &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [Note] Skipping generation of SSL certificates as certificate files are present &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data directory.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;img src=&quot;/2023/06/24/what-cause-hibernate-dialect-not-set/mysqld-log-cert.png&quot; alt=&quot;MySQL cert error&quot;&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="MySQL" scheme="https://2tu.github.io/tags/MySQL/"/>
    
    <category term="Hibernate" scheme="https://2tu.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>选择横表还是纵表</title>
    <link href="https://2tu.github.io/2023/06/01/row-or-column-table/"/>
    <id>https://2tu.github.io/2023/06/01/row-or-column-table/</id>
    <published>2023-06-01T22:03:43.000Z</published>
    <updated>2024-02-27T11:35:39.207Z</updated>
    
    <content type="html"><![CDATA[<p>数据库：MySQL 5.7<br>业务上有<strong>25个维度共2000多个指标</strong>数据需要存储。对于这种可变字段的指标数据，第一想法是采用纵表存储。但是具体该如何选择还是得结合业务看优缺点才行。</p><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><h5 id="数据量"><a href="#数据量" class="headerlink" title="数据量"></a>数据量</h5><p>1k台设备，每台设备每5分钟一次全量指标数据，存储60天</p><ul><li>纵表：60<em>24</em>60/5<em>1000</em>2000=<strong>345.6亿</strong></li><li>横表：345.6亿/2000=<strong>1728万</strong></li></ul><h5 id="查询场景"><a href="#查询场景" class="headerlink" title="查询场景"></a>查询场景</h5><ul><li>按指标维度+时间范围分页查</li><li><p>按同一时间上报的指标数据（时间+指标名称）</p><a id="more"></a><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><h5 id="纵表"><a href="#纵表" class="headerlink" title="纵表"></a>纵表</h5><p>从数据量来看纵表数据量非常大，需考虑分表来解决查询效率问题。<br>如果简单按查询数据量每表2kw来算(数据量不能简单按2kw算，需要计算字段长度，索引的页数大小)，纵表需要分17280张表。按时间分页查询时，需要全表联合查询。</p></li><li><p>按设备分<br>数据量：1k张表，每张3456万<br>7天分页查询：1k张表联合查询<br>缺点：数据量大；数据分布不均匀；分页查询慢</p></li><li><p>按维度分<br>数据量：25张表，138240万=13.824亿<br>缺点：数据量大</p></li><li><p>按维度+时间分<br>数据量：1500张表，2.304亿<br>7天分页查询：7张表关联查询<br>缺点：表数量太多；数据分布不均匀；</p></li></ul><h5 id="横表"><a href="#横表" class="headerlink" title="横表"></a>横表</h5><ul><li><p>不分表<br>缺点：字段列数多，MySQL是否支持呢？下面会列一下</p></li><li><p>按维度分<br>数据量：25张表，每张表约80个字段，70万条数据<br>7天分页查询：不需要联表查询<br>缺点：数据分布不均匀；表字段多；</p></li><li><p>按维度+细分维度分<br>细分指标只在计算时使用（同一时间上报的指标数据），分页查询时不使用<br>数据量：40张表，每张表约50个字段，44万条数据<br>7天分页查询：不需要联表查询<br>缺点：数据分布不均匀；字段相对减少；</p></li></ul><h4 id="MySQL规范"><a href="#MySQL规范" class="headerlink" title="MySQL规范"></a>MySQL规范</h4><h5 id="每张表支持最大列数"><a href="#每张表支持最大列数" class="headerlink" title="每张表支持最大列数"></a>每张表支持最大列数</h5><p><a href="https://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html" target="_blank" rel="noopener">Column Count Limits：1017</a></p><h5 id="每行字节数"><a href="#每行字节数" class="headerlink" title="每行字节数"></a>每行字节数</h5><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-limits.html" target="_blank" rel="noopener">Row Size Limits：65,535 bytes</a></p><p><img src="/2023/06/01/row-or-column-table/tablespace_size.png" alt="Table 14.25 InnoDB Maximum Tablespace Size"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据库：MySQL 5.7&lt;br&gt;业务上有&lt;strong&gt;25个维度共2000多个指标&lt;/strong&gt;数据需要存储。对于这种可变字段的指标数据，第一想法是采用纵表存储。但是具体该如何选择还是得结合业务看优缺点才行。&lt;/p&gt;
&lt;h4 id=&quot;业务场景&quot;&gt;&lt;a href=&quot;#业务场景&quot; class=&quot;headerlink&quot; title=&quot;业务场景&quot;&gt;&lt;/a&gt;业务场景&lt;/h4&gt;&lt;h5 id=&quot;数据量&quot;&gt;&lt;a href=&quot;#数据量&quot; class=&quot;headerlink&quot; title=&quot;数据量&quot;&gt;&lt;/a&gt;数据量&lt;/h5&gt;&lt;p&gt;1k台设备，每台设备每5分钟一次全量指标数据，存储60天&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纵表：60&lt;em&gt;24&lt;/em&gt;60/5&lt;em&gt;1000&lt;/em&gt;2000=&lt;strong&gt;345.6亿&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;横表：345.6亿/2000=&lt;strong&gt;1728万&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;查询场景&quot;&gt;&lt;a href=&quot;#查询场景&quot; class=&quot;headerlink&quot; title=&quot;查询场景&quot;&gt;&lt;/a&gt;查询场景&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;按指标维度+时间范围分页查&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按同一时间上报的指标数据（时间+指标名称）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="MySQL" scheme="https://2tu.github.io/tags/MySQL/"/>
    
    <category term="横表" scheme="https://2tu.github.io/tags/%E6%A8%AA%E8%A1%A8/"/>
    
    <category term="纵表" scheme="https://2tu.github.io/tags/%E7%BA%B5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>宽表、窄表、横表、纵表有什么不同</title>
    <link href="https://2tu.github.io/2023/05/28/what-diffrence-table-structure/"/>
    <id>https://2tu.github.io/2023/05/28/what-diffrence-table-structure/</id>
    <published>2023-05-28T02:29:04.000Z</published>
    <updated>2024-02-27T11:35:39.215Z</updated>
    
    <content type="html"><![CDATA[<p>宽表、窄表是大数据中的概念</p><p>宽表，字段比较多的数据库表。将业务主题相关的多个维度的字段关联在一起的一张数据库表。<br>宽表的本质：以空间换时间<br>好处：</p><ul><li>统一口径</li><li>降低统计难度，减少表之间的关联</li><li>节省跑数时间</li><li>节省资源</li></ul><p>窄表，符合三范式，相同维度的字段组成一张表。表和表之间关联查询。</p><p>横表、纵表<br>横表：也称为行表，将数据按照行进行排列。<br>纵表：也称为列式表或属性表，将数据按照列进行排列。<br><a id="more"></a><br>横表</p><table><thead><tr><th>ID</th><th>英语</th><th>数学</th><th>体育</th><th>物理</th></tr></thead><tbody><tr><td>1</td><td>99</td><td>100</td><td>100</td><td>99</td></tr></tbody></table><ul><li>优点：结构清晰，业务逻辑描述清楚；数据量小</li><li>缺点：字段固定，不便于存储；增加字段要改表结构</li></ul><p>纵表</p><table><thead><tr><th>ID</th><th>科目/datatype</th><th>成绩/value</th></tr></thead><tbody><tr><td>1</td><td>英语</td><td>99</td></tr><tr><td>2</td><td>数学</td><td>100</td></tr><tr><td>3</td><td>体育</td><td>100</td></tr><tr><td>4</td><td>物理</td><td>99</td></tr></tbody></table><ul><li>优点：可变字段存储容易</li><li>缺点：数据量大；表结构对业务描述不清晰</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;宽表、窄表是大数据中的概念&lt;/p&gt;
&lt;p&gt;宽表，字段比较多的数据库表。将业务主题相关的多个维度的字段关联在一起的一张数据库表。&lt;br&gt;宽表的本质：以空间换时间&lt;br&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统一口径&lt;/li&gt;
&lt;li&gt;降低统计难度，减少表之间的关联&lt;/li&gt;
&lt;li&gt;节省跑数时间&lt;/li&gt;
&lt;li&gt;节省资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;窄表，符合三范式，相同维度的字段组成一张表。表和表之间关联查询。&lt;/p&gt;
&lt;p&gt;横表、纵表&lt;br&gt;横表：也称为行表，将数据按照行进行排列。&lt;br&gt;纵表：也称为列式表或属性表，将数据按照列进行排列。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Data" scheme="https://2tu.github.io/categories/Data/"/>
    
    
    <category term="横表" scheme="https://2tu.github.io/tags/%E6%A8%AA%E8%A1%A8/"/>
    
    <category term="纵表" scheme="https://2tu.github.io/tags/%E7%BA%B5%E8%A1%A8/"/>
    
    <category term="宽表" scheme="https://2tu.github.io/tags/%E5%AE%BD%E8%A1%A8/"/>
    
    <category term="窄表" scheme="https://2tu.github.io/tags/%E7%AA%84%E8%A1%A8/"/>
    
    <category term="竖表" scheme="https://2tu.github.io/tags/%E7%AB%96%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何找到导致fullgc的问题代码</title>
    <link href="https://2tu.github.io/2023/05/28/How-to-find-the-code-that-fullgc/"/>
    <id>https://2tu.github.io/2023/05/28/How-to-find-the-code-that-fullgc/</id>
    <published>2023-05-28T00:50:28.000Z</published>
    <updated>2024-02-27T11:35:39.167Z</updated>
    
    <content type="html"><![CDATA[<p>服务频繁fullgc无法对外提供服务。需要查看分析出是大对象？内存分配不合理还是造成了内存泄漏的问题。<br>查找步骤</p><ul><li>查看，确认gc情况</li><li><p>查看jvm运行参数</p></li><li><p>dump分析</p></li><li><p>找出问题代码</p></li><li><p>查看存活对象情况</p></li><li>查看该进程下占用CPU最高的线程</li></ul><h4 id="查看，确认gc情况"><a href="#查看，确认gc情况" class="headerlink" title="查看，确认gc情况"></a>查看，确认gc情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc [pid] 2000</span><br></pre></td></tr></table></figure><p>每2秒打印一次pid的gc情况<br><img src="/2023/05/28/How-to-find-the-code-that-fullgc/jstat_gc.jpg" alt="jstat gc"></p><a id="more"></a><h4 id="查看jvm运行参数"><a href="#查看jvm运行参数" class="headerlink" title="查看jvm运行参数"></a>查看jvm运行参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags [pid]</span><br></pre></td></tr></table></figure><h4 id="dump分析"><a href="#dump分析" class="headerlink" title="dump分析"></a>dump分析</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=[filename].hporf [pid]</span><br></pre></td></tr></table></figure><h4 id="使用MAT分析"><a href="#使用MAT分析" class="headerlink" title="使用MAT分析"></a>使用MAT分析</h4><h5 id="内存情况"><a href="#内存情况" class="headerlink" title="内存情况"></a>内存情况</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_overview.png" alt="Overview"></p><h5 id="查看对象Histogram"><a href="#查看对象Histogram" class="headerlink" title="查看对象Histogram"></a>查看对象Histogram</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_histogram.png" alt="Histogram"></p><h5 id="大对象Dominator-Tree"><a href="#大对象Dominator-Tree" class="headerlink" title="大对象Dominator Tree"></a>大对象Dominator Tree</h5><p><img src="/2023/05/28/How-to-find-the-code-that-fullgc/thread_dominator_tree.png" alt="Dominator Tree"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;服务频繁fullgc无法对外提供服务。需要查看分析出是大对象？内存分配不合理还是造成了内存泄漏的问题。&lt;br&gt;查找步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看，确认gc情况&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看jvm运行参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dump分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找出问题代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看存活对象情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;查看该进程下占用CPU最高的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;查看，确认gc情况&quot;&gt;&lt;a href=&quot;#查看，确认gc情况&quot; class=&quot;headerlink&quot; title=&quot;查看，确认gc情况&quot;&gt;&lt;/a&gt;查看，确认gc情况&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jstat -gc [pid] 2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每2秒打印一次pid的gc情况&lt;br&gt;&lt;img src=&quot;/2023/05/28/How-to-find-the-code-that-fullgc/jstat_gc.jpg&quot; alt=&quot;jstat gc&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="fullgc" scheme="https://2tu.github.io/tags/fullgc/"/>
    
  </entry>
  
  <entry>
    <title>牛仔裤中的牛仔是什么</title>
    <link href="https://2tu.github.io/2023/05/12/What-is-jeans/"/>
    <id>https://2tu.github.io/2023/05/12/What-is-jeans/</id>
    <published>2023-05-12T10:15:46.000Z</published>
    <updated>2024-02-27T11:35:39.175Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h5><p>牛仔裤中的牛仔是什么</p><h5 id="A"><a href="#A" class="headerlink" title="A"></a>A</h5><p>“牛仔裤”一词源自英文单词“jeans”，最早可以追溯到1567年意大利热那亚港水手穿的一种粗帆布制作的裤子，当时水手们喜欢穿着这种粗糙而结实的布料做成的工作裤子，称之为Genoese, Genes，与Jeans有着相似的发音。1850年淘金热的浪潮下，移民到美国的巴伐利亚人李维·斯特劳斯创立了李维斯公司，该公司生产的帆布工装裤就是世人所知的牛仔裤的鼻祖。这种布料结实耐磨，十分适合应付繁重的日常劳作，受到当时矿工们的喜欢。<br>因此，牛仔裤中的“牛仔”并不是指牛，而是指<strong>穿着这种裤子的工人和冒险家</strong>。<br><img src="/2023/05/12/What-is-jeans/jeans.jpg" alt="jeans"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q&quot;&gt;&lt;/a&gt;Q&lt;/h5&gt;&lt;p&gt;牛仔裤中的牛仔是什么&lt;/p&gt;
&lt;h5 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;</summary>
      
    
    
    
    <category term="Other" scheme="https://2tu.github.io/categories/Other/"/>
    
    
    <category term="Kids" scheme="https://2tu.github.io/tags/Kids/"/>
    
  </entry>
  
  <entry>
    <title>XML元素名称规范</title>
    <link href="https://2tu.github.io/2023/05/11/What-is-XML-Naming-Rules/"/>
    <id>https://2tu.github.io/2023/05/11/What-is-XML-Naming-Rules/</id>
    <published>2023-05-11T11:07:45.000Z</published>
    <updated>2024-02-27T11:35:39.171Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用dom4j生成XML，期望结果<br>生成XML数据<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gNB间NG切换成功率(%)</span>&gt;</span>100<span class="tag">&lt;/<span class="name">gNB间NG切换成功率(%)</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但是抛错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Illegal character in name: <span class="string">'gNB间NG切换成功率(%)'</span>.</span><br><span class="line"></span><br><span class="line">at org.dom4j.QName.validateName(QName.java:<span class="number">340</span>)</span><br><span class="line">at org.dom4j.QName.&lt;init&gt;(QName.java:<span class="number">151</span>)</span><br><span class="line">at org.dom4j.tree.QNameCache.createQName(QNameCache.java:<span class="number">245</span>)</span><br><span class="line">at org.dom4j.tree.QNameCache.get(QNameCache.java:<span class="number">115</span>)</span><br><span class="line">at org.dom4j.DocumentFactory.createQName(DocumentFactory.java:<span class="number">191</span>)</span><br><span class="line">at org.dom4j.tree.AbstractElement.addElement(AbstractElement.java:<span class="number">760</span>)</span><br><span class="line">at Dom4jTest.test_AddTagBySpecial(Dom4jTest.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="抛错的源码"><a href="#抛错的源码" class="headerlink" title="抛错的源码"></a>抛错的源码</h4><p>查看方法at org.dom4j.QName.validateName(QName.java:340)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern RE_NAME = Pattern.compile(<span class="string">"[:_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-\ufdcfﷰ-�][:_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-\u1fff\u200c-\u200d⁰-\u218fⰀ-\u2fef、-\ud7ff豈-\ufdcfﷰ-�-.0-9·̀-ͯ‿-⁀]*"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!RE_NAME.matcher(name).matches()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Illegal character in name: '%s'."</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>dom4j为什么抛出这个错，是XML的规则就是这样还是dom4j版本不正确还是什么原因？</p><h4 id="XML-Naming-Rules"><a href="#XML-Naming-Rules" class="headerlink" title="XML Naming Rules"></a>XML Naming Rules</h4><p>参见<a href="https://www.w3schools.com/xml/xml_elements.asp" target="_blank" rel="noopener">XML Elements</a><br><img src="/2023/05/11/What-is-XML-Naming-Rules/XMLNamingRules.png" alt="XML Naming Rules"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;使用dom4j生成XML，期望结果&lt;br&gt;生成XML数据&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;gNB间NG切换成功率(%)&lt;/span&gt;&amp;gt;&lt;/span&gt;100&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;gNB间NG切换成功率(%)&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;但是抛错&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: Illegal character in name: &lt;span class=&quot;string&quot;&gt;&#39;gNB间NG切换成功率(%)&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.QName.validateName(QName.java:&lt;span class=&quot;number&quot;&gt;340&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.QName.&amp;lt;init&amp;gt;(QName.java:&lt;span class=&quot;number&quot;&gt;151&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.tree.QNameCache.createQName(QNameCache.java:&lt;span class=&quot;number&quot;&gt;245&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.tree.QNameCache.get(QNameCache.java:&lt;span class=&quot;number&quot;&gt;115&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.DocumentFactory.createQName(DocumentFactory.java:&lt;span class=&quot;number&quot;&gt;191&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.dom4j.tree.AbstractElement.addElement(AbstractElement.java:&lt;span class=&quot;number&quot;&gt;760&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at Dom4jTest.test_AddTagBySpecial(Dom4jTest.java:&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="dom4j" scheme="https://2tu.github.io/tags/dom4j/"/>
    
    <category term="XML" scheme="https://2tu.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>ThreadPoolExecutor学习</title>
    <link href="https://2tu.github.io/2023/04/07/ThreadPoolExecutor/"/>
    <id>https://2tu.github.io/2023/04/07/ThreadPoolExecutor/</id>
    <published>2023-04-07T12:24:22.000Z</published>
    <updated>2024-02-27T11:35:39.171Z</updated>
    
    <content type="html"><![CDATA[<ul><li>创建线程的几种方式<ul><li>Thread</li><li>Runnable</li><li>Callable（配合Future获取返回值）</li><li>线程池<ul><li>Executors</li><li>ThreadPoolExecutor</li></ul></li></ul></li><li>线程池ThreadPoolExcecutor的7个参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment"> *        creates a new thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment"> *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure><ul><li>corePoolSize（核心线程数）</li><li>maximumPoolSize（最大线程数）</li><li>keepAliveTime、unit（最大空闲时间）</li><li>workQueue（阻塞队列）</li><li>threadFactory（线程工厂，为线程自定义名称）</li><li>handler（拒绝策略）</li></ul></li><li>线程池执行流程<a id="more"></a><img src="/2023/04/07/ThreadPoolExecutor/ThreadPoolExcutor_flow.png" alt="ThreadPoolExcutor Flow"></li><li>线程池属性标识<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The main pool control state, ctl, is an atomic integer packing</span></span><br><span class="line"><span class="comment">    * two conceptual fields</span></span><br><span class="line"><span class="comment">    *   workerCount, indicating the effective number of threads</span></span><br><span class="line"><span class="comment">    *   runState,    indicating whether running, shutting down etc</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * In order to pack them into one int, we limit workerCount to</span></span><br><span class="line"><span class="comment">    * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2</span></span><br><span class="line"><span class="comment">    * billion) otherwise representable. If this is ever an issue in</span></span><br><span class="line"><span class="comment">    * the future, the variable can be changed to be an AtomicLong,</span></span><br><span class="line"><span class="comment">    * and the shift/mask constants below adjusted. But until the need</span></span><br><span class="line"><span class="comment">    * arises, this code is a bit faster and simpler using an int.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The workerCount is the number of workers that have been</span></span><br><span class="line"><span class="comment">    * permitted to start and not permitted to stop.  The value may be</span></span><br><span class="line"><span class="comment">    * transiently different from the actual number of live threads,</span></span><br><span class="line"><span class="comment">    * for example when a ThreadFactory fails to create a thread when</span></span><br><span class="line"><span class="comment">    * asked, and when exiting threads are still performing</span></span><br><span class="line"><span class="comment">    * bookkeeping before terminating. The user-visible pool size is</span></span><br><span class="line"><span class="comment">    * reported as the current size of the workers set.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The runState provides the main lifecycle control, taking on values:</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *   RUNNING:  Accept new tasks and process queued tasks</span></span><br><span class="line"><span class="comment">    *   SHUTDOWN: Don't accept new tasks, but process queued tasks</span></span><br><span class="line"><span class="comment">    *   STOP:     Don't accept new tasks, don't process queued tasks,</span></span><br><span class="line"><span class="comment">    *             and interrupt in-progress tasks</span></span><br><span class="line"><span class="comment">    *   TIDYING:  All tasks have terminated, workerCount is zero,</span></span><br><span class="line"><span class="comment">    *             the thread transitioning to state TIDYING</span></span><br><span class="line"><span class="comment">    *             will run the terminated() hook method</span></span><br><span class="line"><span class="comment">    *   TERMINATED: terminated() has completed</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The numerical order among these values matters, to allow</span></span><br><span class="line"><span class="comment">    * ordered comparisons. The runState monotonically increases over</span></span><br><span class="line"><span class="comment">    * time, but need not hit each state. The transitions are:</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * RUNNING -&gt; SHUTDOWN</span></span><br><span class="line"><span class="comment">    *    On invocation of shutdown(), perhaps implicitly in finalize()</span></span><br><span class="line"><span class="comment">    * (RUNNING or SHUTDOWN) -&gt; STOP</span></span><br><span class="line"><span class="comment">    *    On invocation of shutdownNow()</span></span><br><span class="line"><span class="comment">    * SHUTDOWN -&gt; TIDYING</span></span><br><span class="line"><span class="comment">    *    When both queue and pool are empty</span></span><br><span class="line"><span class="comment">    * STOP -&gt; TIDYING</span></span><br><span class="line"><span class="comment">    *    When pool is empty</span></span><br><span class="line"><span class="comment">    * TIDYING -&gt; TERMINATED</span></span><br><span class="line"><span class="comment">    *    When the terminated() hook method has completed</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Threads waiting in awaitTermination() will return when the</span></span><br><span class="line"><span class="comment">    * state reaches TERMINATED.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Detecting the transition from SHUTDOWN to TIDYING is less</span></span><br><span class="line"><span class="comment">    * straightforward than you'd like because the queue may become</span></span><br><span class="line"><span class="comment">    * empty after non-empty and vice versa during SHUTDOWN state, but</span></span><br><span class="line"><span class="comment">    * we can only terminate if, after seeing that it is empty, we see</span></span><br><span class="line"><span class="comment">    * that workerCount is 0 (which sometimes entails a recheck -- see</span></span><br><span class="line"><span class="comment">    * below).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 1.高3位：声明当前线程池状态  2.低29位：声明线程池中的线程个数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">   <span class="comment">// 29，方便后面做位运算</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">   <span class="comment">// 通过位运算得出最大容量</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池状态</span></span><br><span class="line">   <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">   <span class="comment">// 111 正常接收任务</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 000 不接收新任务，仍会处理阻塞队列中的任务，正在进行中的任务也正常进行</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 001 不接收新任务，不处理阻塞队列中的任务，中断正在进行中的任务</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 010 过渡状态，当前线程池即将结束</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="comment">// 011 结束</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Packing and unpacking ctl</span></span><br><span class="line">   <span class="comment">// 获取线程池状态</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">   <span class="comment">// 获取线程池的线程数量</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="线程池数量选择"><a href="#线程池数量选择" class="headerlink" title="线程池数量选择"></a>线程池数量选择</h4><ul><li>IO密集型（I/O bound）<br>程序处理时，CPU需要等待时间比CPU运算时间更多。<br>线程数量：（线程等待时间+CPU运算时间）* CPU核数 / CPU处理时间</li><li>CPU密集型（CPU-bound）<br>也叫计算密集型，大部分时间用来计算、逻辑判断等CPU动作的程序。任务不太需要访问I/O，或使用线程等方式减少了IO等待时间。<br>线程数量：CPU个数或+1 +2</li></ul><h5 id="nginx-IO密集型"><a href="#nginx-IO密集型" class="headerlink" title="nginx IO密集型"></a>nginx IO密集型</h5><p>nginx处理文件缓冲时有几种方式</p><ul><li>sendfile<br>处理小文件时使用<ul><li>减少数据拷贝，提高发送效率</li><li>socket通过dma直接访问文件数据</li></ul></li><li>directio<br>处理大文件时使用<ul><li>directio以512字节为边界对齐block进行发送</li><li>未对齐的block以阻塞方式读取发送</li></ul></li><li>aio<ul><li>airead</li><li>线程池异步读取较大文件，以提高io效率</li></ul></li></ul><h5 id="redis-CPU密集型"><a href="#redis-CPU密集型" class="headerlink" title="redis CPU密集型"></a>redis CPU密集型</h5><p>io-threads = 4<br>非阻塞IO<br>多路复用</p><p>IO线程作用于<br><img src="/2023/04/07/ThreadPoolExecutor/RedisIO.jpg" alt="Redis IO"><br>这就要看其中read、send中的线程等待时间多，还是decode、encode使用CPU运算时间多。由于我们使用非阻塞IO，无需等待，所以decode、encode时CPU运算时间多，最后得出结论Redis是 CPU密集型</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;创建线程的几种方式&lt;ul&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Runnable&lt;/li&gt;
&lt;li&gt;Callable（配合Future获取返回值）&lt;/li&gt;
&lt;li&gt;线程池&lt;ul&gt;
&lt;li&gt;Executors&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程池ThreadPoolExcecutor的7个参数&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Creates a new &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; ThreadPoolExecutor&amp;#125; with the given initial&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * parameters.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; corePoolSize the number of threads to keep in the pool, even&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        if they are idle, unless &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; allowCoreThreadTimeOut&amp;#125; is set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; maximumPoolSize the maximum number of threads to allow in the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        pool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; keepAliveTime when the number of threads is greater than&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        the core, this is the maximum time that excess idle threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        will wait for new tasks before terminating.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; unit the time unit for the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; keepAliveTime&amp;#125; argument&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; workQueue the queue to use for holding tasks before they are&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        executed.  This queue will hold only the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Runnable&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        tasks submitted by the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; execute&amp;#125; method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; threadFactory the factory to use when the executor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        creates a new thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; handler the handler to use when execution is blocked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *        because the thread bounds and queue capacities are reached&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IllegalArgumentException if one of the following holds:&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; corePoolSize &amp;lt; 0&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; keepAliveTime &amp;lt; 0&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; maximumPoolSize &amp;lt;= 0&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; maximumPoolSize &amp;lt; corePoolSize&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; NullPointerException if &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; workQueue&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; threadFactory&amp;#125; or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; handler&amp;#125; is null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; corePoolSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maximumPoolSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; keepAliveTime,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          TimeUnit unit,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          ThreadFactory threadFactory,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                          RejectedExecutionHandler handler)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;corePoolSize（核心线程数）&lt;/li&gt;
&lt;li&gt;maximumPoolSize（最大线程数）&lt;/li&gt;
&lt;li&gt;keepAliveTime、unit（最大空闲时间）&lt;/li&gt;
&lt;li&gt;workQueue（阻塞队列）&lt;/li&gt;
&lt;li&gt;threadFactory（线程工厂，为线程自定义名称）&lt;/li&gt;
&lt;li&gt;handler（拒绝策略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程池执行流程&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://2tu.github.io/categories/Java/"/>
    
    
    <category term="ThreadPoolExecutor" scheme="https://2tu.github.io/tags/ThreadPoolExecutor/"/>
    
  </entry>
  
</feed>
